openapi: 3.0.0
info:
  title: Calcetto API
  description: <strong><i>API definitions for Calcetto API server</i></strong>
  version: 1.0.0
# Server
servers:
  - url: 'http://localhost:5001/api/v2/'
    description: Development server.

# Path
paths:
  #-----------------------------------------------------------------------------
  # Authentication
  #
  /auth:
    get:
      tags:
        - Authentication
      summary: Check if user is already logged.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationReponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete user
      tags:
        - Authentication
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationReponse'
        '400':
          description: |
            User not found for provided data or invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/update:
    put:
      summary: |
        Update existing user and related player if exists.
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationReponse'
        '400':
            $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/authentication:
    post:
      summary: Authenticate user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: User
                password: UserPasswordInPlainText
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationReponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/register:
    post:
      summary: Register new user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                email:
                  type: string
                cEmail:
                  type: string
                password:
                  type: string
                cPassword:
                  type: string
                phone:
                  type: string
                birthday:
                  type: string
                playerRole:
                  $ref: '#/components/schemas/PlayerRole'
              example:
                username: 'username'
                name: 'name'
                surname: 'surname'
                email: 'test@email.com'
                cEmail: 'test@email.com'
                password: 'verylongpassword'
                cPassword: 'verylongpassword'
                phone: '3331234598'
                birthday: ''
                playerRole: 'GoalKeeper'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationReponse'
        '400':
          description: Found errors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: string
        '500':
          $ref: '#/components/responses/ServerError'
  /auth/logout:
    get:
      summary: Logout.
      tags:
        - Authentication
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationReponse'

  #-----------------------------------------------------------------------------
  # Player
  #



#-----------------------------------------------------------------------------
# Components
#
components:
  #---------------------------------------------------------------------------
  # Schema : $ref: '#/components/schemas/{name}'
  #
  schemas:
    BasicResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: HTTPStatusCode
        message:
          type: string
        userMessage:
          $ref: '#/components/schemas/UserMessage'
    UserMessage:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          enum:
            - danger
            - warning
            - success
        message:
          type: string
    AuthenticationReponse:
      allOf:
        - $ref: '#/components/schemas/BasicResponse'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserDTO'
    UserDTO:
      type: object
      required:
        - id
        - username
        - name
        - surname
        - email
        - phone
        - role
        - birthday
        - label
      properties:
        id:
          type: integer
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        birthday:
          type: string
          description: It's a javascript Date object
        label:
          type: string
        player:
          $ref: '#/components/schemas/PlayerDTO'
    UserRole:
      type: string
      enum:
        - Admin
        - User
    PlayerDTO:
      type: object
      required:
        - id
        - name
        - surname
        - alias
        - label
        - role
        - email
        - phone
        - editable
        - rowNumber
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
        alias:
          type: string
        label:
          type: string
        role:
          $ref: '#/components/schemas/PlayerRole'
        email:
          type: string
        phone:
          type: string
        userId:
          type: string
          description: |
            Reference to UserDTO
        match_played:
          type: integer
        match_won:
          type: integer
        total_score:
          type: integer
        editable:
          type: boolean
          description: |
            Indicates if player can be deleted.
            A player can be deleted if is not part of any pairs. ( see PairDTO )
        rowNumber:
          type: integer
          description: Used by FE to show row number on table
    PlayerRole:
      type: string
      enum:
        - Non sono un giocatore
        - Portiere
        - Master
        - Attaccante

  #---------------------------------------------------------------------------
  # Responses : $ref: '#/components/responses/{name}'
  #
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicResponse'
    ServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicResponse'

  #---------------------------------------------------------------------------
  # Parameters : $ref: '#/components/parameters/{name}'
  #
  parameters:
    offsetParam:
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
