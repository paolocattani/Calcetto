{"version":3,"sources":["components/core/Icons.tsx","components/core/utils.ts","components/Tournament/type.ts","components/Tournament/helper.tsx","components/Tournament/new.tsx","components/Tournament/Tournament.jsx"],"names":["TrashIcon","size","undefined","icon","findIconDefinition","prefix","iconName","SaveIcon","ToggleOn","ToggleOff","RightArrowIcon","getTodayDate","formatDate","Date","translateTournamentProgress","value","TournamentProgress","New","PairsSelection","Stage1","Stage2","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","RegExp","passwordRegExp","emailRegExp","getEmptyTournament","name","progress","id","ownerId","public","label","IndicatorSeparator","innerProps","style","indicatorSeparatorStyle","alignSelf","backgroundColor","marginBottom","marginTop","marginRigth","width","cardStyle","margin","borderColor","borderWidth","textAlign","NewTournament","showMessage","currentHistory","useHistory","useState","setName","setDate","visible","setVisible","handleSubmit","evt","a","preventDefault","model","fetch","method","headers","body","JSON","stringify","response","json","result","ok","push","status","message","Form","onSubmit","Row","Col","md","Group","controlId","Label","Control","type","required","placeholder","maxLength","onChange","event","currentTarget","as","highlightDates","locale","selected","dateFormat","newValue","Button","variant","className","fontSize","fontWeight","getOptionLabel","FTournament","selectedOption","setSelectedOption","tournamentList","setTournamentList","newTournament","setNewTournament","messageInitialState","setMessage","useEffect","setterFunction","setterFunction2","found","find","e","tmp","sort","setTimeout","SessionContext","Consumer","session","span","offset","sm","Card","Header","Body","isEditable","htmlFor","components","styles","customStyles","options","isSearchable","isClearable","disabled","padding","Footer","onClick","option","provided","state","color","control","height","singleValue","valueContainer"],"mappings":"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","file":"static/js/14.796de68f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { findIconDefinition, SizeProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\ninterface IconType {\r\n  size?: SizeProp;\r\n}\r\nexport const TrashIcon: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'far',\r\n      iconName: 'trash-alt'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const SaveIcon: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'far',\r\n      iconName: 'save'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const ToggleOn: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'fas',\r\n      iconName: 'toggle-on'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const ToggleOff: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'fas',\r\n      iconName: 'toggle-off'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const RightArrowIcon: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'far',\r\n      iconName: 'arrow-alt-circle-right'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const PlusIcon: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'fas',\r\n      iconName: 'plus'\r\n    })}\r\n  />\r\n);\r\n","import { TournamentProgress } from '../Tournament/type';\r\n\r\nexport const getTodayDate = () => formatDate(new Date());\r\n\r\nexport function translateTournamentProgress(value: string) {\r\n  switch (value) {\r\n    case TournamentProgress.New:\r\n      return 'Nuovo';\r\n    case TournamentProgress.PairsSelection:\r\n      return 'Selezione Coppie';\r\n    case TournamentProgress.Stage1:\r\n      return 'Fase 1';\r\n    case TournamentProgress.Stage2:\r\n      return 'Fase 2';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport function formatDate(date: Date) {\r\n  var d = new Date(date),\r\n    month = '' + (d.getMonth() + 1),\r\n    day = '' + d.getDate(),\r\n    year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = '0' + month;\r\n  if (day.length < 2) day = '0' + day;\r\n\r\n  return [year, month, day].join('/');\r\n}\r\n\r\nexport function getRandomIntInclusive(min: number, max: number) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\r\n}\r\n\r\nexport const phoneRegExp = new RegExp('^d{10}$');\r\nexport const passwordRegExp = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,16})');\r\nexport const emailRegExp = new RegExp(\r\n  // eslint-disable-next-line quotes\r\n  \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"\r\n);\r\n","import { PairModel } from '../Pair/type';\r\n\r\nexport type TournamentProgressType = 'New' | 'PairsSelection' | 'Stage1' | 'Stage2';\r\n\r\nexport type TournamentModel = {\r\n  id: number;\r\n  name: string;\r\n  date: Date;\r\n  progress: TournamentProgressType;\r\n  public: boolean;\r\n  label: string;\r\n  ownerId?: number;\r\n  pairs?: PairModel[];\r\n};\r\n\r\nexport type selectOptions = {\r\n  label: string;\r\n  value: string;\r\n  data: TournamentModel;\r\n};\r\n\r\nexport const TournamentProgress = { New: 'New', PairsSelection: 'PairsSelection', Stage1: 'Stage1', Stage2: 'Stage2' };\r\n","import React from 'react';\r\nimport { getTodayDate } from '../core/utils';\r\nimport { TournamentModel, selectOptions } from './type';\r\nimport { useState } from 'react';\r\n\r\nexport function fetchTournaments(setterFunction: typeof useState, setterFunction2: typeof useState): void {\r\n  (async () => {\r\n    const response = await fetch('/api/v1/tournament/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const result: TournamentModel[] = await response.json();\r\n    let found = result.find(e => e.name === getTodayDate());\r\n    let tmp = found ? [found, ...result] : result;\r\n    tmp.sort();\r\n    setterFunction(tmp);\r\n    if (setterFunction2) setterFunction2(tmp[0]);\r\n  })();\r\n}\r\n\r\nexport function fetchTournament(setterFunction: typeof useState, tId: number): void {\r\n  (async () => {\r\n    const response = await fetch(`/api/v1/tournament/${tId}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const result: TournamentModel = await response.json();\r\n    setterFunction(result);\r\n  })();\r\n}\r\n\r\nexport async function getTournament(tId: number): Promise<TournamentModel | null> {\r\n  const response = await fetch(`/api/v1/tournament/${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n  const result: TournamentModel = await response.json();\r\n  return response.ok ? result : null;\r\n}\r\n\r\nexport function getEmptyTournament(name: string, progress?: string) {\r\n  return {\r\n    id: null,\r\n    name: name || '',\r\n    ownerId: null,\r\n    date: new Date(),\r\n    progress: progress || 'New',\r\n    public: true,\r\n    label: name || ''\r\n  };\r\n}\r\n\r\n// select helper\r\nexport function customFilter(option: selectOptions, searchText: string): boolean {\r\n  console.log('customFilter : ', option, typeof option.data);\r\n  return option.data.name ? option.data.name.toLowerCase().includes(searchText.toLowerCase()) : false;\r\n}\r\n\r\n// -------------------------------------------------\r\n// https://react-select.com/components#components\r\n// Indicator Separator\r\n\r\nexport const IndicatorSeparator = ({ innerProps }: any) => <span style={indicatorSeparatorStyle} {...innerProps} />;\r\nexport const indicatorSeparatorStyle = {\r\n  alignSelf: 'stretch',\r\n  backgroundColor: 'green',\r\n  marginBottom: 8,\r\n  marginTop: 8,\r\n  marginRigth: 10,\r\n  width: 1\r\n};\r\nexport const cardStyle = {\r\n  width: '100%',\r\n  margin: 'auto',\r\n  backgroundColor: 'inherit',\r\n  borderColor: '#ffc107',\r\n  borderWidth: '3px',\r\n  textAlign: 'left'\r\n};\r\n/*\r\nconst formatNewLabel = inputString => (\r\n  <strong>\r\n    {inputString}\r\n    <small style={{ color: '#ccc' }}>@ New</small>\r\n  </strong>\r\n);\r\n\r\nconst formatOptionLabel = ({ name, progress, innerProps }) => (\r\n  <strong>\r\n    {name}\r\n    <small style={{ color: '#ccc' }}>@{progress}</small>\r\n  </strong>\r\n);\r\n\r\n*/\r\n","import React, { useState } from 'react';\r\nimport { Form, Col, Button } from 'react-bootstrap';\r\n\r\n// Date picker\r\nimport DatePicker from 'react-datepicker';\r\nimport { getEmptyTournament } from './helper';\r\nimport { TournamentProgress } from './type';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype newTProps = {\r\n  showMessage: (message: string, type: string) => void;\r\n};\r\n\r\nconst NewTournament: React.FC<newTProps> = ({ showMessage }) => {\r\n  let currentHistory = useHistory();\r\n\r\n  const [name, setName] = useState<string>('');\r\n  const [date, setDate] = useState<Date>(new Date());\r\n  const [visible, setVisible] = useState<boolean>(true);\r\n\r\n  const handleSubmit = async (evt: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n    evt.preventDefault();\r\n    if (!name) {\r\n      showMessage('Inserire un nome per il torneo', 'danger');\r\n      return;\r\n    }\r\n\r\n    let model = getEmptyTournament(name, TournamentProgress.PairsSelection);\r\n    model.date = date;\r\n    model.public = visible;\r\n\r\n    const response = await fetch('/api/v1/tournament', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model)\r\n    });\r\n    const result = await response.json();\r\n    if (response.ok) currentHistory.push(`/tournament/${result.id}`);\r\n    else {\r\n      if (response.status === 401) showMessage('Non sei autorizzato', 'danger');\r\n      else if (result.message) showMessage(result.message, 'danger');\r\n      else showMessage('Errore interno. Riprovare piu tardi...', 'danger');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Row>\r\n        <Col md={6}>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Nome</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              required\r\n              placeholder=\"Nome Torneo\"\r\n              maxLength={30}\r\n              value={name}\r\n              onChange={(event: React.FormEvent<HTMLSelectElement>) => setName(event.currentTarget.value)}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col md={3}>\r\n          <Form.Group>\r\n            <Form.Label>Data</Form.Label>\r\n            <Form.Control\r\n              as={() => (\r\n                <DatePicker\r\n                  highlightDates={[new Date()]}\r\n                  locale=\"it\"\r\n                  selected={date}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={newValue => setDate(newValue ? newValue : new Date())}\r\n                />\r\n              )}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n        </Col>\r\n\r\n        <Col md={3}>\r\n          <Form.Group controlId=\"visible\">\r\n            <Form.Label>Visibilità </Form.Label>\r\n            <Form.Control as=\"select\" onChange={() => setVisible(!visible)}>\r\n              <option>Pubblico</option>\r\n              <option>Privato</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Col>\r\n      </Form.Row>\r\n      <Form.Row>\r\n        <Col>\r\n          <Button type=\"submit\" size=\"lg\" variant=\"outline-warning\" className=\"float-right default-color-white\">\r\n            <span style={{ fontSize: 'larger', fontWeight: 'bolder' }}>Prosegui</span>\r\n          </Button>\r\n        </Col>\r\n      </Form.Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NewTournament;\r\n","import React, { useState, useEffect } from 'react';\r\n// React-Select\r\nimport Select from 'react-select';\r\n// Bootstrap\r\nimport { Form, Button, Card, Col } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router';\r\n// Core\r\nimport { getTodayDate } from '../core/utils';\r\nimport { SessionContext } from '../core/routing/SessionContext';\r\nimport { GenericToast } from '../core/generic/Commons';\r\nimport { RightArrowIcon } from '../core/Icons';\r\n// Helper\r\nimport { fetchTournaments, cardStyle, IndicatorSeparator } from './helper';\r\nimport { formatDate, translateTournamentProgress } from '../core/utils';\r\nimport NewTournament from './new';\r\n\r\nconst FTournament = () => {\r\n  // State definition\r\n  const [selectedOption, setSelectedOption] = useState(getTodayDate());\r\n  const [tournamentList, setTournamentList] = useState([]);\r\n  const [newTournament, setNewTournament] = useState(false);\r\n\r\n  const messageInitialState = { message: '', type: 'success' };\r\n  const [message, setMessage] = useState(messageInitialState);\r\n  let currentHistory = useHistory();\r\n\r\n  useEffect(() => fetchTournaments(setTournamentList, setSelectedOption), []);\r\n\r\n  const showMessage = (message, type) => {\r\n    setMessage({ message, type });\r\n    setTimeout(() => setMessage(messageInitialState), 5000);\r\n  };\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n    if (selectedOption) currentHistory.push(`/tournament/${selectedOption.id}`);\r\n    else showMessage('Errore, riprovare piu tardi...', 'danger');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GenericToast message={message.message} type={message.type} />\r\n      <SessionContext.Consumer>\r\n        {([session]) => (\r\n          <Col md={{ span: '6', offset: '3' }} sm=\"12\">\r\n            <Card style={cardStyle}>\r\n              <Card.Header as=\"h2\">Torneo</Card.Header>\r\n              <Card.Body>\r\n                <Col>\r\n                  {session.isEditable && newTournament ? (\r\n                    <NewTournament showMessage={showMessage} />\r\n                  ) : (\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <label htmlFor=\"tournamentSelect\">Selezione Torneo</label>\r\n                      <Select\r\n                        id=\"tournamentSelect\"\r\n                        components={{ IndicatorSeparator }}\r\n                        styles={customStyles}\r\n                        value={selectedOption}\r\n                        options={tournamentList}\r\n                        placeholder=\"Cerca un torneo\"\r\n                        isSearchable\r\n                        getOptionLabel={getOptionLabel}\r\n                        isClearable\r\n                        onChange={selectedOption => setSelectedOption(selectedOption)}\r\n                      />\r\n                      <Button\r\n                        type=\"submit\"\r\n                        size=\"lg\"\r\n                        variant=\"outline-warning\"\r\n                        className=\"float-right default-color-white\"\r\n                        disabled={!selectedOption}\r\n                      >\r\n                        <span style={{ fontSize: 'larger', fontWeight: 'bolder', padding: '1vw' }}>Prosegui</span>\r\n                        <RightArrowIcon size=\"lg\" />\r\n                      </Button>\r\n                    </Form>\r\n                  )}\r\n                </Col>\r\n              </Card.Body>\r\n              <Card.Footer>\r\n                {session.isEditable ? (\r\n                  newTournament ? (\r\n                    <Button\r\n                      type=\"button\"\r\n                      size=\"lg\"\r\n                      variant=\"outline-warning\"\r\n                      className=\"float-left default-color-white\"\r\n                      onClick={() => setNewTournament(false)}\r\n                    >\r\n                      Seleziona un torneo\r\n                    </Button>\r\n                  ) : (\r\n                    <Button\r\n                      type=\"button\"\r\n                      size=\"lg\"\r\n                      variant=\"outline-warning\"\r\n                      className=\"float-left default-color-white\"\r\n                      onClick={() => setNewTournament(true)}\r\n                    >\r\n                      Crea un nuovo torneo\r\n                    </Button>\r\n                  )\r\n                ) : null}\r\n              </Card.Footer>\r\n            </Card>\r\n          </Col>\r\n        )}\r\n      </SessionContext.Consumer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FTournament;\r\n\r\nconst getOptionLabel = ({ name, date, progress }) =>\r\n  name + ' - ' + formatDate(date) + '@' + translateTournamentProgress(progress);\r\n\r\nconst customStyles = {\r\n  // menuList: (provided, state) => ({ ...provided, border: '1px solid #ffc107' }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: 'white',\r\n    color: 'black',\r\n    '&:hover': {\r\n      backgroundColor: '#64bd9c',\r\n      color: 'white'\r\n    }\r\n  }),\r\n  control: provided => ({ ...provided, height: '3vmin', marginBottom: '40px' }),\r\n  singleValue: (provided, state) => ({ ...provided }),\r\n  valueContainer: provided => ({ ...provided, height: '100%', fontSize: 'larger' })\r\n};\r\n"],"sourceRoot":""}