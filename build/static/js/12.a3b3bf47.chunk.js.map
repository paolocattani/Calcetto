{"version":3,"sources":["common.module.css","components/Stage1/header.tsx","components/Stage1/helper.ts","components/Stage1/table.jsx","components/Stage1/editor.js","components/Stage1/handler.tsx","components/Stage1/wrapper.tsx"],"names":["module","exports","tableHeader","title","saved","divStyle","color","undefined","style","comparator","obj1","obj2","total","rowNumber","Stage1Table","editable","rows","columns","tableName","updateCellValue","autoOrder","updatePlacement","dispatch","useDispatch","useState","selectedRows","setSelectedRows","isAdmin","useSelector","SessionSelector","tournament","TournamentSelector","getTournament","selectRow","mode","onSelect","row","isSelected","console","log","selected","found","find","e","filter","Stage1Action","setSelectedPairs","stageName","onSelectAll","backgroundColor","hideSelectColumn","progress","TournamentProgress","Stage2","key","bootstrap4","keyField","data","cellEdit","cellEditFactory","blurToSave","beforeSaveCell","oldValue","newValue","column","id","startsWith","parseInt","text","value","getOpposite","afterSaveCell","acc","sort","e1","e2","forEach","index","noDataIndication","headerClasses","caption","striped","hover","newColumn","dataField","toString","headerStyle","colIndex","width","headerAlign","content","rowIndex","columnIndex","align","cell","editor","type","Type","SELECT","options","label","pairsList","baseColumns","ii","length","push","Stage1Handler","isLoading","setIsLoading","setIsSaved","map","tId","pair","placement","jj","rowsGenerator","setRows","stage1Name","a","model","fetch","method","headers","body","JSON","stringify","response","json","score","pair1Id","pair2Id","ok","setTimeout","useEffect","result","fetchData","withRouter","currentHistory","useHistory","session","getSession","prev","curr","needRefresh","Stage1Selector","getNeedRefresh","getSelectedPairs","PairSelector","getPairsList","Col","className","commonStyle","toolsBarContainer","Row","toolsBarRow","Button","variant","onClick","Stage2Action","delete","request","disabled","TournamentAction","updateTournament","count","fetchStage2","tournamentId","stage","stageList","localeCompare","element","renderTables"],"mappings":"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","file":"static/js/12.a3b3bf47.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"functionsList\":\"common_functionsList__3B3UB\",\"toolsBarContainer\":\"common_toolsBarContainer__1nanA\",\"toolsBarRow\":\"common_toolsBarRow__r8q12\"};","import React from 'react';\r\nimport { headerPropsType } from './type';\r\n\r\nconst tableHeader: React.FC<headerPropsType> = ({ title, saved }: headerPropsType) => {\r\n  const divStyle = {\r\n    color: saved ? '#4feb34' : undefined\r\n  };\r\n  return (\r\n    <h3>\r\n      <b style={divStyle}>\r\n        Girone - <strong>{title}</strong>\r\n      </b>\r\n      {saved ? <small> - Salvataggio in corso...</small> : null}\r\n    </h3>\r\n  );\r\n};\r\n\r\nexport default tableHeader;\r\n","import { PairDTO, Stage1Row } from 'models';\r\n\r\n/**\r\n *\r\n * @param value il valore di partenza\r\n * @returns il valore opposto a quello di partenze\r\n *\r\n *  3->0 , 2->1 , 1->2 , 0->3\r\n */\r\nexport function getOpposite(value: string | null) {\r\n  /*\r\n   * Attenzione :\r\n   *  !0 = true\r\n   *  !''  = true\r\n   *  !null   = true\r\n   *  !undefined  = true\r\n   */\r\n  if (value === null) return null;\r\n  switch (parseInt(value)) {\r\n    case 3:\r\n      return 0;\r\n    case 2:\r\n      return 1;\r\n    case 1:\r\n      return 2;\r\n    case 0:\r\n      return 3;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} obj1\r\n * @param {*} obj2\r\n */\r\nexport function comparator(obj1: Stage1Row, obj2: Stage1Row) {\r\n  // in caso di parità valuto scontro diretto\r\n  if (obj1.total === obj2.total) {\r\n    if (obj1[`col${obj2.rowNumber}`] === 3 || obj1[`col${obj2.rowNumber}`] === 2) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n  return obj2.total - obj1.total;\r\n}\r\n\r\n/**\r\n * Questo metodo riceve una lista di coppie PairdDTO e la trasforma in Stage1Row.\r\n * Viene utilizzato da Stage1.handler per costruire la struttura da passare alla tabella\r\n * Inoltre viene passata al BE per salvare i dati sul DB.\r\n *\r\n * @param pairsList PairDTO[] Lista di coppie\r\n *\r\n */\r\nexport const rowsGenerator = (pairsList: PairDTO[]): Stage1Row[] =>\r\n  pairsList.map((e, ii) => {\r\n    const row: Stage1Row = {\r\n      id: `row-${e.tId}-${ii}`,\r\n      rowNumber: ii + 1,\r\n      pair: e,\r\n      total: 0,\r\n      placement: e.placement || 0,\r\n    };\r\n    for (let jj = 1; jj <= pairsList.length; jj++) {\r\n      row[`col${jj}`] = null;\r\n    }\r\n    return row;\r\n  });\r\n","import React, { useState } from 'react';\r\n// table\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\n// helper\r\nimport TableHeader from './header';\r\nimport { getOpposite, comparator } from './helper';\r\n//\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\n// style\r\nimport { Stage1Action } from 'actions';\r\nimport { TournamentSelector } from 'selectors';\r\nimport { TournamentProgress } from 'models';\r\n\r\n// TODO: convert this component to ts\r\nconst Stage1Table = ({ rows, columns, tableName, updateCellValue, autoOrder, updatePlacement, saved }) => {\r\n  const dispatch = useDispatch();\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const isAdmin = useSelector(SessionSelector.isAdmin);\r\n  const tournament = useSelector(TournamentSelector.getTournament);\r\n\r\n  const cellEditProps = (editable) =>\r\n    cellEditFactory({\r\n      mode: editable ? 'click' : 'none',\r\n      blurToSave: true,\r\n      beforeSaveCell: (oldValue, newValue, row, column) => {\r\n        if (column.id.startsWith('col')) {\r\n          // Aggiorno cella opposta\r\n          rows[parseInt(column.text) - 1][`col${row.rowNumber}`] = getOpposite(newValue);\r\n        }\r\n      },\r\n      afterSaveCell: (oldValue, newValue, row, column) => {\r\n        if (column.id.startsWith('col')) {\r\n          // Aggiorno dati sul Db\r\n          updateCellValue(oldValue, newValue, row, column);\r\n\r\n          // Ricalcolo totali riga\r\n          let acc = 0;\r\n          for (let key in row) if (key.startsWith('col') && row[key]) acc += parseInt(row[key]);\r\n          rows[row.rowNumber - 1]['total'] = acc ? acc : 0;\r\n          console.log('Row : ', rows[row.rowNumber - 1]);\r\n          //... e riga opposta\r\n          acc = 0;\r\n          for (let key in rows[parseInt(column.text) - 1])\r\n            if (key.startsWith('col') && rows[parseInt(column.text) - 1][key])\r\n              acc += parseInt(rows[parseInt(column.text) - 1][key]);\r\n          rows[parseInt(column.text) - 1]['total'] = acc ? acc : 0;\r\n          console.log('Opposite : ', rows[parseInt(column.text) - 1]);\r\n        }\r\n        // Aggiorno posizione relativa\r\n        if (autoOrder)\r\n          [...rows]\r\n            .sort((e1, e2) => comparator(e1, e2))\r\n            .forEach((row, index) => (rows[row.rowNumber - 1]['placement'] = index + 1));\r\n        updatePlacement(rows);\r\n      },\r\n    });\r\n\r\n  const handleOnSelect = (row, isSelected) => {\r\n    console.log('handleOnSelect : ', row);\r\n    const found = selectedRows.find((e) => e.rowNumber === row.rowNumber) ? true : false;\r\n    let selected;\r\n    if (isSelected) {\r\n      selected = found ? selectedRows : [row, ...selectedRows];\r\n    } else {\r\n      selected = found ? selectedRows.filter((e) => e.rowNumber !== row.rowNumber) : selectedRows;\r\n    }\r\n    console.log('Selected : ', selected);\r\n\r\n    setSelectedRows(selected);\r\n    dispatch(\r\n      Stage1Action.setSelectedPairs({\r\n        stageName: tableName,\r\n        rows: selected,\r\n      })\r\n    );\r\n    return true;\r\n  };\r\n\r\n  const handleOnSelectAll = (isSelected, rows) => {\r\n    setSelectedRows(isSelected ? rows : []);\r\n    dispatch(\r\n      Stage1Action.setSelectedPairs({\r\n        stageName: tableName,\r\n        rows: isSelected ? rows : [],\r\n      })\r\n    );\r\n  };\r\n\r\n  const selectRow = {\r\n    mode: 'checkbox',\r\n    onSelect: handleOnSelect,\r\n    onSelectAll: handleOnSelectAll,\r\n    style: { backgroundColor: '#c8e6c9' },\r\n    hideSelectColumn: !isAdmin || tournament.progress >= TournamentProgress.Stage2,\r\n  };\r\n\r\n  console.log(' render : ', tableName, rows);\r\n\r\n  return (\r\n    <BootstrapTable\r\n      key={`Stege1-${tableName}`}\r\n      bootstrap4\r\n      keyField=\"id\"\r\n      data={rows}\r\n      columns={columns}\r\n      selectRow={selectRow}\r\n      cellEdit={cellEditProps(isAdmin)}\r\n      noDataIndication=\"Nessun dato reperito\"\r\n      headerClasses=\"default-background default-color-yellow\"\r\n      caption={<TableHeader title={tableName} saved={saved} />}\r\n      striped\r\n      hover\r\n    />\r\n  );\r\n};\r\n\r\nexport default Stage1Table;\r\n","import { Type } from 'react-bootstrap-table2-editor';\r\n\r\n/*\r\n  non esistono i tipi per react-bootstrap-table2-editor\r\n  quindi lascio tutto quello che riguarda l'edit come .js\r\n*/\r\nconst newColumn = (index, rowNumber) => {\r\n  return {\r\n    id: `col${index}`,\r\n    dataField: `col${index}`,\r\n    text: index.toString(),\r\n    //type: 'number',\r\n    headerStyle: (column, colIndex) => ({ width: `${75 / rowNumber}%` }),\r\n    headerAlign: (column, colIndex) => 'center',\r\n    editable: (content, row, rowIndex, columnIndex) => rowIndex !== columnIndex - 2,\r\n    align: (cell, row, rowIndex, colIndex) => 'center',\r\n    style: (content, row, rowIndex, columnIndex) => {\r\n      if (rowIndex === columnIndex - 2) return { backgroundColor: '#343a40' };\r\n      if (parseInt(content, 10) === 3 || parseInt(content, 10) === 2) return { backgroundColor: 'rgb(196, 247, 160)' };\r\n      if (parseInt(content, 10) === 1 || parseInt(content, 10) === 0) return { backgroundColor: 'rgb(255, 147, 147)' };\r\n      return null;\r\n    },\r\n    /* TODO:\r\n    editorStyle: (cell, row, rowIndex, colIndex) => {\r\n      console.log('editorStyle : ', cell, row, rowIndex, colIndex);\r\n      return { width: '100%', height: 'auto' };\r\n    }, */\r\n    editor: {\r\n      type: Type.SELECT,\r\n      options: [\r\n        { value: '3', label: '3' },\r\n        { value: '2', label: '2' },\r\n        { value: '1', label: '1' },\r\n        { value: '0', label: '0' },\r\n        { value: null, label: '' },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\nexport const columns = (pairsList) => {\r\n  let baseColumns = [\r\n    {\r\n      // Nome Coppia ( In realta contiene un oggetto di tipo Pair)\r\n      id: 'pairLabel',\r\n      dataField: 'pair.label',\r\n      text: 'Nome Coppia',\r\n      editable: false,\r\n      headerStyle: (column, colIndex) => ({ width: '15%' }),\r\n      align: (cell, row, rowIndex, colIndex) => 'center',\r\n      headerAlign: (column, colIndex) => 'center',\r\n    },\r\n    {\r\n      // Numbero riga per riferimento visivo\r\n      id: 'rowNumber',\r\n      dataField: 'rowNumber',\r\n      text: 'ID',\r\n      editable: false,\r\n      type: 'number',\r\n      headerStyle: (column, colIndex) => ({ width: '5%' }),\r\n      headerAlign: (column, colIndex) => 'center',\r\n      style: (content, row, rowIndex, columnIndex) => {\r\n        return { backgroundColor: '#343a40', color: '#ffc107' };\r\n      },\r\n    },\r\n  ];\r\n\r\n  // generazione dinamica colonne intermedie\r\n  for (let ii = 0; ii < pairsList.length; ii++) baseColumns.push(newColumn(ii + 1, pairsList.length));\r\n\r\n  baseColumns.push(\r\n    {\r\n      // Totale coppia\r\n      id: 'totale',\r\n      dataField: 'total',\r\n      text: 'Totale',\r\n      editable: false,\r\n      type: 'number',\r\n      headerStyle: (column, colIndex) => ({ width: '5%' }),\r\n      headerAlign: (column, colIndex) => 'center',\r\n    },\r\n    {\r\n      // Posizionamento coppia\r\n      id: 'placement',\r\n      dataField: 'placement',\r\n      text: 'Posizione',\r\n      editable: true,\r\n      type: 'number',\r\n      headerStyle: (column, colIndex) => ({ width: '5%' }),\r\n      headerAlign: (column, colIndex) => 'center',\r\n    }\r\n  );\r\n  return baseColumns;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport Stage1Table from './table';\r\nimport { handlerPropsType } from './type';\r\nimport { rowsGenerator, comparator } from './helper';\r\nimport { columns } from './editor';\r\nimport { Stage1Row } from 'models';\r\n\r\nconst Stage1Handler = ({ pairsList, autoOrder }: handlerPropsType): JSX.Element => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [saved, setIsSaved] = useState(false);\r\n  const [rows, setRows] = useState<Stage1Row[]>(rowsGenerator(pairsList));\r\n  const tableName = pairsList[0]?.stage1Name ?? 'Not found';\r\n\r\n  // Aggiornamneto posizione coppia\r\n  const updatePlacement = async (rows: Stage1Row[]) => {\r\n    const model = rows.map((e) => ({ id: e.pair.id, placement: e.placement }));\r\n    // console.log('UpdatePlacement : ', model);\r\n    const response = await fetch('/api/v1/stage1/placement', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ rows: model }),\r\n    });\r\n    await response.json();\r\n  };\r\n\r\n  // Aggiornamento dati\r\n  const updateCellValue = async (oldValue: any, newValue: any, row: any, column: any) => {\r\n    // console.log('updateCellValue : ', newValue, row, column);\r\n    const model = {\r\n      tId: row.pair.tId,\r\n      tableName,\r\n      score: newValue,\r\n      pair1Id: row.pair.id,\r\n      pair2Id: rows[parseInt(column.text) - 1].pair.id,\r\n    };\r\n    console.log('updateCellValue : ', model);\r\n    const response = await fetch('/api/v1/stage1/cell', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    await response.json();\r\n    if (response.ok) {\r\n      setIsSaved(true);\r\n      setTimeout(() => setIsSaved(false), 3000);\r\n    }\r\n  };\r\n\r\n  // Reperimento dati dal db\r\n  useEffect(\r\n    () => {\r\n      const fetchData = async () => {\r\n        setIsLoading(true);\r\n        const response = await fetch('/api/v1/stage1', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ rows, stageName: tableName }),\r\n        });\r\n        const result = await response.json();\r\n        // FIXME: Ordinamento : gestire ordinamento personalizzato\r\n\r\n        if (autoOrder)\r\n          [...result]\r\n            .sort((e1, e2) => comparator(e1, e2))\r\n            .forEach((row, index) => (result[row.rowNumber - 1]['placement'] = index + 1));\r\n\r\n        setRows(result);\r\n        setIsLoading(false);\r\n      };\r\n      fetchData();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <h3>\r\n          Caricamento girone <b>{tableName}</b> in corso....\r\n        </h3>\r\n      ) : (\r\n        <Stage1Table\r\n          autoOrder={autoOrder}\r\n          rows={rows}\r\n          columns={columns(pairsList)}\r\n          tableName={tableName}\r\n          updateCellValue={updateCellValue}\r\n          updatePlacement={updatePlacement}\r\n          saved={saved}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Stage1Handler;\r\n","// React, Router, Redux\r\nimport { useHistory } from 'react-router';\r\nimport { withRouter } from 'react-router-dom';\r\nimport React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// Models\r\nimport { PairDTO, TournamentProgress } from 'models';\r\n// Style\r\nimport commonStyle from '../../common.module.css';\r\nimport { RightArrowIcon, TrashIcon, LeftArrowIcon } from '../core/icons';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\n// Actions, Selectors\r\nimport { Stage2Action, TournamentAction } from 'actions';\r\nimport { SessionSelector, TournamentSelector, Stage1Selector, PairSelector } from 'selectors';\r\n//\r\nimport Stage1Handler from './handler';\r\n\r\ninterface ModalProps {\r\n  show: boolean;\r\n  message: string;\r\n}\r\n/**\r\n * Wraps multiple table components\r\n */\r\nconst Wrapper: React.FC = (): JSX.Element => {\r\n  const currentHistory = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  // Session\r\n  const session = useSelector(SessionSelector.getSession);\r\n  // Torneo\r\n  const tournament = useSelector(TournamentSelector.getTournament, (prev, curr) => prev?.progress !== curr?.progress)!;\r\n  // Sono presenti aggiornamenti\r\n  const needRefresh = useSelector(Stage1Selector.getNeedRefresh);\r\n  // Squadre selezionate\r\n  const selected = useSelector(Stage1Selector.getSelectedPairs);\r\n  // Lista coppie\r\n  const pairsList = useSelector(PairSelector.getPairsList);\r\n\r\n  // TODO:\r\n  const [autoOrder /*, setAutoOrder*/] = useState<boolean>(true);\r\n\r\n  function goBack() {\r\n    currentHistory.push(session.isAdmin ? '/tournament' : '/');\r\n  }\r\n  function goToStage2() {\r\n    // TODO: eseguire controlli e eventualemente mostrare messaggi utente\r\n\r\n    // Se sono un utente che puo modificare e il torneo è in una fase minore ( vedi ordinamento Enum ) di quella attuale\r\n    // allora aggiorno lo stato del torneo\r\n    if (session.isAdmin && tournament.progress < TournamentProgress.Stage2) {\r\n      tournament.progress = TournamentProgress.Stage2;\r\n      dispatch(TournamentAction.updateTournament.request({ model: tournament }));\r\n    }\r\n\r\n    let count = 0;\r\n    if (pairsList && pairsList.length > 4) {\r\n      count = pairsList.length - 1;\r\n      while (count % 8 !== 0) count++;\r\n    }\r\n    dispatch(Stage2Action.fetchStage2.request({ tournamentId: tournament.id!, count }));\r\n    currentHistory.push('/stage2');\r\n  }\r\n\r\n  console.log('Refreshing : ', needRefresh);\r\n  return (\r\n    <>\r\n      <Col className={commonStyle.toolsBarContainer}>\r\n        <Row className={commonStyle.toolsBarRow}>\r\n          <Col>\r\n            <Button variant=\"secondary\" onClick={goBack} className=\"float-left\">\r\n              <LeftArrowIcon /> Indietro\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={() => dispatch(Stage2Action.delete.request({ tId: tournament.id! }))}\r\n              disabled={!session.isAdmin || (session.isAdmin && tournament.progress < TournamentProgress.Stage2)}\r\n            >\r\n              <TrashIcon /> Reset Fase 2\r\n            </Button>\r\n          </Col>\r\n          {/* FIXME:\r\n          <Form.Check\r\n            custom\r\n            checked={autoOrder}\r\n            type=\"checkbox\"\r\n            id=\"autoOrder\"\r\n            label={`Ordinamento Automatico ${autoOrder}`}\r\n            onChange={() => setAutoOrder(!autoOrder)}\r\n          />\r\n        */}\r\n          <Col>\r\n            <Button\r\n              variant=\"outline-warning\"\r\n              className=\"default-color-white float-right\"\r\n              onClick={goToStage2}\r\n              disabled={selected.length < 4 && tournament.progress < TournamentProgress.Stage2}\r\n            >\r\n              <b>Prosegui </b> <RightArrowIcon />\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n      {pairsList ? renderTables(pairsList, autoOrder) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Wrapper);\r\n\r\nfunction renderTables(pairsList: PairDTO[], autoOrder: boolean): JSX.Element[] {\r\n  let stageName = '';\r\n  let stage: PairDTO[] = [];\r\n  let stageList: Array<JSX.Element> = [];\r\n  // sort pairs by stage1Name\r\n  pairsList\r\n    .sort((obj1, obj2) => obj1.stage1Name.localeCompare(obj2.stage1Name))\r\n    // FIXME: use .reduce  ?\r\n    .forEach((element, index) => {\r\n      // A rottura di stage1Name\r\n      if (stageName === '') stageName = element.stage1Name;\r\n      if (stageName !== element.stage1Name) {\r\n        stageList.push(<Stage1Handler key={`Stage1-${stageName}`} pairsList={stage} autoOrder={autoOrder} />);\r\n        stageName = element.stage1Name;\r\n        stage = [];\r\n      }\r\n      stage.push(element);\r\n    });\r\n  if (stage.length > 0) {\r\n    stageList.push(<Stage1Handler key={`Stage1-${stageName}`} pairsList={stage} autoOrder={autoOrder} />);\r\n    // console.log(`stages ${stageName} :`, stage);\r\n  }\r\n\r\n  return stageList;\r\n}\r\n"],"sourceRoot":""}