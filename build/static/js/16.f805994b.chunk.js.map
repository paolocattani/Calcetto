{"version":3,"sources":["components/Stage2/helper.tsx","components/Stage2/node.tsx","components/Stage2/table.tsx"],"names":["getIndexes","pairsNumber","x","y","indexes","NaN","Math","log","currentMax","ii","growFactor","pow","jj","Node","name","span","rowSpan","className","Stage2","rows","tdElements","row","push"],"mappings":"wJA0BaA,G,OAAa,SAACC,GASzB,IARA,IAmBkBC,EAAWC,EAbzBC,EAAU,CAACC,KAaGH,EAnBG,EAmBQC,EAnBLF,EAoBjBK,KAAKC,IAAIJ,GAAKG,KAAKC,IAAIL,GApBS,IAOnCM,EAAa,EACRC,EAAK,EAAGA,GAAMR,EAAaQ,IAClC,IAAKL,EAAQK,GAAK,CAChBL,EAAQK,GAAMD,EAEd,IADA,IAAIE,EAAaJ,KAAKK,IAAI,EAAGH,GACpBI,EAAK,EAAGH,EAAKC,EAAaE,EAAKX,EAAc,EAAGW,IAAMR,EAAQK,EAAKC,EAAaE,GAAMJ,EAC/FA,IAGJ,OAAOJ,ICpCT,IAMeS,EANqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OAClC,wBAAIC,QAASD,EAAME,UAAU,YAC3B,6BAAMH,KCgBKI,UAfkB,SAAC,GAGhC,IAHyD,IAAD,IAAtBjB,mBAAsB,MAAR,EAAQ,EAClDkB,EAAsB,GACtBC,EAAuBpB,EAAWC,GAC/BQ,EAAK,EAAGA,EAAKR,EAAaQ,IAAM,CAEvC,IADA,IAAMY,EAAqB,GAClBT,EAAK,EAAGA,EAAKQ,EAAWX,GAAKG,IAAMS,EAAIC,KAAK,kBAAC,EAAD,CAAMP,KAAMT,KAAKK,IAAI,EAAGC,GAAKE,KAAI,UAAKL,EAAL,YAAWG,MACjGO,EAAKG,KAAK,4BAAKD,IAEjB,OACE,2BAAOJ,UAAU,gBACf,+BAAQE","file":"static/js/16.f805994b.chunk.js","sourcesContent":["/*\r\n\t_______________________________________________________________________\r\n\t|      |                      |                   |                   |     Alla fine sono riuscito a risalire ad un algoritmo ! ( dopo 2 giorni )\r\n\t|      |     16 coppie        |     8 Coppie      |   4 Coppie        |     Escludendo li primo elemento e ossevando i le righe da 2 a 16 si\r\n\t|______|______________________|___________________|___________________|     può notare che la seguenza ha la forma di una piramide :\r\n\t|      |                      |                   |                   |\r\n\t|  1   | 1 - 2 - 4 - 8 - 16   | 1 - 2 - 4 - 8     | 1 - 2 - 4         |  \t     |                               5\r\n\t|  2   | 1                    | 1                 | 1                 |  \t     |               4                               4\r\n\t|  3   | 1 - 2                | 1 - 2             | 1 - 2             |  \t     |       3               3               3               3\r\n\t|  4   | 1                    | 1                 | 1                 |  \t     |   2       2       2       2       2       2       2       2\r\n\t|  5   | 1 - 2 - 4            | 1 - 2 - 4         |                   |  \t     | 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\r\n\t|  6   | 1                    | 1                 |                   |  \t_____|_________________________________________________________________\r\n\t|  7   | 1 - 2                | 1 - 2             |                   |  \tn.   | 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3\r\n\t|  8   | 1                    | 1                 |                   |  \tRiga |                 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\r\n\t|  9   | 1 - 2 - 4 - 8        |                   |                   |\r\n\t|  10  | 1                    |                   |                   |  \tPosso calcolare un array contenente il numero di elementi che ogni riga deve contenere.\r\n\t|  11  | 1 - 2                |                   |                   |\r\n\t|  12  | 1                    |                   |                   |  \t- Partendo ad esempio da un array vuoto :\r\n\t|  13  | 1 - 2 - 4            |                   |                   |  \t- Inizializzo una variabile \"currentMax\" a 1\r\n\t|  14  | 1                    |                   |                   |  \t- Se l'elemento con indice \"ii\" dell'array non contiene nessun valore allora gli assegno \"currentMax\".\r\n\t|  15  | 1 - 2                |                   |                   |  \t- Il fattore distanziale tra un elemento e l'altro è : growFactor = Math.pow(2, currentMax);\r\n\t|  16  | 1                    |                   |                   |  \t- Dato jj = Numero di multipli da calcolare ( è sufficiente jj < pairsNumber )\r\n\t|______|______________________|___________________|___________________|  \t- Tutti gli elementi con indice jj = ii + growFactor * jj hanno quindi valore \"currentMax\"\r\n\r\n*/\r\n\r\nexport const getIndexes = (pairsNumber: number): number[] => {\r\n  const N = getBaseLog(2, pairsNumber) + 1; // Numero di elementi td\r\n  /*\r\n   * Array per mappare numero riga a numero di elementi td\r\n   * Inizializzo come primo NaN solo per avere un placeholder all'index 0\r\n   * e iniziare l'analisi da 1\r\n   */\r\n  let indexes = [NaN, N];\r\n  let currentMax = 1;\r\n  for (let ii = 1; ii <= pairsNumber; ii++) {\r\n    if (!indexes[ii]) {\r\n      indexes[ii] = currentMax;\r\n      let growFactor = Math.pow(2, currentMax);\r\n      for (let jj = 1; ii + growFactor * jj < pairsNumber + 1; jj++) indexes[ii + growFactor * jj] = currentMax;\r\n      currentMax++;\r\n    }\r\n  }\r\n  return indexes;\r\n};\r\n\r\nfunction getBaseLog(x: number, y: number) {\r\n  return Math.log(y) / Math.log(x);\r\n}\r\n","import React from 'react';\r\n\r\ninterface NodeElement {\r\n  name: string;\r\n  span: number;\r\n}\r\n\r\nconst Node: React.FC<NodeElement> = ({ name, span }) => (\r\n  <td rowSpan={span} className=\"node-box\">\r\n    <div>{name}</div>\r\n  </td>\r\n);\r\n\r\nexport default Node;\r\n","import React, { Component } from 'react';\r\nimport './style.css';\r\nimport { getIndexes } from './helper';\r\nimport Node from './node';\r\n// https://www.kodbiro.com/blog/rorgchart-react-module-for-displaying-and-editing-data-in-org-chart/\r\n\r\ninterface Stage2 extends Component {\r\n  pairsNumber: number;\r\n}\r\n\r\nconst Stage2: React.FC<Stage2> = ({ pairsNumber = 8 }) => {\r\n  const rows: JSX.Element[] = [];\r\n  const tdElements: number[] = getIndexes(pairsNumber);\r\n  for (let ii = 1; ii < pairsNumber; ii++) {\r\n    const row: JSX.Element[] = [];\r\n    for (let jj = 0; jj < tdElements[ii]; jj++) row.push(<Node span={Math.pow(2, jj)} name={`${ii}-${jj}`} />);\r\n    rows.push(<tr>{row}</tr>);\r\n  }\r\n  return (\r\n    <table className=\"stage2-table\">\r\n      <tbody>{rows}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Stage2;\r\n"],"sourceRoot":""}