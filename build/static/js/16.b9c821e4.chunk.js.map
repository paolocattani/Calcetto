{"version":3,"sources":["components/core/icons.tsx","selectors/tournament.selector.ts","components/Tournament/helper.tsx","components/Tournament/new.tsx","components/Tournament/select.tsx"],"names":["Icon","size","prefix","iconName","color","icon","findIconDefinition","TrashIcon","SaveIcon","RightArrowIcon","ToggleOn","ToggleOff","TrophyIcon","DoubleRightIcon","BanIcon","TournamentSelector","isLoading","tournamentState","getTournament","tournament","getTournamentsList","tournamentsList","getEmptyTournament","name","progress","id","ownerId","date","Date","TournamentProgress","New","public","label","IndicatorSeparator","innerProps","style","indicatorSeparatorStyle","alignSelf","backgroundColor","marginBottom","marginTop","marginRight","width","cardStyle","margin","borderColor","borderWidth","textAlign","NewTournament","showMessage","currentHistory","useHistory","dispatch","useDispatch","useState","setName","setDate","visible","setVisible","handleSubmit","evt","a","preventDefault","model","TournamentAction","saveTournament","request","push","Form","onSubmit","Row","Col","md","Group","controlId","Label","Control","type","required","placeholder","maxLength","value","onChange","event","currentTarget","as","highlightDates","locale","selected","dateFormat","newValue","Button","variant","className","fontSize","fontWeight","getOptionLabel","withRouter","session","useSelector","SessionSelector","getSession","newTournament","setNewTournament","messageInitialState","message","setMessage","useEffect","length","console","log","getTournaments","setTimeout","onNewTournament","setTournament","span","offset","sm","Card","Header","Body","isAdmin","htmlFor","components","styles","customStyles","options","isSearchable","isClearable","disabled","padding","Footer","onClick","formatDate","translateTournamentProgress","option","provided","control","height","singleValue","valueContainer"],"mappings":"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","file":"static/js/16.b9c821e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { findIconDefinition, SizeProp, IconPrefix, IconName } from '@fortawesome/fontawesome-svg-core';\r\n\r\ninterface IconProps {\r\n  color?: string;\r\n  size?: SizeProp;\r\n}\r\n\r\ninterface AbstractIconProps extends IconProps {\r\n  prefix: IconPrefix;\r\n  iconName: IconName;\r\n}\r\n\r\n// Wrapper per icone FontAwesome\r\nconst Icon: React.FC<AbstractIconProps> = ({ size, prefix, iconName, color }) => (\r\n  <FontAwesomeIcon color={color} size={size} icon={findIconDefinition({ prefix, iconName })} />\r\n);\r\n\r\n// Regular\r\nexport const TrashIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"far\" iconName=\"trash-alt\" />\r\n);\r\nexport const SaveIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"far\" iconName=\"save\" />\r\n);\r\nexport const RightArrowIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} prefix=\"fas\" iconName=\"arrow-alt-circle-right\" />\r\n);\r\n\r\n// Solid\r\nexport const ToggleOn: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"toggle-on\" />\r\n);\r\nexport const ToggleOff: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"toggle-off\" />\r\n);\r\nexport const PlusIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"plus\" />\r\n);\r\nexport const TrophyIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"trophy\" />\r\n);\r\nexport const DoubleRightIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"angle-double-right\" />\r\n);\r\nexport const BanIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"ban\" />\r\n);\r\n","import { RootState } from 'models/common.model';\r\nimport { TournamentDTO } from 'models/tournament.model';\r\n\r\n// Get state from store\r\nexport const TournamentSelector = {\r\n  isLoading({ tournamentState: { isLoading } }: RootState): boolean {\r\n    return isLoading;\r\n  },\r\n  // Get selected Tournament\r\n  getTournament({ tournamentState: { tournament } }: RootState): TournamentDTO | null {\r\n    return tournament;\r\n  },\r\n  // Get tournament List\r\n  getTournamentsList({ tournamentState: { tournamentsList } }: RootState): TournamentDTO[] {\r\n    return tournamentsList;\r\n  },\r\n};\r\n","import React, { CSSProperties } from 'react';\r\nimport { getTodayDate } from '../core/utils';\r\nimport { useState } from 'react';\r\nimport { TournamentDTO, TournamentProgress } from 'models/tournament.model';\r\n\r\nexport function fetchTournaments(setterFunction: typeof useState, setterFunction2: typeof useState): void {\r\n  (async () => {\r\n    const response = await fetch('/api/v1/tournament/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const result: TournamentDTO[] = await response.json();\r\n    let found = result.find((e) => e.name === getTodayDate());\r\n    let tmp = found ? [found, ...result] : result;\r\n    tmp.sort();\r\n    setterFunction(tmp);\r\n    if (setterFunction2) setterFunction2(tmp[0]);\r\n  })();\r\n}\r\n\r\nexport function fetchTournament(setterFunction: typeof useState, tId: number): void {\r\n  (async () => setterFunction(await getTournament(tId)))();\r\n}\r\n\r\nexport async function getTournament(tId: number): Promise<TournamentDTO | null> {\r\n  const response = await fetch(`/api/v1/tournament/${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  const result: TournamentDTO = await response.json();\r\n  return response.ok ? result : null;\r\n}\r\n\r\nexport function getEmptyTournament(name: string, progress?: TournamentProgress): TournamentDTO {\r\n  return {\r\n    id: null,\r\n    name: name || '',\r\n    ownerId: null,\r\n    date: new Date(),\r\n    progress: progress || TournamentProgress.New,\r\n    public: true,\r\n    label: name || '',\r\n  };\r\n}\r\n\r\n// -------------------------------------------------\r\n// https://react-select.com/components#components\r\n// Indicator Separator\r\n\r\nexport const IndicatorSeparator = ({ innerProps }: any) => <span style={indicatorSeparatorStyle} {...innerProps} />;\r\nexport const indicatorSeparatorStyle: CSSProperties = {\r\n  alignSelf: 'stretch',\r\n  backgroundColor: 'green',\r\n  marginBottom: 8,\r\n  marginTop: 8,\r\n  marginRight: 10,\r\n  width: 1,\r\n};\r\nexport const cardStyle: CSSProperties = {\r\n  width: '100%',\r\n  margin: 'auto',\r\n  backgroundColor: 'inherit',\r\n  borderColor: '#ffc107',\r\n  borderWidth: '3px',\r\n  textAlign: 'left',\r\n};\r\n/*\r\nconst formatNewLabel = inputString => (\r\n  <strong>\r\n    {inputString}\r\n    <small style={{ color: '#ccc' }}>@ New</small>\r\n  </strong>\r\n);\r\n\r\nconst formatOptionLabel = ({ name, progress, innerProps }) => (\r\n  <strong>\r\n    {name}\r\n    <small style={{ color: '#ccc' }}>@{progress}</small>\r\n  </strong>\r\n);\r\n\r\n*/\r\n","import React, { useState } from 'react';\r\nimport { Form, Col, Button } from 'react-bootstrap';\r\n\r\n// Date picker\r\nimport DatePicker from 'react-datepicker';\r\nimport { getEmptyTournament } from './helper';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { TournamentAction } from 'actions/tournament.action';\r\nimport { toastType } from 'components/core/generic/Commons';\r\n\r\ntype newTProps = {\r\n  showMessage: (message: string, type: toastType) => void;\r\n};\r\n\r\nconst NewTournament: React.FC<newTProps> = ({ showMessage }) => {\r\n  let currentHistory = useHistory();\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState<string>('');\r\n  const [date, setDate] = useState<Date>(new Date());\r\n  const [visible, setVisible] = useState<boolean>(true);\r\n\r\n  const handleSubmit = async (evt: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n    evt.preventDefault();\r\n    if (!name) {\r\n      showMessage('Inserire un nome per il torneo', 'danger');\r\n      return;\r\n    }\r\n\r\n    let model = getEmptyTournament(name);\r\n    model.date = date;\r\n    model.public = visible;\r\n    dispatch(TournamentAction.saveTournament.request({ model }));\r\n    currentHistory.push('/tournament');\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Row>\r\n        <Col md={6}>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Nome</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              required\r\n              placeholder=\"Nome Torneo\"\r\n              maxLength={30}\r\n              value={name}\r\n              onChange={(event: React.FormEvent<HTMLSelectElement>) => setName(event.currentTarget.value)}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col md={3}>\r\n          <Form.Group>\r\n            <Form.Label>Data</Form.Label>\r\n            <Form.Control\r\n              as={() => (\r\n                <DatePicker\r\n                  highlightDates={[new Date()]}\r\n                  locale=\"it\"\r\n                  selected={date}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={(newValue) => setDate(newValue ? newValue : new Date())}\r\n                />\r\n              )}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n        </Col>\r\n\r\n        <Col md={3}>\r\n          <Form.Group controlId=\"visible\">\r\n            <Form.Label>Visibilità </Form.Label>\r\n            <Form.Control as=\"select\" onChange={() => setVisible(!visible)}>\r\n              <option>Pubblico</option>\r\n              <option>Privato</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Col>\r\n      </Form.Row>\r\n      <Form.Row>\r\n        <Col>\r\n          <Button type=\"submit\" size=\"lg\" variant=\"outline-warning\" className=\"float-right default-color-white\">\r\n            <span style={{ fontSize: 'larger', fontWeight: 'bolder' }}>Prosegui</span>\r\n          </Button>\r\n        </Col>\r\n      </Form.Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NewTournament;\r\n","import React, { useState, useEffect } from 'react';\r\n// React-Select\r\nimport Select, { Styles, ValueType } from 'react-select';\r\n// Bootstrap\r\nimport { Form, Button, Card, Col } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router';\r\n// Core\r\nimport { GenericToast, toastType, IToastProps } from '../core/generic/Commons';\r\nimport { RightArrowIcon } from '../core/icons';\r\n// Helper\r\nimport { cardStyle, IndicatorSeparator } from './helper';\r\nimport { formatDate, translateTournamentProgress } from '../core/utils';\r\nimport NewTournament from './new';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TournamentSelector } from 'selectors/tournament.selector';\r\nimport { TournamentAction } from 'actions/tournament.action';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { TournamentDTO } from 'models/tournament.model';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\n\r\nconst FTournament = () => {\r\n  // Redux\r\n  const dispatch = useDispatch();\r\n  const currentHistory = useHistory();\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  // Tournament list from Db\r\n  const tournamentsList = useSelector(TournamentSelector.getTournamentsList);\r\n  const tournament = useSelector(TournamentSelector.getTournament);\r\n\r\n  // State definition\r\n  const [newTournament, setNewTournament] = useState(false);\r\n\r\n  const messageInitialState: IToastProps = { message: '', type: 'success' };\r\n  const [message, setMessage] = useState(messageInitialState);\r\n\r\n  useEffect(() => {\r\n    if (!tournamentsList || tournamentsList.length === 0) {\r\n      console.log('useEffect: ', tournamentsList);\r\n      dispatch(TournamentAction.getTournaments.request({}));\r\n    }\r\n  }, [dispatch, tournamentsList]);\r\n\r\n  const showMessage = (message: string, type: toastType) => {\r\n    setMessage({ message, type });\r\n    setTimeout(() => setMessage(messageInitialState), 5000);\r\n  };\r\n\r\n  const handleSubmit = async (event: { preventDefault: () => void }) => {\r\n    event.preventDefault();\r\n    if (tournament) currentHistory.push('/tournament');\r\n    else showMessage('Errore, riprovare piu tardi...', 'danger');\r\n  };\r\n\r\n  const onNewTournament = (value: React.SetStateAction<boolean>) => {\r\n    dispatch(TournamentAction.setTournament(null));\r\n    setNewTournament(value);\r\n  };\r\n\r\n  // console.log('render tournament :', tournament, tournamentsList);\r\n\r\n  return (\r\n    <>\r\n      <GenericToast message={message.message} type={message.type} />\r\n\r\n      <Col md={{ span: '6', offset: '3' }} sm=\"12\">\r\n        <Card style={cardStyle}>\r\n          <Card.Header as=\"h2\">Torneo</Card.Header>\r\n          <Card.Body>\r\n            <Col>\r\n              {session.isAdmin && newTournament ? (\r\n                <NewTournament showMessage={showMessage} />\r\n              ) : (\r\n                <Form onSubmit={handleSubmit}>\r\n                  <label htmlFor=\"tournamentSelect\">Selezione Torneo</label>\r\n                  <Select\r\n                    id=\"tournamentSelect\"\r\n                    components={{ IndicatorSeparator }}\r\n                    styles={customStyles}\r\n                    value={tournament}\r\n                    options={tournamentsList}\r\n                    placeholder=\"Cerca un torneo\"\r\n                    isSearchable\r\n                    getOptionLabel={getOptionLabel}\r\n                    isClearable\r\n                    onChange={(tournament: ValueType<TournamentDTO>) =>\r\n                      dispatch(TournamentAction.setTournament(tournament as TournamentDTO))\r\n                    }\r\n                  />\r\n                  <Button\r\n                    type=\"submit\"\r\n                    size=\"lg\"\r\n                    variant=\"outline-warning\"\r\n                    className=\"float-right default-color-white\"\r\n                    disabled={!tournament}\r\n                  >\r\n                    <span style={{ fontSize: 'larger', fontWeight: 'bolder', padding: '1vw' }}>Prosegui</span>\r\n                    <RightArrowIcon size=\"lg\" />\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Col>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            {session.isAdmin ? (\r\n              newTournament ? (\r\n                <Button\r\n                  type=\"button\"\r\n                  size=\"lg\"\r\n                  variant=\"outline-warning\"\r\n                  className=\"float-left default-color-white\"\r\n                  onClick={() => onNewTournament(false)}\r\n                >\r\n                  Seleziona un torneo\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  type=\"button\"\r\n                  size=\"lg\"\r\n                  variant=\"outline-warning\"\r\n                  className=\"float-left default-color-white\"\r\n                  onClick={() => onNewTournament(true)}\r\n                >\r\n                  Crea un nuovo torneo\r\n                </Button>\r\n              )\r\n            ) : null}\r\n          </Card.Footer>\r\n        </Card>\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(FTournament);\r\n\r\nconst getOptionLabel = ({ name, date, progress }: TournamentDTO) =>\r\n  name + ' - ' + formatDate(date) + '@' + translateTournamentProgress(progress);\r\n\r\nconst customStyles: Partial<Styles> | undefined = {\r\n  // menuList: (provided, state) => ({ ...provided, border: '1px solid #ffc107' }),\r\n  option: (provided) => ({\r\n    ...provided,\r\n    backgroundColor: 'white',\r\n    color: 'black',\r\n    '&:hover': {\r\n      backgroundColor: '#64bd9c',\r\n      color: 'white',\r\n    },\r\n  }),\r\n  control: (provided) => ({ ...provided, height: '3vmin', marginBottom: '40px' }),\r\n  singleValue: (provided) => ({ ...provided }),\r\n  valueContainer: (provided) => ({ ...provided, height: '100%', fontSize: 'larger' }),\r\n};\r\n"],"sourceRoot":""}