{"version":3,"sources":["components/assets/header.jpg","components/core/routing/Routes.ts","components/Header/Header.tsx","components/core/routing/ProtectedRoute.tsx","components/App.tsx","serviceWorker.ts","index.tsx","components/core/routing/SessionContext.tsx","components/core/generic/Commons.tsx"],"names":["module","exports","lazyPlayer","lazy","lazyTournament","lazyPairs","lazyStage1","lazyStage2","routes","path","label","exact","ComponentToRender","visible","private","index","then","default","RedirectionControl","Header","_","useSessionContext","sessionContext","updateSessionContext","logout","a","fetch","ok","isAuthenticated","jumboStyle","backgroundImage","backgroundSize","padding","minHeight","Jumbotron","style","margin","color","Navbar","collapseOnSelect","expand","bg","variant","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","map","route","key","name","Dropdown","alignRight","ButtonGroup","Button","size","split","Menu","Item","onClick","eventKey","Divider","borderTopColor","ProtectedRoute","props","SessionContext","Consumer","session","render","innerProps","location","pathname","console","log","state","from","pathName","element","find","e","getLabelByPathname","library","add","fas","far","App","Container","fluid","fallback","show","message","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","setDefaultLocale","registerLocale","it","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","initialSession","createContext","useContext","SessionContextProvider","children","useState","sessionState","setSessionState","defaultSessionContext","useEffect","json","user","Provider","value","isEditable","role","LoadingModal","onHide","centered","closeButton","Title","Body","Footer","animation","GenericToast","type","LogSessionContext","Object","entries","useLocation"],"mappings":"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","file":"static/js/main.7c33eb6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.7774471e.jpg\";","import React, { lazy } from 'react';\r\n\r\n// import { OrganizationChartDemo } from '../Stage2/table';\r\nconst lazyPlayer = lazy(() => import('../../Player/table'));\r\nconst lazyTournament = lazy(() => import('../../Tournament/Tournament'));\r\nconst lazyPairs = lazy(() => import('../../Pair/table'));\r\nconst lazyStage1 = lazy(() => import('../../Stage1/wrapper'));\r\nconst lazyStage2 = lazy(() => import('../../Stage2/model'));\r\nconst lazyLogin = lazy(() => import('../../Auth/Wrapper'));\r\nconst lazyUser = lazy(() => import('../../Auth/Edit'));\r\nconst lazyRedirectionControl = lazy(() =>\r\n  import('../generic/Commons').then(module => ({ default: module.RedirectionControl }))\r\n);\r\n\r\nexport interface routeType {\r\n  path: string;\r\n  label: string;\r\n  exact: boolean;\r\n  ComponentToRender: React.ComponentType;\r\n  visible: boolean;\r\n  index: number;\r\n  private: boolean;\r\n}\r\n\r\n// Mappatura route\r\nexport const routes: routeType[] = [\r\n  {\r\n    path: '/login',\r\n    label: 'Login',\r\n    exact: true,\r\n    ComponentToRender: lazyLogin,\r\n    visible: false,\r\n    private: false,\r\n    index: 0\r\n  },\r\n  {\r\n    path: '/',\r\n    label: 'Home',\r\n    exact: true,\r\n    ComponentToRender: lazyTournament,\r\n    visible: false,\r\n    private: true,\r\n    index: 10\r\n  },\r\n  {\r\n    path: '/tournament/:tId',\r\n    label: 'Selezione Coppie',\r\n    exact: true,\r\n    ComponentToRender: lazyPairs,\r\n    visible: false,\r\n    private: true,\r\n    index: 20\r\n  },\r\n  {\r\n    path: '/stage1/:tId',\r\n    label: 'Torneo fase 1',\r\n    exact: true,\r\n    ComponentToRender: lazyStage1,\r\n    visible: false,\r\n    private: true,\r\n    index: 30\r\n  },\r\n  {\r\n    path: '/player',\r\n    label: 'Gestione Giocatori',\r\n    exact: true,\r\n    ComponentToRender: lazyPlayer,\r\n    visible: true,\r\n    private: true,\r\n    index: 40\r\n  },\r\n  {\r\n    path: '/user',\r\n    label: 'Gestione Utente',\r\n    exact: true,\r\n    ComponentToRender: lazyUser,\r\n    visible: false,\r\n    private: true,\r\n    index: 50\r\n  },\r\n  {\r\n    path: '/stage2/:tId',\r\n    label: 'Torneo fase 2',\r\n    exact: true,\r\n    ComponentToRender: lazyStage2,\r\n    //ComponentToRender: OrganizationChartDemo,\r\n    visible: !(process.env.NODE_ENV === 'production'),\r\n    private: true,\r\n    index: 100\r\n  },\r\n  // TODO: creare pagina per route not found\r\n  {\r\n    path: '*',\r\n    label: 'Not Found',\r\n    exact: false,\r\n    ComponentToRender: lazyRedirectionControl,\r\n    visible: false,\r\n    private: true,\r\n    index: 1000\r\n  }\r\n];\r\nexport default routes;\r\n\r\nexport function getLabelByPathname(pathName: string): string {\r\n  const element = routes.find(e => e.path === pathName);\r\n  return element ? element.label : `route ${pathName} not found!`;\r\n}\r\n\r\nexport function getRouteByPathname(pathName: string): routeType | undefined {\r\n  return routes.find(e => e.path === pathName);\r\n}\r\n","import React, { CSSProperties } from 'react';\r\nimport backgroundImage from '../assets/header.jpg';\r\nimport { Jumbotron, Navbar, Nav, Button, Dropdown, ButtonGroup } from 'react-bootstrap';\r\nimport routes from '../core/routing/Routes';\r\nimport { useSessionContext } from '../core/routing/SessionContext';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst applicationName = 'Calcetto C.S.M';\r\nexport const Header: React.FC = _ => {\r\n  const [sessionContext, updateSessionContext] = useSessionContext();\r\n\r\n  const logout = async () => {\r\n    const response = await fetch('/api/v1/auth/logout');\r\n    if (response.ok) updateSessionContext({ isAuthenticated: false });\r\n    // TODO: gestire messaggi utente\r\n  };\r\n\r\n  // const yellow = '#ffc107';\r\n  const jumboStyle: CSSProperties = {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundSize: 'cover',\r\n    padding: '60px 0px 10px 0px',\r\n    minHeight: '28vh'\r\n  };\r\n\r\n  const titleStyle: CSSProperties = {\r\n    color: 'white'\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <Jumbotron style={jumboStyle}>\r\n        <h1 style={{ margin: '5vh' }}>\r\n          <strong style={titleStyle}>{applicationName}</strong>\r\n        </h1>\r\n        {sessionContext.isAuthenticated ? (\r\n          <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n              Home\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                {routes.map(route =>\r\n                  route.visible ? (\r\n                    route.private && !sessionContext.isAuthenticated ? null : (\r\n                      <Nav.Link as={Link} key={route.index} to={route.path}>\r\n                        {route.label}\r\n                      </Nav.Link>\r\n                    )\r\n                  ) : null\r\n                )}\r\n              </Nav>\r\n              {sessionContext.name ? (\r\n                <>\r\n                  <Dropdown alignRight as={ButtonGroup}>\r\n                    <Button variant=\"outline-warning\" size=\"lg\">\r\n                      <strong style={{ color: '#64bd9c' }}>{sessionContext.name}</strong>\r\n                    </Button>\r\n                    <Dropdown.Toggle split variant=\"outline-warning\" id=\"dropdown-custom-2\" />\r\n                    <Dropdown.Menu className=\"default-background default-border-yellow\">\r\n                      <Dropdown.Item\r\n                        className=\"default-color-yellow default-hover-green\"\r\n                        as=\"button\"\r\n                        variant=\"warning\"\r\n                        onClick={logout}\r\n                        eventKey=\"1\"\r\n                      >\r\n                        Log out\r\n                      </Dropdown.Item>\r\n                      <Dropdown.Divider style={{ borderTopColor: '#ffc107' }} />\r\n                      <Dropdown.Item\r\n                        className=\"default-color-yellow default-hover-green\"\r\n                        as={Link}\r\n                        to={'/user'}\r\n                        eventKey=\"2\"\r\n                      >\r\n                        Gestione Utente\r\n                      </Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </>\r\n              ) : null}\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        ) : null}\r\n      </Jumbotron>\r\n    </header>\r\n  );\r\n};\r\n","// https://github.com/openscript/react-example-authentication-redirection\r\n\r\nimport * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport { routeType, getLabelByPathname } from './Routes';\r\nimport { SessionContext } from './SessionContext';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const ProtectedRoute: React.FC<routeType> = props => (\r\n  <SessionContext.Consumer>\r\n    {([session]) => {\r\n      return (\r\n        <Route\r\n          {...props}\r\n          render={innerProps => {\r\n            const { location } = innerProps;\r\n            // Se sono gia autenticato e sto chiedendo la login, reindirizzo alla home\r\n            if (session.isAuthenticated && location.pathname === '/login') {\r\n              console.log('ProtectedRoute => redirect to Home');\r\n              return <Redirect {...props} to={{ pathname: '/', state: { from: location } }} />;\r\n            }\r\n\r\n            // Se non è una rotta protetta\r\n            if (!props.private) {\r\n              console.log('ProtectedRoute => public route : ', { ...props });\r\n              return <props.ComponentToRender {...props} />;\r\n            }\r\n\r\n            // Se è una rotta privata e non sono autenticato devo andare alla login\r\n            if (!session.isAuthenticated) {\r\n              console.log('ProtectedRoute => redirect to Login : ', { ...session });\r\n              return <Redirect {...props} to={{ pathname: '/login', state: { from: location } }} />;\r\n            }\r\n            /**\r\n             * Se sono arrivato qui vuol dire che è una rotta protetta, che sono autenticato\r\n             * e che non sto chiedendo di andare alla login. Quindi direi che posso andare dove voglio...\r\n             */\r\n            console.log('ProtectedRoute => render component : ', getLabelByPathname(location.pathname));\r\n            return <props.ComponentToRender {...props} />;\r\n          }}\r\n        />\r\n      );\r\n    }}\r\n  </SessionContext.Consumer>\r\n);\r\n\r\nexport default ProtectedRoute;\r\n","import React, { Suspense } from 'react';\r\n// Components\r\nimport { Header } from './Header/Header';\r\nimport { LoadingModal /* LogSessionContext */ } from './core/generic/Commons';\r\n// Routing\r\nimport { Switch } from 'react-router';\r\nimport routes from './core/routing/Routes';\r\nimport { ProtectedRoute } from './core/routing/ProtectedRoute';\r\n// Style\r\nimport './style/App.css';\r\nimport { Container } from 'react-bootstrap';\r\n// FontAwesome 5\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { far } from '@fortawesome/free-regular-svg-icons';\r\n\r\nlibrary.add(fas, far);\r\n\r\nconst App: React.FC = _ => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Container fluid>\r\n        {/*<LogSessionContext /> */}\r\n        {/*<RedirectionControl />*/}\r\n        <Suspense fallback={<LoadingModal show={true} message={'....Caricamento'} />}>\r\n          <Switch>\r\n            {routes.map(route => (\r\n              <ProtectedRoute {...route} key={route.index} />\r\n            ))}\r\n          </Switch>\r\n        </Suspense>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = _ => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = _ => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport 'typeface-roboto';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { SessionContextProvider } from './components/core/routing/SessionContext';\r\nimport it from 'date-fns/locale/it';\r\nimport { setDefaultLocale, registerLocale } from 'react-datepicker';\r\n\r\nsetDefaultLocale('it');\r\nregisterLocale('it', it);\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <SessionContextProvider>\r\n      <App />\r\n    </SessionContextProvider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nprocess.env.NODE_ENV !== 'production' ? serviceWorker.unregister() : serviceWorker.register();\r\n","import { createContext, useContext, useState, useEffect } from 'react';\r\nimport React from 'react';\r\nimport { LoadingModal } from '../generic/Commons';\r\n\r\nexport interface Session {\r\n  isAuthenticated?: boolean | null;\r\n  username?: string | null;\r\n  name?: string | null;\r\n  surname?: string | null;\r\n  email?: string | null;\r\n  phone?: string | null;\r\n  birthday?: string | null;\r\n  label?: string | null;\r\n  role?: string | null;\r\n}\r\n\r\n// https://stackoverflow.com/questions/59422159/redirecting-a-user-to-the-page-they-requested-after-successful-authentication-wi\r\n// https://github.com/openscript/react-example-authentication-redirection\r\n\r\n// https://www.freecodecamp.org/news/react-context-in-5-minutes/\r\nexport const initialSession: Session = { isAuthenticated: false };\r\n\r\nexport const SessionContext = createContext<[Session, (session: Session) => void]>([initialSession, () => {}]);\r\nexport const useSessionContext = () => useContext(SessionContext);\r\n\r\nexport const SessionContextProvider: React.FC = ({ children }) => {\r\n  const [sessionState, setSessionState] = useState(initialSession);\r\n  const defaultSessionContext: [Session, typeof setSessionState] = [sessionState, setSessionState];\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const response = await fetch('/api/v1/auth/');\r\n        const user = await response.json();\r\n        if (user && response.ok) setSessionState({ isAuthenticated: true, ...user });\r\n        else setSessionState(initialSession);\r\n      } catch (error) {\r\n        console.error('SessionContext.error :', error);\r\n        setSessionState(initialSession);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  console.log('sessionContext.session: ', sessionState);\r\n\r\n  return (\r\n    <SessionContext.Provider value={defaultSessionContext}>\r\n      {sessionState ? children : <LoadingModal show={true} message={'....Caricamento'} />}\r\n    </SessionContext.Provider>\r\n  );\r\n};\r\n\r\nexport const isEditable = (sessionContext: Session): boolean =>\r\n  !sessionContext || !sessionContext.isAuthenticated || !sessionContext.role\r\n    ? false\r\n    : sessionContext.isAuthenticated && sessionContext.role === 'Admin';\r\n","import React from 'react';\r\nimport { Modal, Spinner, Toast, Alert } from 'react-bootstrap';\r\nimport { SessionContext } from '../routing/SessionContext';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n// Loading Modal\r\ntype loadingModalPropsType = {\r\n  show: boolean;\r\n  message: string;\r\n  onHide?: () => void;\r\n};\r\n\r\nexport const LoadingModal: React.FC<loadingModalPropsType> = ({\r\n  message,\r\n  show,\r\n  onHide = () => (show = false)\r\n}: loadingModalPropsType) => (\r\n  <Modal show={show} onHide={onHide} size=\"xl\" centered>\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>Caricamento....</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>{message}</Modal.Body>\r\n    <Modal.Footer>\r\n      <Spinner animation=\"border\" variant=\"light\" />\r\n      <Spinner animation=\"border\" variant=\"primary\" />\r\n      <Spinner animation=\"border\" variant=\"secondary\" />\r\n      <Spinner animation=\"border\" variant=\"success\" />\r\n      <Spinner animation=\"border\" variant=\"danger\" />\r\n      <Spinner animation=\"border\" variant=\"warning\" />\r\n      <Spinner animation=\"border\" variant=\"info\" />\r\n      <Spinner animation=\"border\" variant=\"dark\" />\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n\r\n// Toasts\r\ntype toastPropsType = {\r\n  message: string;\r\n  type?: 'success' | 'warning' | 'danger';\r\n};\r\n\r\nexport const GenericToast: React.FC<toastPropsType> = ({ message, type }: toastPropsType) =>\r\n  message && message !== '' ? (\r\n    <Toast className=\"rounded mr-2 mx-auto\" key={`${type}-message`} show={message !== ''}>\r\n      <Toast.Header closeButton={false}>\r\n        <strong>Operazione completata !</strong>\r\n      </Toast.Header>\r\n      <Toast.Body>\r\n        <Alert variant={type}>{message}</Alert>\r\n      </Toast.Body>\r\n    </Toast>\r\n  ) : null;\r\n\r\nexport const LogSessionContext: React.FC<{}> = _ => (\r\n  <SessionContext.Consumer>\r\n    {([session]) =>\r\n      Object.entries(session).map(([key, value]) => (\r\n        <p>\r\n          {key} : {value}\r\n        </p>\r\n      ))\r\n    }\r\n  </SessionContext.Consumer>\r\n);\r\n\r\nexport function RedirectionControl(props: any): JSX.Element {\r\n  const location = useLocation();\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Current Ruote : <code>{location.pathname}</code>\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}