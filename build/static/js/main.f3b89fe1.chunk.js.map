{"version":3,"sources":["components/core/utils.ts","selectors/tournament.selector.ts","components/core/generic/Commons.tsx","actions/constants.ts","models/player.model.ts","selectors/pair.selector.ts","selectors/stage2.selector.ts","components/Pair/helper.ts","selectors/stage1.selector.ts","components/Stage2/helper.tsx","assets/header.jpg","actions/pair.action.ts","actions/stage1.action.ts","actions/stage2.action.ts","actions/tournament.action.ts","components/core/routing/Routes.ts","components/Header/Header.tsx","components/core/routing/ProtectedRoute.tsx","components/core/errorBoundary.tsx","components/App/App.tsx","serviceWorker.ts","models/user.model.ts","reducers/tournament.reducer.ts","reducers/player.reducer.ts","reducers/pair.reducer.ts","reducers/session.reducer.ts","reducers/stage1.reducer.ts","reducers/stage2.reducer.ts","sagas/tournament.saga.ts","sagas/player.saga.ts","services/pair.service.ts","sagas/pair.saga.ts","services/session.service.ts","sagas/session.saga.ts","services/stage2.service.ts","sagas/stage2.saga.ts","store.ts","index.tsx","services/common.ts","actions/session.action.ts","actions/player.action.ts","selectors/session.selector.ts","models/tournament.model.ts","services/player.service.ts","models/index.ts","services/tournament.service.ts"],"names":["translateTournamentProgress","value","TournamentProgress","New","PairsSelection","Stage1","Stage2","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","RegExp","passwordRegExp","emailRegExp","getBaseLog","x","y","Math","log","TournamentSelector","isLoading","tournamentState","getTournament","tournament","getTournamentsList","tournamentsList","LoadingModal","message","show","onHide","size","centered","Header","closeButton","Title","Body","Footer","animation","variant","modalStyle","color","backgroundColor","borderColor","YesNoModal","title","onClick","className","style","borderWidth","fluid","fontSize","padding","GenericToast","type","key","LogSessionContext","session","useSelector","SessionSelector","getSession","Object","entries","map","RedirectionControl","props","location","useLocation","pathname","Request","Success","Failure","PlayerRole","PairSelector","pairState","getPairsList","pairList","Stage2Selector","stage2State","getCells","cells","getRowsNumber","rowsNumber","getEmptyRowModel","label","id","tId","rowNumber","player1","getEmptyPlayer","player2","alias","stage1Name","placement","paid1","paid2","customStyles","option","provided","state","input","control","height","marginBottom","singleValue","valueContainer","fetchData","a","fetch","method","headers","response","json","rows","result","players","console","Stage1Selector","stage1State","getSelectedRows","selectedRows","getSelectedPairs","selectedPairs","getNeedRefresh","needRefresh","getIndexes","pairsNumber","indexes","NaN","currentMax","ii","growFactor","pow","jj","getEmptyCell","name","isWinner","matchId","cellRowIndex","cellColIndex","parentId","generateStructure","N","counter","Array","fill","e","bounce","index","temp","push","pair","undefined","module","exports","PairAction","getPairs","createAsyncAction","Stage1Action","setSelectedPairs","createAction","stage1Watcher","Stage2Action","fetchStage2","updateCell","delete","setCells","ActionName","TournamentAction","getTournaments","setTournament","saveTournament","updateTournament","lazyPlayer","lazy","lazyTournament","lazyPairs","lazyStage1","lazyStage2","routes","path","exact","ComponentToRender","visible","private","then","default","dispatch","useDispatch","logout","ok","SessionAction","updateSession","user","jumboStyle","backgroundImage","backgroundSize","minHeight","Jumbotron","margin","isAuthenticated","Navbar","collapseOnSelect","expand","bg","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","route","Dropdown","alignRight","ButtonGroup","Button","opacity","disabled","username","split","Menu","Item","eventKey","Divider","borderTopColor","ProtectedRoute","render","innerProps","from","pathName","element","find","getLabelByPathname","ErrorBoundary","error","errorInfo","this","setState","children","React","Component","library","add","fas","far","App","_","currentHistory","useHistory","useEffect","checkAuthentication","request","history","Container","autoClose","fallback","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","UserRole","TournamentReducer","createReducer","handleAction","errorMessage","failure","payload","success","results","PlayerReducer","PlayerAction","getPlayers","playersList","PairReducer","SessionReducer","isAdmin","login","showMessage","role","Admin","initialState","Stage1Reducer","stageName","selected","Map","set","filter","Stage2Reducer","getTournamentsSaga","saveTournamentSaga","updateTournamentSaga","action","call","fetchTournaments","put","postTournament","TournamentsSagas","takeEvery","getPlayersSaga","fetchPlayers","PlayersSagas","fetchPairs","handleError","getPairsSaga","SessionStatus","PairsSagas","CheckAuthentication","createSessionChannel","channel","eventChannel","emitter","openListener","event","messageListener","messageEvent","JSON","parse","data","status","SESSION_EXPIRED","closeConnection","errorListener","END","addEventListener","removeEventListener","close","buffers","expanding","checkAuthenticationSaga","watchSessionSaga","sessionControl","EventSource","take","toast","SessionSagas","takeLatest","deleteStage2","body","stringify","updateCells","cell1","cell2","count","tournamentId","countStage2Step0","structure","deleteStage2Saga","fetchStage2Saga","updateCellsSaga","select","progress","model","Stage2Sagas","rootSagas","composeEnhancer","compose","sagaMiddleware","createSagaMiddleware","commonReducers","playerState","sessionState","store","createStore","combineReducers","applyMiddleware","all","run","setDefaultLocale","registerLocale","it","ReactDOM","document","getElementById","URL","process","href","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","forEach","Error","getUser","addEmpty","surname","GoalKeeper","email","phone","match_played","match_won","total_score","editable","isValidTournament","isValid"],"mappings":"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","file":"static/js/main.f3b89fe1.chunk.js","sourcesContent":["import { TournamentProgress } from '../../models/tournament.model';\r\n\r\nexport const getTodayDate = () => formatDate(new Date());\r\n\r\nexport function translateTournamentProgress(value: string) {\r\n  switch (value) {\r\n    case TournamentProgress.New:\r\n      return 'Nuovo';\r\n    case TournamentProgress.PairsSelection:\r\n      return 'Selezione Coppie';\r\n    case TournamentProgress.Stage1:\r\n      return 'Fase 1';\r\n    case TournamentProgress.Stage2:\r\n      return 'Fase 2';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport function formatDate(date: Date) {\r\n  var d = new Date(date),\r\n    month = '' + (d.getMonth() + 1),\r\n    day = '' + d.getDate(),\r\n    year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = '0' + month;\r\n  if (day.length < 2) day = '0' + day;\r\n\r\n  return [year, month, day].join('/');\r\n}\r\n\r\nexport function getRandomIntInclusive(min: number, max: number) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\r\n}\r\n\r\nexport const phoneRegExp = new RegExp('^d{10}$');\r\nexport const passwordRegExp = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,16})');\r\nexport const emailRegExp = new RegExp(\r\n  // eslint-disable-next-line quotes\r\n  \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"\r\n);\r\n\r\nexport function getBaseLog(x: number, y: number) {\r\n  return Math.log(y) / Math.log(x);\r\n}\r\n\r\n// https://stackoverflow.com/questions/2698725/comparing-date-part-only-without-comparing-time-in-javascript\r\nexport const justADate = (initDate?: Date | string) => {\r\n  let utcMidnightDateObj: Date;\r\n  // if no date supplied, use Now.\r\n  if (!initDate) initDate = new Date();\r\n\r\n  // if initDate specifies a timezone offset, or is already UTC, just keep the date part, reflecting the date _in that timezone_\r\n  if (typeof initDate === 'string' && initDate.match(/((\\+|-)\\d{2}:\\d{2}|Z)$/gm)) {\r\n    utcMidnightDateObj = new Date(initDate.substring(0, 10) + 'T00:00:00Z');\r\n  } else {\r\n    // if init date is not already a date object, feed it to the date constructor.\r\n    if (!(initDate instanceof Date)) initDate = new Date(initDate);\r\n    // Vital Step! Strip time part. Create UTC midnight dateObj according to local timezone.\r\n    utcMidnightDateObj = new Date(Date.UTC(initDate.getFullYear(), initDate.getMonth(), initDate.getDate()));\r\n  }\r\n\r\n  return {\r\n    toISOString: () => utcMidnightDateObj.toISOString(),\r\n    getUTCDate: () => utcMidnightDateObj.getUTCDate(),\r\n    getUTCDay: () => utcMidnightDateObj.getUTCDay(),\r\n    getUTCFullYear: () => utcMidnightDateObj.getUTCFullYear(),\r\n    getUTCMonth: () => utcMidnightDateObj.getUTCMonth(),\r\n    setUTCDate: (date: number) => utcMidnightDateObj.setUTCDate(date),\r\n    setUTCFullYear: (years: number) => utcMidnightDateObj.setUTCFullYear(years),\r\n    setUTCMonth: (months: number) => utcMidnightDateObj.setUTCMonth(months),\r\n    addDays: (days: number) => {\r\n      utcMidnightDateObj.setUTCDate(utcMidnightDateObj.getUTCDate() + days);\r\n    },\r\n    toString: () => utcMidnightDateObj.toString(),\r\n    toLocaleDateString: (\r\n      locales?: string | string[] | undefined,\r\n      options?: Intl.DateTimeFormatOptions | undefined\r\n    ): string => {\r\n      const option = options || {};\r\n      option.timeZone = 'UTC';\r\n      const locale = locales || 'it-IT';\r\n      return utcMidnightDateObj.toLocaleDateString(locale, option);\r\n    },\r\n  };\r\n};\r\n","import { RootState } from 'models/common.model';\r\nimport { TournamentDTO } from 'models/tournament.model';\r\n\r\n// Get state from store\r\nexport const TournamentSelector = {\r\n  isLoading({ tournamentState: { isLoading } }: RootState): boolean {\r\n    return isLoading;\r\n  },\r\n  // Get selected Tournament\r\n  getTournament({ tournamentState: { tournament } }: RootState): TournamentDTO | null {\r\n    return tournament;\r\n  },\r\n  // Get tournament List\r\n  getTournamentsList({ tournamentState: { tournamentsList } }: RootState): TournamentDTO[] {\r\n    return tournamentsList;\r\n  },\r\n};\r\n","import React, { CSSProperties } from 'react';\r\nimport { Modal, Spinner, Toast, Alert, Row, Button, Container, Col } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\nimport './style.css';\r\n\r\n// Loading Modal\r\ntype loadingModalPropsType = {\r\n  show: boolean;\r\n  message?: string;\r\n  onHide?: () => void;\r\n};\r\n\r\nexport const LoadingModal: React.FC<loadingModalPropsType> = ({ message, show, onHide = () => (show = false) }) => (\r\n  <Modal show={show} onHide={onHide} size=\"xl\" centered>\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>Caricamento....</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>{message ? message : 'Caricamento....'}</Modal.Body>\r\n    <Modal.Footer>\r\n      <Spinner animation=\"border\" variant=\"light\" />\r\n      <Spinner animation=\"border\" variant=\"primary\" />\r\n      <Spinner animation=\"border\" variant=\"secondary\" />\r\n      <Spinner animation=\"border\" variant=\"success\" />\r\n      <Spinner animation=\"border\" variant=\"danger\" />\r\n      <Spinner animation=\"border\" variant=\"warning\" />\r\n      <Spinner animation=\"border\" variant=\"info\" />\r\n      <Spinner animation=\"border\" variant=\"dark\" />\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n\r\nexport interface YesNoModalProps {\r\n  title: string;\r\n  show: boolean;\r\n  message: string;\r\n  onHide?: () => void;\r\n  onClick: () => void;\r\n}\r\n\r\nconst modalStyle: CSSProperties = { color: 'whitesmoke', backgroundColor: '#343a40', borderColor: '#ffc107' };\r\nexport const YesNoModal: React.FC<YesNoModalProps> = ({\r\n  title,\r\n  message,\r\n  show,\r\n  onHide = () => (show = false),\r\n  onClick,\r\n}) => (\r\n  <Modal\r\n    className=\"YesNoModal\"\r\n    show={show}\r\n    onHide={onHide}\r\n    centered\r\n    style={{ borderColor: '#ffc107', borderWidth: '3px' }}\r\n  >\r\n    <Modal.Header closeButton style={modalStyle}>\r\n      <Modal.Title>{title}</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body style={modalStyle}>\r\n      <Container fluid>\r\n        <Row style={{ fontSize: 'larger' }}>{message}</Row>\r\n        <Row style={{ padding: '2rem 0rem 0rem 0rem' }}>\r\n          <Col>\r\n            <Button variant=\"outline-secondary\" className=\"float-left\" onClick={() => onHide()}>\r\n              Annulla\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button variant=\"outline-success\" className=\"float-right\" onClick={() => onClick()}>\r\n              Conferma\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Modal.Body>\r\n    <Modal.Footer style={modalStyle}>\r\n      <Spinner animation=\"border\" variant=\"light\" />\r\n      <Spinner animation=\"border\" variant=\"primary\" />\r\n      <Spinner animation=\"border\" variant=\"secondary\" />\r\n      <Spinner animation=\"border\" variant=\"success\" />\r\n      <Spinner animation=\"border\" variant=\"danger\" />\r\n      <Spinner animation=\"border\" variant=\"warning\" />\r\n      <Spinner animation=\"border\" variant=\"info\" />\r\n      <Spinner animation=\"border\" variant=\"dark\" />\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n\r\n// Toasts\r\nexport interface IToastProps {\r\n  message: string;\r\n  type?: toastType;\r\n}\r\n\r\nexport type toastType = 'success' | 'warning' | 'danger';\r\n\r\nexport const GenericToast: React.FC<IToastProps> = ({ message, type }) =>\r\n  message && message !== '' ? (\r\n    <Toast className=\"rounded mr-2 mx-auto\" key={`${type}-message`} show={message !== ''}>\r\n      <Toast.Header closeButton={false}>\r\n        <strong>Operazione completata !</strong>\r\n      </Toast.Header>\r\n      <Toast.Body>\r\n        <Alert variant={type}>{message}</Alert>\r\n      </Toast.Body>\r\n    </Toast>\r\n  ) : null;\r\n\r\n// Util per loggare i dati utente in sessione\r\nexport const LogSessionContext: React.FC<{}> = () => {\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  return (\r\n    <>\r\n      {Object.entries(session).map(([key, value]) => (\r\n        <p>\r\n          {key} : {value}\r\n        </p>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\n// TODO: Componente fallback se route non trovata\r\nexport function RedirectionControl(props: any): JSX.Element {\r\n  const location = useLocation();\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Current Ruote : <code>{location.pathname}</code>\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n","export const Request = 'Request';\r\nexport const Success = 'Success';\r\nexport const Failure = 'Failure';\r\n","// Requests\r\nexport interface FetchPlayersRequest {\r\n  tId?: number;\r\n  addEmpty: boolean;\r\n}\r\n// Responses\r\nexport interface FetchPlayersResponse {\r\n  results: PlayerDTO[];\r\n}\r\n\r\nexport interface PlayerState {\r\n  player?: PlayerDTO;\r\n  playerList?: PlayerDTO[];\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface PlayerDTO {\r\n  id: number | null;\r\n  name: string;\r\n  surname: string;\r\n  alias: string;\r\n  label: string;\r\n  role: PlayerRole;\r\n  email: string;\r\n  phone: string;\r\n  userId?: number;\r\n  match_played?: number;\r\n  match_won?: number;\r\n  total_score?: number;\r\n  editable: boolean;\r\n}\r\n\r\nexport enum PlayerRole {\r\n  None = 'No',\r\n  NotAPlayer = 'Non sono un giocatore',\r\n  GoalKeeper = 'Portiere',\r\n  Master = 'Master',\r\n  Striker = 'Attaccante',\r\n}\r\n","import { PairDTO, RootState } from 'models';\r\n\r\n// Get state from store\r\nexport const PairSelector = {\r\n  isLoading({ pairState: { isLoading } }: RootState): boolean {\r\n    return isLoading;\r\n  },\r\n  // Get pairs List\r\n  getPairsList({ pairState: { pairList } }: RootState): PairDTO[] | undefined {\r\n    return pairList;\r\n  },\r\n};\r\n","import { RootState, ICell } from 'models';\r\n\r\n// Get state from store\r\nexport const Stage2Selector = {\r\n  isLoading({ stage2State: { isLoading } }: RootState): boolean {\r\n    return isLoading;\r\n  },\r\n  getCells({ stage2State: { cells } }: RootState): ICell[][] | undefined {\r\n    return cells;\r\n  },\r\n  getRowsNumber({ stage2State: { rowsNumber } }: RootState): number | undefined {\r\n    return rowsNumber;\r\n  },\r\n};\r\n","import { getEmptyPlayer } from 'services/player.service';\r\nimport { Styles } from 'react-select';\r\nimport { PairDTO } from 'models';\r\n\r\nexport const getEmptyRowModel = (label?: string): PairDTO => ({\r\n  id: null,\r\n  tId: 0,\r\n  rowNumber: 0,\r\n  player1: getEmptyPlayer(),\r\n  player2: getEmptyPlayer(),\r\n  alias: label || '',\r\n  stage1Name: '',\r\n  placement: 0,\r\n  paid1: false,\r\n  paid2: false,\r\n});\r\n\r\nexport const fetchPairs = (setterFunction: React.Dispatch<React.SetStateAction<PairDTO[]>>, tId: number) => {\r\n  (async () => {\r\n    const response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const result = await response.json();\r\n    setterFunction(result);\r\n  })();\r\n};\r\n\r\nexport const valueFormatter = (selectedOption: PairDTO) =>\r\n  selectedOption.alias ? `${selectedOption.alias}` : createAlias(selectedOption);\r\n\r\nexport function createAlias(selectedOption: PairDTO) {\r\n  console.log('createAlias : ', selectedOption);\r\n  let value = `${selectedOption.rowNumber} : `;\r\n  const { player1, player2 } = selectedOption;\r\n  value += player1!.alias ? player1!.alias : player1!.name;\r\n  value += ' - ' + player2!.alias ? player2!.alias : player2!.name;\r\n  // value += ` ( ${id} )`;\r\n  return value;\r\n}\r\n\r\nexport const customStyles: Partial<Styles> | undefined = {\r\n  // menuList: (provided, state) => ({ ...provided, border: '1px solid #ffc107' }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: 'white',\r\n    color: 'black',\r\n    '&:hover': {\r\n      backgroundColor: '#64bd9c',\r\n      color: 'white',\r\n    },\r\n  }),\r\n  input: (provided) => ({ ...provided, backgroundColor: '#64bd9c' }),\r\n  control: (provided) => ({ ...provided, height: '3vmin', marginBottom: 'auto' }),\r\n  singleValue: (provided) => ({ ...provided }),\r\n  valueContainer: (provided) => ({ ...provided, height: '100%', fontSize: 'larger' }),\r\n};\r\n\r\nexport const fetchData = async (tId: number) => {\r\n  // Fetch Pairs\r\n  let response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  const rows = await response.json();\r\n\r\n  response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  const result = await response.json();\r\n  const players = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n\r\n  console.log('rows : ', rows);\r\n  return { rows, players };\r\n};\r\n","import { RootState, Stage1Row, PairDTO } from 'models';\r\n\r\n// Get state from store\r\nexport const Stage1Selector = {\r\n  isLoading({ stage1State: { isLoading } }: RootState): boolean {\r\n    return isLoading;\r\n  },\r\n  // Get pairs List\r\n  getSelectedRows({ stage1State: { selectedRows } }: RootState): Map<string, Stage1Row[]> | null {\r\n    return selectedRows || null;\r\n  },\r\n  getSelectedPairs({ stage1State: { selectedPairs } }: RootState): PairDTO[] {\r\n    return selectedPairs;\r\n  },\r\n  getNeedRefresh({ stage1State: { needRefresh } }: RootState): boolean {\r\n    return needRefresh;\r\n  },\r\n};\r\n","import { getBaseLog } from '../core/utils';\r\nimport { ICell } from 'models/stage2.model';\r\n\r\n/*\r\n\t_______________________________________________________________________\r\n\t| n.   |                      |                   |                   |\r\n\t| Riga |     16 coppie        |     8 Coppie      |   4 Coppie        |\r\n\t|______|______________________|___________________|___________________|\r\n\t|\t     |\t( rowSpan )\t\t      |\t\t( rowSpan )\t    |\t   ( rowSpan )    |\r\n\t|      | \t                    |                   |                   |   Escludendo il primo elemento e ossevando le righe da 2 a 32 si\r\n\t|  1   | 1 - 2 - 4 - 8 - 16   | 1 - 2 - 4 - 8     | 1 - 2 - 4         |  \tpuò notare che la seguenza ha la forma di una piramide.\r\n\t|  2   | 1                    | 1                 | 1                 |  \tEsempio N= 32 :\r\n\t|  3   | 1 - 2                | 1 - 2             | 1 - 2             |\r\n\t|  4   | 1                    | 1                 | 1                 |  \t\t     | 6\r\n\t|  5   | 1 - 2 - 4            | 1 - 2 - 4         |                   |  \t       |                                 5\r\n\t|  6   | 1                    | 1                 |                   |  \t       |                 4                               4\r\n\t|  7   | 1 - 2                | 1 - 2             |                   |  \t       |         3               3               3               3\r\n\t|  8   | 1                    | 1                 |                   |  \t       |     2       2       2       2       2       2       2       2\r\n\t|  9   | 1 - 2 - 4 - 8        |                   |                   |          |   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\r\n\t|  10  | 1                    |                   |                   |     _____|___________________________________________________________________\r\n\t|  11  | 1 - 2                |                   |                   |     n.   | 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3\r\n\t|  12  | 1                    |                   |                   |\t\tRiga |                     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\r\n\t|  13  | 1 - 2 - 4            |                   |                   |\r\n\t|  14  | 1                    |                   |                   |\r\n\t|  15  | 1 - 2                |                   |                   |\r\n\t|  16  | 1                    |                   |                   |\r\n\t|______|______________________|___________________|___________________|\r\n\r\n\r\nPosso calcolare un array contenente il numero di elementi che ogni riga deve contenere.\r\n\r\nDato:\r\n\t- N  : numero di righe ( = 32 )\r\n\t- currentMax : valore da assegnare alla seguenza corrente ( 1, 2 ,3, 4, 5, 6, .... )\r\n\t- jj : il numero di multipli da calcolare per ogni seguenza ( jj <= N )\r\n\r\nPartendo ad esempio da un array vuoto di lunghezza N:\r\n\t- Se l'elemento con indice \"ii\" dell'array non contiene nessun valore allora gli assegno \"currentMax\".\r\n\t- Il fattore distanziale tra un elemento e l'altro è : growFactor = Math.pow(2, currentMax);\r\n\t- Tutti gli elementi con indice jj = ii + growFactor * jj hanno quindi valore \"currentMax\"\r\n\r\nIl rowSpan da assegnare al singolo elemento è calcolato come 2^jj. ( 0<=jj<= N+1 )\r\n\r\n\r\n*/\r\nexport const getIndexes = (pairsNumber: number): number[] => {\r\n  const N = getBaseLog(2, pairsNumber) + 1; // Numero massimo di elementi td\r\n  /*\r\n   * Array per mappare numero riga a numero di elementi td\r\n   * Inizializzo come primo NaN solo per avere un placeholder all'index 0  e iniziare l'analisi da 1\r\n   */\r\n  let indexes = [NaN, N];\r\n  let currentMax = 1;\r\n  for (let ii = 1; ii <= pairsNumber; ii++) {\r\n    if (!indexes[ii]) {\r\n      indexes[ii] = currentMax;\r\n      let growFactor = Math.pow(2, currentMax);\r\n      for (let jj = 1; ii + growFactor * jj < pairsNumber + 1; jj++) indexes[ii + growFactor * jj] = currentMax;\r\n      currentMax++;\r\n    }\r\n  }\r\n  return indexes;\r\n};\r\n\r\nexport const getEmptyCell = (name?: string): ICell => ({\r\n  name: '',\r\n  isWinner: false,\r\n  matchId: 0,\r\n  cellRowIndex: 0,\r\n  cellColIndex: 0,\r\n  parentId: 0,\r\n});\r\n\r\n// Genera la struttura per Stage2\r\nexport const generateStructure = (rowNumber: number): ICell[][] => {\r\n  const N = getBaseLog(2, rowNumber) + 1;\r\n  let counter = rowNumber * 2;\r\n  const result = new Array(N).fill([]).map((e, ii) => {\r\n    counter /= 2;\r\n    let bounce = true;\r\n    let index = 0;\r\n    let temp: ICell[] = [];\r\n    for (let jj = 0; jj < counter; jj++) {\r\n      if (bounce) index++;\r\n      bounce = !bounce;\r\n      temp.push({\r\n        matchId: index,\r\n        cellColIndex: ii,\r\n        cellRowIndex: jj,\r\n        parentId: ii === 0 ? 0 : jj + 1,\r\n        name: `${ii}-${jj + 1}`,\r\n        pair: undefined,\r\n        isWinner: false,\r\n      });\r\n    }\r\n    return [...temp];\r\n  });\r\n  // console.log('generateStructure : ', result);\r\n\r\n  return result;\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/header.7774471e.jpg\";","import { createAsyncAction } from 'typesafe-actions';\r\nimport { Failure, Success, Request } from './constants';\r\nimport { FetchPairsRequest, FetchPairsResponse } from 'models';\r\n\r\nconst ActionName = '[Pair]';\r\n\r\nexport const PairAction = {\r\n  // fetch tournaments\r\n  getPairs: createAsyncAction(\r\n    `${ActionName} Get Pair ${Request}`,\r\n    `${ActionName} Get Pair ${Success}`,\r\n    `${ActionName} Get Pair ${Failure}`\r\n  )<FetchPairsRequest, FetchPairsResponse, Error>(),\r\n};\r\n","import { createAction, createAsyncAction } from 'typesafe-actions';\r\nimport { Stage1Row, WatchStage1Request, WatchStage1Response } from 'models';\r\nimport { Success, Failure } from './constants';\r\n\r\nconst ActionName = '[Stage1]';\r\n\r\nexport const Stage1Action = {\r\n  // get selected tournament\r\n  setSelectedPairs: createAction(`${ActionName} Set Selected Pairs`)<{ stageName: string; rows: Stage1Row[] }>(),\r\n  // watcher\r\n  stage1Watcher: createAsyncAction(\r\n    `${ActionName} Watch Stage1 ${Request}`,\r\n    `${ActionName} Watch Stage1 ${Success}`,\r\n    `${ActionName} Watch Stage1 ${Failure}`\r\n  )<WatchStage1Request, WatchStage1Response, Error>(),\r\n};\r\n","import { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport {\r\n  FetchStage2Response,\r\n  FetchStage2Request,\r\n  UpdateStage2CellResponse,\r\n  UpdateStage2CellRequest,\r\n  ICell,\r\n  DeleteStage2Request,\r\n  DeleteStage2Response,\r\n} from 'models';\r\nimport { Success, Failure } from './constants';\r\n\r\nconst ActionName = '[Stage2]';\r\n\r\nexport const Stage2Action = {\r\n  // get selected tournament\r\n  fetchStage2: createAsyncAction(\r\n    `${ActionName} Fetch Stage2 ${Request}`,\r\n    `${ActionName} Fetch Stage2 ${Success}`,\r\n    `${ActionName} Fetch Stage2 ${Failure}`\r\n  )<FetchStage2Request, FetchStage2Response, Error>(),\r\n  updateCell: createAsyncAction(\r\n    `${ActionName} Update Stage2 Cell ${Request}`,\r\n    `${ActionName} Update Stage2 Cell ${Success}`,\r\n    `${ActionName} Update Stage2 Cell ${Failure}`\r\n  )<UpdateStage2CellRequest, UpdateStage2CellResponse, Error>(),\r\n  delete: createAsyncAction(\r\n    `${ActionName} Delete Stage2 ${Request}`,\r\n    `${ActionName} Delete Stage2 ${Success}`,\r\n    `${ActionName} Delete Stage2 ${Failure}`\r\n  )<DeleteStage2Request, DeleteStage2Response, Error>(),\r\n  setCells: createAction(`${ActionName} Set Cells`)<ICell[][]>(),\r\n};\r\n","import {\r\n  FetchTournamentsRequest,\r\n  TournamentDTO,\r\n  PostTournamentRequest,\r\n  FetchTournamentsResponse,\r\n  PostTournamentResponse,\r\n  UpdateTournamentRequest,\r\n  UpdateTournamentResponse,\r\n} from '../models/tournament.model';\r\nimport { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport { Failure, Success, Request } from './constants';\r\n\r\nconst ActionName = '[Tournament]';\r\n\r\nexport const TournamentAction = {\r\n  // fetch tournaments\r\n  getTournaments: createAsyncAction(\r\n    `${ActionName} Get Tournament ${Request}`,\r\n    `${ActionName} Get Tournament ${Success}`,\r\n    `${ActionName} Get Tournament ${Failure}`\r\n  )<FetchTournamentsRequest, FetchTournamentsResponse, Error>(),\r\n  // set selected tournament\r\n  setTournament: createAction(`${ActionName} Set Tournament`)<TournamentDTO | null>(),\r\n  // save a new tournament\r\n  saveTournament: createAsyncAction(\r\n    `${ActionName} Save Tournament ${Request}`,\r\n    `${ActionName} Save Tournament ${Success}`,\r\n    `${ActionName} Save Tournament ${Failure}`\r\n  )<PostTournamentRequest, PostTournamentResponse, Error>(),\r\n  // save a new tournament\r\n  updateTournament: createAsyncAction(\r\n    `${ActionName} Update Tournament Progress ${Request}`,\r\n    `${ActionName} Update Tournament Progress ${Success}`,\r\n    `${ActionName} Update Tournament Progress ${Failure}`\r\n  )<UpdateTournamentRequest, UpdateTournamentResponse, Error>(),\r\n};\r\n","import React, { lazy } from 'react';\r\n\r\nconst lazyPlayer = lazy(() => import('../../Player/table'));\r\nconst lazyTournament = lazy(() => import('../../Tournament/select'));\r\nconst lazyPairs = lazy(() => import('../../Pair/table'));\r\nconst lazyStage1 = lazy(() => import('../../Stage1/wrapper'));\r\nconst lazyStage2 = lazy(() => import('../../Stage2/handler'));\r\nconst lazyLogin = lazy(() => import('../../Auth/Wrapper'));\r\nconst lazyUser = lazy(() => import('../../Auth/Edit'));\r\nconst lazyRedirectionControl = lazy(() =>\r\n  import('../generic/Commons').then((module) => ({ default: module.RedirectionControl }))\r\n);\r\n\r\nexport interface routeType {\r\n  path: string;\r\n  label: string;\r\n  exact: boolean;\r\n  ComponentToRender: React.ComponentType;\r\n  visible: boolean;\r\n  index: number;\r\n  private: boolean;\r\n}\r\n\r\n// Mappatura route\r\nexport const routes: routeType[] = [\r\n  {\r\n    path: '/login',\r\n    label: 'Login',\r\n    exact: true,\r\n    ComponentToRender: lazyLogin,\r\n    visible: false,\r\n    private: false,\r\n    index: 0,\r\n  },\r\n  {\r\n    path: '/',\r\n    label: 'Home',\r\n    exact: true,\r\n    ComponentToRender: lazyTournament,\r\n    visible: false,\r\n    private: true,\r\n    index: 10,\r\n  },\r\n  {\r\n    path: '/tournament',\r\n    label: 'Selezione Coppie',\r\n    exact: true,\r\n    ComponentToRender: lazyPairs,\r\n    visible: false,\r\n    private: true,\r\n    index: 20,\r\n  },\r\n  {\r\n    path: '/stage1',\r\n    label: 'Torneo fase 1',\r\n    exact: true,\r\n    ComponentToRender: lazyStage1,\r\n    visible: false,\r\n    private: true,\r\n    index: 30,\r\n  },\r\n  {\r\n    path: '/player',\r\n    label: 'Gestione Giocatori',\r\n    exact: true,\r\n    ComponentToRender: lazyPlayer,\r\n    visible: true,\r\n    private: true,\r\n    index: 40,\r\n  },\r\n  {\r\n    path: '/user',\r\n    label: 'Gestione Utente',\r\n    exact: true,\r\n    ComponentToRender: lazyUser,\r\n    visible: false,\r\n    private: true,\r\n    index: 50,\r\n  },\r\n  {\r\n    path: '/stage2',\r\n    label: 'Torneo fase 2',\r\n    exact: true,\r\n    ComponentToRender: lazyStage2 as any,\r\n    visible: false,\r\n    private: true,\r\n    index: 100,\r\n  },\r\n  // TODO: creare pagina per route not found\r\n  {\r\n    path: '*',\r\n    label: 'Not Found',\r\n    exact: false,\r\n    ComponentToRender: lazyRedirectionControl,\r\n    visible: false,\r\n    private: true,\r\n    index: 1000,\r\n  },\r\n];\r\nexport default routes;\r\n\r\nexport function getLabelByPathname(pathName: string): string {\r\n  const element = routes.find((e) => e.path === pathName);\r\n  return element ? element.label : `route ${pathName} not found!`;\r\n}\r\n\r\nexport function getRouteByPathname(pathName: string): routeType | undefined {\r\n  return routes.find((e) => e.path === pathName);\r\n}\r\n","import React, { CSSProperties } from 'react';\r\nimport backgroundImage from '../../assets/header.jpg';\r\nimport { Jumbotron, Navbar, Nav, Button, Dropdown, ButtonGroup } from 'react-bootstrap';\r\nimport routes from '../core/routing/Routes';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\nimport { SessionAction } from 'actions';\r\n\r\nconst applicationName = 'Calcetto C.S.M';\r\n\r\n// Header applicazione, include navbar\r\nexport const Header: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  const logout = async () => {\r\n    const response = await fetch('/api/v1/auth/logout');\r\n    if (response.ok) dispatch(SessionAction.updateSession({ user: undefined }));\r\n    // TODO: gestire messaggi utente\r\n  };\r\n\r\n  // const yellow = '#ffc107';\r\n  const jumboStyle: CSSProperties = {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundSize: 'cover',\r\n    padding: '60px 0px 10px 0px',\r\n    minHeight: '28vh',\r\n  };\r\n\r\n  const titleStyle: CSSProperties = {\r\n    color: 'white',\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <Jumbotron style={jumboStyle}>\r\n        <h1 style={{ margin: '5vh' }}>\r\n          <strong style={titleStyle}>{applicationName}</strong>\r\n        </h1>\r\n        {session.isAuthenticated ? (\r\n          <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n              Home\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                {routes.map((route) =>\r\n                  route.visible ? (\r\n                    route.private && !session.isAuthenticated ? null : (\r\n                      <Nav.Link as={Link} key={route.index} to={route.path}>\r\n                        {route.label}\r\n                      </Nav.Link>\r\n                    )\r\n                  ) : null\r\n                )}\r\n              </Nav>\r\n              {session.user ? (\r\n                <>\r\n                  <Dropdown alignRight as={ButtonGroup}>\r\n                    <Button style={{ opacity: 1 }} variant=\"outline-warning\" size=\"lg\" disabled>\r\n                      <strong style={{ color: '#64bd9c', fontSize: 'larger' }}>{session.user.username}</strong>\r\n                    </Button>\r\n                    <Dropdown.Toggle split variant=\"outline-warning\" id=\"dropdown-custom-2\" />\r\n                    <Dropdown.Menu className=\"default-background default-border-yellow\">\r\n                      <Dropdown.Item\r\n                        className=\"default-color-white default-hover-green\"\r\n                        as=\"button\"\r\n                        // FIXME: variant=\"warning\"\r\n                        onClick={logout}\r\n                        eventKey=\"1\"\r\n                      >\r\n                        Log out\r\n                      </Dropdown.Item>\r\n                      <Dropdown.Divider style={{ borderTopColor: '#ffc107' }} />\r\n                      <Dropdown.Item\r\n                        className=\"default-color-white default-hover-green\"\r\n                        as={Link}\r\n                        to={'/user'}\r\n                        eventKey=\"2\"\r\n                      >\r\n                        Gestione Utente\r\n                      </Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </>\r\n              ) : null}\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        ) : null}\r\n      </Jumbotron>\r\n    </header>\r\n  );\r\n};\r\n","// https://github.com/openscript/react-example-authentication-redirection\r\n\r\nimport * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport { routeType, getLabelByPathname } from './Routes';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\n\r\n// HOC gestisce la visibilità dei componenti ed eventualmente reindirizza alla login\r\nexport const ProtectedRoute: React.FC<routeType> = (props) => {\r\n  const isAuthenticated = useSelector(SessionSelector.isAuthenticated);\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  return (\r\n    <Route\r\n      {...props}\r\n      render={(innerProps) => {\r\n        const { location } = innerProps;\r\n        // Se sono gia autenticato e sto chiedendo la login, reindirizzo alla home\r\n        if (isAuthenticated && location.pathname === '/login') {\r\n          console.log('ProtectedRoute => redirect to Home');\r\n          return <Redirect {...props} to={{ pathname: '/', state: { from: location } }} />;\r\n        }\r\n\r\n        // Se non è una rotta protetta\r\n        if (!props.private) {\r\n          console.log('ProtectedRoute => public route : ', { ...props });\r\n          return <props.ComponentToRender {...props} />;\r\n        }\r\n\r\n        // Se è una rotta privata e non sono autenticato devo andare alla login\r\n        if (!isAuthenticated) {\r\n          console.log('ProtectedRoute => redirect to Login : ', { ...session });\r\n          return <Redirect {...props} to={{ pathname: '/login', state: { from: location } }} />;\r\n        }\r\n        /**\r\n         * Se sono arrivato qui vuol dire che è una rotta protetta, che sono autenticato\r\n         * e che non sto chiedendo di andare alla login. Quindi direi che posso andare dove voglio...\r\n         */\r\n        console.log('ProtectedRoute => render component : ', getLabelByPathname(location.pathname));\r\n        return <props.ComponentToRender {...props} />;\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default ProtectedRoute;\r\n","import React from 'react';\r\n\r\ninterface IErrorBoundaryProps {\r\n  readonly children: JSX.Element | JSX.Element[];\r\n}\r\n\r\ninterface IErrorBoundaryState {\r\n  readonly error: any;\r\n  readonly errorInfo: any;\r\n}\r\n\r\nclass ErrorBoundary extends React.Component<IErrorBoundaryProps, IErrorBoundaryState> {\r\n  readonly state: IErrorBoundaryState = { error: undefined, errorInfo: undefined };\r\n\r\n  componentDidCatch(error: any, errorInfo: any) {\r\n    this.setState({\r\n      error,\r\n      errorInfo,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { error, errorInfo } = this.state;\r\n    if (errorInfo) {\r\n      const errorDetails =\r\n        process.env.NODE_ENV === 'development' ? (\r\n          <details className=\"preserve-space\">\r\n            {error && error.toString()}\r\n            <br />\r\n            {errorInfo.componentStack}\r\n          </details>\r\n        ) : undefined;\r\n      return (\r\n        <div>\r\n          <h2 className=\"error\">An unexpected error has occurred.</h2>\r\n          {errorDetails}\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Suspense, useEffect } from 'react';\r\n// Components\r\nimport { Header } from '../Header/Header';\r\nimport { LoadingModal } from '../core/generic/Commons';\r\n// Routing\r\nimport { Switch, useHistory } from 'react-router';\r\nimport routes from '../core/routing/Routes';\r\nimport { ProtectedRoute } from '../core/routing/ProtectedRoute';\r\nimport ErrorBoundary from '../core/errorBoundary';\r\n// Style\r\nimport './App.css';\r\nimport { Container } from 'react-bootstrap';\r\n// FontAwesome 5\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { far } from '@fortawesome/free-regular-svg-icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { SessionAction } from 'actions';\r\n// Toasts\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './toast.css';\r\n\r\nlibrary.add(fas, far);\r\n\r\nconst App: React.FC = (_) => {\r\n  const dispatch = useDispatch();\r\n  const currentHistory = useHistory();\r\n\r\n  // Check if user is already logged\r\n  useEffect(() => {\r\n    dispatch(SessionAction.checkAuthentication.request({ history: currentHistory }));\r\n  }, [currentHistory, dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary>\r\n        <Header />\r\n        <Container fluid style={{ marginBottom: '20vh' }}>\r\n          {/*<LogSessionContext /> */}\r\n          {/*<RedirectionControl />*/}\r\n          <ToastContainer autoClose={2000} />\r\n\r\n          <Suspense fallback={<LoadingModal show={true} message={'....Caricamento'} />}>\r\n            <Switch>\r\n              {routes.map((route) => (\r\n                <ProtectedRoute {...route} key={route.index} />\r\n              ))}\r\n            </Switch>\r\n          </Suspense>\r\n        </Container>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          // TODO: show this message to user\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = (_) => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = (_) => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { PlayerDTO } from './player.model';\r\n\r\nexport interface UserState {}\r\n\r\nexport interface UserDTO {\r\n  id: number;\r\n  username: string;\r\n  name: string;\r\n  surname: string;\r\n  email: string;\r\n  phone: string;\r\n  role: UserRole;\r\n  birthday: Date;\r\n  label: string;\r\n  player: PlayerDTO;\r\n}\r\nexport enum UserRole {\r\n  Admin = 'Admin',\r\n  User = 'User',\r\n}\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { TournamentAction } from '../actions/tournament.action';\r\nimport { TournamentState } from 'models/tournament.model';\r\n\r\nconst initialState: TournamentState = {\r\n  tournament: null,\r\n  tournamentsList: [],\r\n  isLoading: false,\r\n};\r\n\r\nexport const TournamentReducer = createReducer<TournamentState, Action>(initialState)\r\n  // Request\r\n  .handleAction(\r\n    [\r\n      TournamentAction.getTournaments.request,\r\n      TournamentAction.saveTournament.request,\r\n      TournamentAction.updateTournament.request,\r\n    ],\r\n    (state) => ({\r\n      ...state,\r\n      isLoading: true,\r\n      errorMessage: undefined,\r\n    })\r\n  )\r\n  // Failure\r\n  .handleAction(\r\n    [\r\n      TournamentAction.getTournaments.failure,\r\n      TournamentAction.saveTournament.failure,\r\n      TournamentAction.updateTournament.failure,\r\n    ],\r\n    (state, { payload: { message } }) => ({\r\n      ...state,\r\n      errorMessage: message,\r\n      isLoading: false,\r\n    })\r\n  )\r\n  // SUCCESS\r\n  // Fetch Tournament\r\n  .handleAction(TournamentAction.getTournaments.success, (state, { payload: { results } }) => ({\r\n    ...state,\r\n    tournament: results && results.length > 0 ? results[0] : state.tournament,\r\n    tournamentsList: results,\r\n    isLoading: false,\r\n  }))\r\n  // Set selected tournament\r\n  .handleAction(TournamentAction.setTournament, (state, { payload }) => ({\r\n    ...state,\r\n    tournament: payload,\r\n    isLoading: false,\r\n  }))\r\n  // Create/Update a new tournament\r\n  .handleAction(\r\n    [TournamentAction.saveTournament.success, TournamentAction.updateTournament.success],\r\n    (state, { payload: { result } }) => ({\r\n      ...state,\r\n      tournament: result,\r\n      isLoading: false,\r\n    })\r\n  );\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { PlayerState } from 'models/player.model';\r\nimport { PlayerAction } from 'actions/player.action';\r\n\r\nconst initialState: PlayerState = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const PlayerReducer = createReducer<PlayerState, Action>(initialState)\r\n  // Request\r\n  .handleAction([PlayerAction.getPlayers.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction([PlayerAction.getPlayers.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  // Fetch Tournament\r\n  .handleAction(PlayerAction.getPlayers.success, (state, { payload: { results } }) => ({\r\n    ...state,\r\n    playersList: results,\r\n    isLoading: false,\r\n  }));\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { PairState } from 'models';\r\nimport { PairAction } from 'actions';\r\n\r\nconst initialState: PairState = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const PairReducer = createReducer<PairState, Action>(initialState)\r\n  // Request\r\n  .handleAction([PairAction.getPairs.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction([PairAction.getPairs.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  // Fetch Tournament\r\n  .handleAction(PairAction.getPairs.success, (state, { payload: { results } }) => ({\r\n    ...state,\r\n    pairList: results,\r\n    isLoading: false,\r\n  }));\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { SessionState } from 'models/session.model';\r\nimport { SessionAction } from 'actions/session.action';\r\nimport { UserRole } from 'models/user.model';\r\n\r\nconst initialState: SessionState = {\r\n  isAuthenticated: false,\r\n  isAdmin: false,\r\n  isLoading: false,\r\n};\r\n\r\nexport const SessionReducer = createReducer<SessionState, Action>(initialState)\r\n  // Request\r\n  .handleAction([SessionAction.checkAuthentication.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction([SessionAction.checkAuthentication.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  .handleAction(\r\n    [\r\n      SessionAction.checkAuthentication.success,\r\n      SessionAction.register.success,\r\n      SessionAction.login.success,\r\n      SessionAction.updateSession,\r\n    ],\r\n    (state, { payload: { user, message, showMessage } }) => ({\r\n      user,\r\n      showMessage,\r\n      message,\r\n      isAuthenticated: !!user,\r\n      isAdmin: user ? user.role === UserRole.Admin : false,\r\n      isLoading: false,\r\n    })\r\n  );\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { Stage1State, Stage1Row } from 'models';\r\nimport { Stage1Action } from 'actions';\r\nimport { getEmptyRowModel } from 'components/Pair/helper';\r\n\r\nconst initialState: Stage1State = {\r\n  needRefresh: false,\r\n  selectedPairs: [getEmptyRowModel('placeholder')],\r\n  isLoading: false,\r\n};\r\n\r\nexport const Stage1Reducer = createReducer<Stage1State, Action>(initialState)\r\n  // Gestione Watcher\r\n  // All'avvio del watcher reimposto needRefresh\r\n  .handleAction([Stage1Action.stage1Watcher.request], (state) => ({ ...state, needRefresh: false }))\r\n  .handleAction([Stage1Action.stage1Watcher.failure], (state) => ({ ...state }))\r\n  .handleAction([Stage1Action.stage1Watcher.success], (state) => ({ ...state, needRefresh: true }))\r\n  //\r\n  .handleAction([Stage1Action.setSelectedPairs], (state, { payload: { stageName, rows } }) => {\r\n    const selected = state.selectedRows ? state.selectedRows : new Map<string, Stage1Row[]>();\r\n    selected.set(stageName, rows);\r\n\r\n    const selectedPairs = state.selectedPairs\r\n      ? [\r\n          // Filtro selectedPairs\r\n          //  e.id === null : mantengo il placeholder\r\n          //  e.stage1Name !== stageName : matengo tutte le coppie che non appartengo al girone attuale\r\n          ...state.selectedPairs.filter((e) => e.id === null || e.stage1Name !== stageName),\r\n          ...rows.map((e) => e.pair),\r\n        ]\r\n      : [...rows.map((e) => e.pair)];\r\n\r\n    return {\r\n      ...state,\r\n      selectedRows: selected,\r\n      selectedPairs,\r\n      isLoading: true,\r\n    };\r\n  });\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { Stage2State } from 'models';\r\nimport { Stage2Action } from 'actions';\r\n\r\nconst initialState: Stage2State = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const Stage2Reducer = createReducer<Stage2State, Action>(initialState)\r\n  // Request\r\n  .handleAction([Stage2Action.fetchStage2.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n  }))\r\n  // Failure\r\n  .handleAction([Stage2Action.fetchStage2.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  // Success\r\n  .handleAction([Stage2Action.fetchStage2.success], (state, { payload: { cells, rowsNumber } }) => {\r\n    console.log('Stage2Action.fetchStage2.success :', { cells, rowsNumber });\r\n\r\n    return {\r\n      cells,\r\n      rowsNumber,\r\n      isLoading: false,\r\n    };\r\n  })\r\n  .handleAction([Stage2Action.setCells], (state, { payload }) => ({\r\n    ...state,\r\n    cells: payload,\r\n  }));\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { fetchTournaments, postTournament, updateTournament } from 'services/tournament.service';\r\nimport { PostTournamentResponse, FetchTournamentsResponse } from 'models/tournament.model';\r\nimport { TournamentAction } from 'actions/tournament.action';\r\n\r\n// https://medium.com/swlh/asynchronous-with-redux-sagas-b43c9630f218\r\nfunction* getTournamentsSaga(\r\n  action: ReturnType<typeof TournamentAction.getTournaments.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchTournamentsResponse = yield call(fetchTournaments, action.payload);\r\n    yield put(TournamentAction.getTournaments.success(response));\r\n  } catch (err) {\r\n    yield put(TournamentAction.getTournaments.failure(err));\r\n  }\r\n}\r\n\r\nfunction* saveTournamentSaga(\r\n  action: ReturnType<typeof TournamentAction.saveTournament.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: PostTournamentResponse = yield call(postTournament, action.payload);\r\n    yield put(TournamentAction.saveTournament.success(response));\r\n  } catch (err) {\r\n    yield put(TournamentAction.saveTournament.failure(err));\r\n  }\r\n}\r\n\r\nfunction* updateTournamentSaga(\r\n  action: ReturnType<typeof TournamentAction.saveTournament.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: PostTournamentResponse = yield call(updateTournament, action.payload);\r\n    yield put(TournamentAction.saveTournament.success(response));\r\n  } catch (err) {\r\n    yield put(TournamentAction.saveTournament.failure(err));\r\n  }\r\n}\r\n\r\nexport const TournamentsSagas = [\r\n  takeEvery(TournamentAction.getTournaments.request, getTournamentsSaga),\r\n  takeEvery(TournamentAction.saveTournament.request, saveTournamentSaga),\r\n  takeEvery(TournamentAction.updateTournament.request, updateTournamentSaga),\r\n];\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { PlayerAction } from 'actions/player.action';\r\nimport { FetchPlayersResponse } from 'models/player.model';\r\nimport { fetchPlayers } from 'services/player.service';\r\n\r\nfunction* getPlayersSaga(\r\n  action: ReturnType<typeof PlayerAction.getPlayers.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    console.log('getPlayersSaga');\r\n\r\n    const response: FetchPlayersResponse = yield call(fetchPlayers, action.payload);\r\n    console.log('getPlayersSaga: ', response);\r\n\r\n    yield put(PlayerAction.getPlayers.success(response));\r\n  } catch (err) {\r\n    yield put(PlayerAction.getPlayers.failure(err));\r\n  }\r\n}\r\n\r\nexport const PlayersSagas = [takeEvery(PlayerAction.getPlayers.request, getPlayersSaga)];\r\n","import { FetchPairsRequest, FetchPairsResponse, PostPairsResponse, PostPairsRequest } from 'models';\r\nimport { handleError } from './common';\r\n\r\nexport const fetchPairs = async ({ tId }: FetchPairsRequest): Promise<FetchPairsResponse> => {\r\n  try {\r\n    console.log('fetchPairs : ', tId);\r\n    const response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const results = await response.json();\r\n    console.log('fetchPairs : ', tId, results);\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e, 'Error pairs fetch');\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nexport const postPair = async ({ models }: PostPairsRequest): Promise<PostPairsResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/pair', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(models),\r\n    });\r\n    const results = await response.json();\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e, 'Error pairs update');\r\n    return { results: [] };\r\n  }\r\n};\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { PairAction } from 'actions';\r\nimport { fetchPairs } from 'services/pair.service';\r\nimport { FetchPairsResponse } from 'models';\r\n\r\nfunction* getPairsSaga(action: ReturnType<typeof PairAction.getPairs.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchPairsResponse = yield call(fetchPairs, action.payload);\r\n    yield put(PairAction.getPairs.success(response));\r\n  } catch (err) {\r\n    yield put(PairAction.getPairs.failure(err));\r\n  }\r\n}\r\n\r\nexport const PairsSagas = [takeEvery(PairAction.getPairs.request, getPairsSaga)];\r\n","import { CheckAuthenticationRequest, AuthenticationResponse } from 'models';\r\nimport { UserDTO } from 'models/user.model';\r\nimport { eventChannel, buffers, END } from 'redux-saga';\r\nimport { handleError } from './common';\r\n\r\nexport enum SessionStatus {\r\n  // Sessione scaduta, reindirizza l'utente alla login\r\n  SESSION_EXPIRED = 'session_expired',\r\n  // Necessario aggiornamento dati su Stage1\r\n  NEED_REFRESH = 'need_refresh',\r\n}\r\n\r\nexport interface Message {\r\n  status: SessionStatus;\r\n  message?: string;\r\n}\r\n\r\n// eslint-disable-next-line no-empty-pattern\r\nexport const CheckAuthentication = async ({}: CheckAuthenticationRequest): Promise<AuthenticationResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/auth/');\r\n    const user: UserDTO | null = await response.json();\r\n    return { user: user && response.ok ? user : undefined };\r\n  } catch (error) {\r\n    handleError('SessionContext.error ', 'Connection error.');\r\n    return { user: undefined };\r\n  }\r\n};\r\n\r\n// Session Control\r\nexport const createSessionChannel = (channel: EventSource) =>\r\n  eventChannel<Message>((emitter) => {\r\n    // Listen for open channel\r\n    const openListener = (event: Event) => console.log('Connected...');\r\n\r\n    // Listen for new message\r\n    const messageListener = (messageEvent: MessageEvent) => {\r\n      if (messageEvent) {\r\n        const message = JSON.parse(messageEvent.data) as Message;\r\n        if (message.status === SessionStatus.SESSION_EXPIRED) {\r\n          emitter(message);\r\n          closeConnection();\r\n        }\r\n      }\r\n    };\r\n    // Listen for error\r\n    const errorListener = (event: Event) => {\r\n      console.error('An Error Occur: ', event);\r\n      emitter(END);\r\n      closeConnection();\r\n    };\r\n    channel.addEventListener('open', openListener);\r\n    channel.addEventListener('message', messageListener);\r\n    channel.addEventListener('error', errorListener);\r\n    // Cleanup function\r\n    const closeConnection = () => {\r\n      channel.removeEventListener('open', openListener);\r\n      channel.removeEventListener('message', messageListener);\r\n      channel.removeEventListener('error', errorListener);\r\n      channel.close();\r\n    };\r\n    return closeConnection;\r\n  }, buffers.expanding());\r\n","import { put, call, StrictEffect, takeEvery, take, takeLatest } from 'redux-saga/effects';\r\nimport { SessionAction } from 'actions/session.action';\r\nimport { AuthenticationResponse } from 'models';\r\nimport { CheckAuthentication, createSessionChannel, Message } from 'services/session.service';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction* checkAuthenticationSaga({\r\n  payload,\r\n}: ReturnType<typeof SessionAction.checkAuthentication.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: AuthenticationResponse = yield call(CheckAuthentication, payload);\r\n    yield put(SessionAction.checkAuthentication.success(response));\r\n    yield put(SessionAction.sessionControl.request({ history: payload.history }));\r\n  } catch (err) {\r\n    yield put(SessionAction.checkAuthentication.failure(err));\r\n  }\r\n}\r\n\r\n/*\r\nFIXME:\r\nhttps://github.com/redux-saga/redux-saga/issues/868\r\nhttps://github.com/redux-saga/redux-saga/blob/master/docs/advanced/Channels.md#using-the-eventchannel-factory-to-connect-to-external-events\r\nhttps://github.com/redux-saga/redux-saga/issues/940#issuecomment-298170212\r\n*/\r\n\r\nfunction* watchSessionSaga(\r\n  action: ReturnType<typeof SessionAction.sessionControl.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    console.log('watchSessionSaga : start');\r\n    const eventChannel = new EventSource('/sse/v1/session');\r\n    const channel = yield call(createSessionChannel, eventChannel);\r\n    while (true) {\r\n      const message: Message = yield take(channel);\r\n      if (message) {\r\n        console.log('Message from queue : ', message);\r\n        toast.error('La tua sessione è scaduta');\r\n        yield put(SessionAction.updateSession({ user: undefined }));\r\n        action.payload.history.push('/login');\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log('watchSessionSaga.err : ', err);\r\n  }\r\n}\r\n\r\nexport const SessionSagas = [\r\n  takeEvery(SessionAction.checkAuthentication.request, checkAuthenticationSaga),\r\n  takeLatest(SessionAction.sessionControl.request, watchSessionSaga),\r\n];\r\n","import { FetchStage2Response, FetchStage2Request, ICell } from 'models';\r\nimport { generateStructure } from 'components/Stage2/helper';\r\nimport { handleError } from './common';\r\n\r\nexport const deleteStage2 = async (tId: number) => {\r\n  const response = await fetch('/api/v1/stage2', {\r\n    method: 'DELETE',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ tId }),\r\n  });\r\n  await response.json();\r\n};\r\n\r\nexport const updateCells = async (cell1: ICell, cell2: ICell) => {\r\n  try {\r\n    const response = await fetch('/api/v1/stage2/cells', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ cell1, cell2 }),\r\n    });\r\n    await response.json();\r\n  } catch (e) {\r\n    handleError(e, 'Error stage2 update');\r\n  }\r\n};\r\n\r\nexport const fetchStage2 = async ({\r\n  count: rowsNumber,\r\n  tournamentId,\r\n}: FetchStage2Request): Promise<FetchStage2Response> => {\r\n  if (rowsNumber === 0) {\r\n    rowsNumber = await countStage2Step0(tournamentId);\r\n  }\r\n  const structure = generateStructure(rowsNumber);\r\n  try {\r\n    const response = await fetch('/api/v1/stage2', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ tournamentId, structure }),\r\n    });\r\n    const cells = await response.json();\r\n    // console.log('response : ', cells);\r\n    return { cells, rowsNumber };\r\n  } catch (e) {\r\n    handleError(e, 'Error stage2 fetch');\r\n    return { cells: structure, rowsNumber };\r\n  }\r\n};\r\n\r\nconst countStage2Step0 = async (tournamentId: number) => {\r\n  let count = 0;\r\n  try {\r\n    const response = await fetch('/api/v1/stage2/count', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ tournamentId }),\r\n    });\r\n    count = await response.json();\r\n    // console.log('response : ', cells);\r\n  } catch (e) {\r\n    handleError(e, 'Error stage2 count');\r\n  } finally {\r\n    return count;\r\n  }\r\n};\r\n","import { put, call, StrictEffect, takeEvery, select } from 'redux-saga/effects';\r\nimport { Stage2Action, TournamentAction } from 'actions';\r\nimport { fetchStage2, updateCells, deleteStage2 } from 'services/stage2.service';\r\nimport { FetchStage2Response, TournamentProgress, DeleteStage2Response } from 'models';\r\nimport { TournamentSelector } from 'selectors';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction* deleteStage2Saga(action: ReturnType<typeof Stage2Action.delete.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: DeleteStage2Response = yield call(deleteStage2, action.payload.tId);\r\n    yield put(Stage2Action.delete.success(response));\r\n    const tournament = yield select(TournamentSelector.getTournament);\r\n    tournament!.progress = TournamentProgress.Stage1;\r\n    console.log('deleteStage2Saga : ', tournament);\r\n    toast.success('Fase 2 eiminata...');\r\n    yield put(TournamentAction.updateTournament.request({ model: tournament }));\r\n  } catch (err) {\r\n    yield put(Stage2Action.delete.failure(err));\r\n    toast.error('Error while deleting Stage2');\r\n  }\r\n}\r\n\r\nfunction* fetchStage2Saga(\r\n  action: ReturnType<typeof Stage2Action.fetchStage2.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchStage2Response = yield call(fetchStage2, action.payload);\r\n    yield put(Stage2Action.fetchStage2.success(response));\r\n  } catch (err) {\r\n    yield put(Stage2Action.fetchStage2.failure(err));\r\n    toast.error('Error while fetching Stage2');\r\n  }\r\n}\r\n\r\nfunction* updateCellsSaga({\r\n  payload: { cell1, cell2 },\r\n}: ReturnType<typeof Stage2Action.updateCell.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    yield call(updateCells, cell1, cell2);\r\n    yield put(Stage2Action.updateCell.success({}));\r\n  } catch (err) {\r\n    yield put(Stage2Action.updateCell.failure(err));\r\n    toast.error('Error while updating Stage2');\r\n  }\r\n}\r\n\r\nexport const Stage2Sagas = [\r\n  takeEvery(Stage2Action.fetchStage2.request, fetchStage2Saga),\r\n  takeEvery(Stage2Action.updateCell.request, updateCellsSaga),\r\n  takeEvery(Stage2Action.delete.request, deleteStage2Saga),\r\n];\r\n","import createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware, compose, combineReducers, ReducersMapObject } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport { RootState } from 'models';\r\nimport { TournamentReducer, PlayerReducer, PairReducer, SessionReducer, Stage1Reducer, Stage2Reducer } from 'reducers';\r\nimport { TournamentsSagas, PlayersSagas, PairsSagas, SessionSagas } from 'sagas';\r\nimport { Stage2Sagas } from 'sagas/stage2.saga';\r\n\r\n// https://redux-saga.js.org/docs/introduction/BeginnerTutorial.html\r\n// custom compose for the redux devtool extension\r\nconst composeEnhancer = (() => {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // https://github.com/zalmoxisus/redux-devtools-extension#redux-devtools-extension\r\n    const key = '__REDUX_DEVTOOLS_EXTENSION_COMPOSE__';\r\n    if (window && typeof (window as any)[key] !== 'undefined') {\r\n      // custom compose\r\n      return (window as any)[key];\r\n    }\r\n  }\r\n  // default compose\r\n  return compose;\r\n})();\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst commonReducers: ReducersMapObject<RootState> = {\r\n  tournamentState: TournamentReducer,\r\n  playerState: PlayerReducer,\r\n  pairState: PairReducer,\r\n  sessionState: SessionReducer,\r\n  stage1State: Stage1Reducer,\r\n  stage2State: Stage2Reducer,\r\n};\r\n\r\n// Meet the Store\r\nexport const store = createStore(combineReducers(commonReducers), composeEnhancer(applyMiddleware(sagaMiddleware)));\r\n\r\n// Exec all sagas ( watcher )\r\nfunction* rootSagas() {\r\n  yield all([...TournamentsSagas, ...PlayersSagas, ...PairsSagas, ...SessionSagas, ...Stage2Sagas]);\r\n}\r\n\r\nsagaMiddleware.run(rootSagas);\r\n","import React, { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport 'typeface-roboto';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport it from 'date-fns/locale/it';\r\nimport { setDefaultLocale, registerLocale } from 'react-datepicker';\r\nimport { store } from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\nsetDefaultLocale('it');\r\nregisterLocale('it', it);\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nprocess.env.NODE_ENV !== 'production' ? serviceWorker.unregister() : serviceWorker.register();\r\n\r\n// Redefine console so it does not in production env\r\nif (process.env.NODE_ENV === 'production') {\r\n  if (!window.console) (window as any).console = {};\r\n  ['log', 'debug', 'warn', 'info'].forEach((e) => ((window as any).console[e] = () => {}));\r\n}\r\n","import { toast } from 'react-toastify';\r\n\r\nexport const handleError = (error: any, message: string): void => {\r\n  console.error(`${message}`, error);\r\n  toast.error(message);\r\n  throw new Error(`Something went wrong : ${message}`);\r\n};\r\n","import { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport { Failure, Success, Request } from './constants';\r\nimport {\r\n  CheckAuthenticationRequest,\r\n  WatchSessionRequest,\r\n  AuthenticationError,\r\n  AuthenticationResponse,\r\n  LoginRequest,\r\n  RegisterRequest,\r\n} from 'models/session.model';\r\n\r\nconst ActionName = '[Session]';\r\n\r\nexport const SessionAction = {\r\n  // Register new user\r\n  register: createAsyncAction(\r\n    `${ActionName} Register ${Request}`,\r\n    `${ActionName} Register ${Success}`,\r\n    `${ActionName} Register ${Failure}`\r\n  )<RegisterRequest, AuthenticationResponse, AuthenticationError>(),\r\n  // Login\r\n  login: createAsyncAction(\r\n    `${ActionName} Login ${Request}`,\r\n    `${ActionName} Login ${Success}`,\r\n    `${ActionName} Login ${Failure}`\r\n  )<LoginRequest, AuthenticationResponse, AuthenticationError>(),\r\n  // Check if user is already authenticate\r\n  checkAuthentication: createAsyncAction(\r\n    `${ActionName} Get Session ${Request}`,\r\n    `${ActionName} Get Session ${Success}`,\r\n    `${ActionName} Get Session ${Failure}`\r\n  )<CheckAuthenticationRequest, AuthenticationResponse, AuthenticationError>(),\r\n  // Session watcher\r\n  sessionControl: createAsyncAction(\r\n    `${ActionName} Watch Session ${Request}`,\r\n    `${ActionName} Watch Session ${Success}`,\r\n    `${ActionName} Watch Session ${Failure}`\r\n  )<WatchSessionRequest, AuthenticationResponse, AuthenticationError>(),\r\n  // set selected tournament\r\n  updateSession: createAction(`${ActionName} Set Session`)<AuthenticationResponse>(),\r\n};\r\n","import { createAsyncAction } from 'typesafe-actions';\r\nimport { Failure, Success, Request } from './constants';\r\nimport { FetchPlayersResponse, FetchPlayersRequest } from 'models/player.model';\r\n\r\nconst ActionName = '[Player]';\r\n\r\nexport const PlayerAction = {\r\n  // fetch tournaments\r\n  getPlayers: createAsyncAction(\r\n    `${ActionName} Get Player ${Request}`,\r\n    `${ActionName} Get Player ${Success}`,\r\n    `${ActionName} Get Player ${Failure}`\r\n  )<FetchPlayersRequest, FetchPlayersResponse, Error>(),\r\n};\r\n","import { RootState } from 'models';\r\n\r\n// Get state from store\r\nexport const SessionSelector = {\r\n  isLoading({ sessionState: { isLoading } }: RootState) {\r\n    return isLoading;\r\n  },\r\n  // Authentication / Role\r\n  isAdmin({ sessionState: { isAdmin } }: RootState) {\r\n    return isAdmin;\r\n  },\r\n  isAuthenticated({ sessionState: { isAuthenticated } }: RootState) {\r\n    return isAuthenticated;\r\n  },\r\n  // User / Session\r\n  getUser({ sessionState: { user } }: RootState) {\r\n    return user;\r\n  },\r\n  getSession({ sessionState }: RootState) {\r\n    return sessionState;\r\n  },\r\n};\r\n","// Requests\r\nexport interface FetchTournamentsRequest {\r\n  tId?: number;\r\n}\r\n\r\nexport interface PostTournamentRequest {\r\n  model: TournamentDTO;\r\n}\r\n\r\nexport interface UpdateTournamentRequest {\r\n  model: TournamentDTO;\r\n}\r\n\r\nexport interface IsValidTournamentRequest {\r\n  model: TournamentDTO;\r\n}\r\n\r\n// Responses\r\nexport interface FetchTournamentsResponse {\r\n  results: TournamentDTO[];\r\n}\r\nexport interface PostTournamentResponse {\r\n  result: TournamentDTO | null;\r\n}\r\nexport interface UpdateTournamentResponse {\r\n  result: TournamentDTO;\r\n}\r\nexport interface IsValidTournamentResponse {\r\n  isValid: boolean;\r\n  errorMessage: string;\r\n}\r\n\r\n//\r\nexport interface TournamentState {\r\n  tournament: TournamentDTO | null;\r\n  tournamentsList: TournamentDTO[] | [];\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface TournamentDTO {\r\n  id: number | null;\r\n  name: string;\r\n  date: Date;\r\n  progress: TournamentProgress;\r\n  public: boolean;\r\n  label: string;\r\n  ownerId: number | null;\r\n}\r\n\r\nexport enum TournamentProgress {\r\n  New = 'New',\r\n  PairsSelection = 'PairsSelection',\r\n  Stage1 = 'Stage1',\r\n  Stage2 = 'Stage2',\r\n}\r\n","import { FetchPlayersRequest, FetchPlayersResponse, PlayerRole, PlayerDTO } from 'models';\r\nimport { handleError } from './common';\r\n\r\nexport const fetchPlayers = async ({ tId, addEmpty }: FetchPlayersRequest): Promise<FetchPlayersResponse> => {\r\n  try {\r\n    const response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const result = await response.json();\r\n    return { results: addEmpty ? [...result, getEmptyPlayer('Nessun Giocatore')] : result };\r\n  } catch (e) {\r\n    handleError(e, 'Error players fetch');\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nexport function getEmptyPlayer(label?: string): PlayerDTO {\r\n  return {\r\n    id: null,\r\n    name: '',\r\n    surname: '',\r\n    alias: '',\r\n    label: label || '',\r\n    role: PlayerRole.GoalKeeper,\r\n    email: '',\r\n    phone: '',\r\n    match_played: 0,\r\n    match_won: 0,\r\n    total_score: 0,\r\n    editable: false,\r\n  };\r\n}\r\n","export * from './common.model';\r\nexport * from './pair.model';\r\nexport * from './player.model';\r\nexport * from './tournament.model';\r\nexport * from './session.model';\r\nexport * from './stage1.model';\r\nexport * from './stage2.model';\r\n","import {\r\n  FetchTournamentsRequest,\r\n  FetchTournamentsResponse,\r\n  TournamentDTO,\r\n  PostTournamentRequest,\r\n  PostTournamentResponse,\r\n  UpdateTournamentRequest,\r\n  UpdateTournamentResponse,\r\n  IsValidTournamentRequest,\r\n  IsValidTournamentResponse,\r\n} from '../models/tournament.model';\r\nimport { handleError } from './common';\r\n\r\nexport const fetchTournaments = async (request: FetchTournamentsRequest): Promise<FetchTournamentsResponse> => {\r\n  try {\r\n    const response = await fetch(request?.tId ? `/api/v1/tournament/${request.tId}` : '/api/v1/tournament/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const results: TournamentDTO[] = await response.json();\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e, 'Error fetching Tournaments');\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nexport const postTournament = async ({ model }: PostTournamentRequest): Promise<PostTournamentResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/tournament', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    const result: TournamentDTO = await response.json();\r\n    console.log('postTournament : ', result);\r\n\r\n    return { result };\r\n  } catch (e) {\r\n    handleError(e, 'Error updating Tournament');\r\n    return { result: null };\r\n  }\r\n};\r\n\r\nexport const updateTournament = async ({ model }: UpdateTournamentRequest): Promise<UpdateTournamentResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/tournament', {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    const result: TournamentDTO = await response.json();\r\n    return { result };\r\n  } catch (e) {\r\n    handleError(e, 'Error updating Tournament');\r\n    return { result: model };\r\n  }\r\n};\r\n\r\nexport const isValidTournament = async ({ model }: IsValidTournamentRequest): Promise<IsValidTournamentResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/tournament/isValid', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    const { isValid, errorMessage }: IsValidTournamentResponse = await response.json();\r\n    return { isValid, errorMessage };\r\n  } catch (e) {\r\n    handleError(e, 'Error validating Tournament');\r\n    return { isValid: false, errorMessage: '' };\r\n  }\r\n};\r\n"],"sourceRoot":""}