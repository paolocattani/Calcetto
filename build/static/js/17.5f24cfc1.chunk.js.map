{"version":3,"sources":["components/core/Icons.tsx","components/core/hooks/InputHook.ts","components/Auth/Edit.tsx"],"names":["TrashIcon","size","undefined","icon","findIconDefinition","prefix","iconName","SaveIcon","ToggleOn","ToggleOff","RightArrowIcon","useInput","initialValue","useState","value","setValue","reset","bind","onChange","event","currentTarget","Delete","lazy","EditUser","useSessionContext","session","showModalDelete","setShowModalDelete","name","bindName","surname","bindSurname","phone","bindPhone","birthday","setBirthday","errorMessage","setErrorMessage","successMessage","setSuccessMessage","showError","message","setTimeout","onSubmit","a","console","log","fetch","method","headers","body","JSON","stringify","username","email","response","json","ok","md","span","offset","sm","style","textAlign","width","height","margin","color","className","Header","as","Body","key","variant","Group","Row","controlId","Label","column","Control","plaintext","readOnly","fontSize","fontWeight","required","type","placeholder","selected","Date","locale","dateFormat","newValue","Footer","onClick","show","onHide"],"mappings":"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","file":"static/js/17.5f24cfc1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { findIconDefinition, SizeProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\ninterface IconType {\r\n  size?: SizeProp;\r\n}\r\nexport const TrashIcon: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'far',\r\n      iconName: 'trash-alt'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const SaveIcon: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'far',\r\n      iconName: 'save'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const ToggleOn: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'fas',\r\n      iconName: 'toggle-on'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const ToggleOff: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'fas',\r\n      iconName: 'toggle-off'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const RightArrowIcon: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'far',\r\n      iconName: 'arrow-alt-circle-right'\r\n    })}\r\n  />\r\n);\r\n\r\nexport const PlusIcon: React.FC<IconType> = ({ size }) => (\r\n  <FontAwesomeIcon\r\n    size={size || undefined}\r\n    icon={findIconDefinition({\r\n      prefix: 'fas',\r\n      iconName: 'plus'\r\n    })}\r\n  />\r\n);\r\n","import { useState } from 'react';\r\n\r\n// FIXME:\r\n// https://rangle.io/blog/simplifying-controlled-inputs-with-hooks/\r\nexport const useInput = (initialValue: any) => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    reset: () => setValue(''),\r\n    bind: {\r\n      value,\r\n      onChange: (event: React.FormEvent<HTMLSelectElement>) => {\r\n        setValue(event.currentTarget.value);\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React, { FormEvent, SetStateAction, useState, CSSProperties, lazy } from 'react';\r\nimport { Card, Container, Alert, Form, Button, Col, Row } from 'react-bootstrap';\r\nimport { useInput } from '../core/hooks/InputHook';\r\nimport { useSessionContext } from '../core/routing/SessionContext';\r\nimport DatePicker from 'react-datepicker';\r\nimport { TrashIcon, SaveIcon } from '../core/Icons';\r\nconst Delete = lazy(() => import('./Delete'));\r\n\r\nconst EditUser: React.FC<{}> = (): JSX.Element => {\r\n  const [session] = useSessionContext();\r\n  const [showModalDelete, setShowModalDelete] = useState(false);\r\n\r\n  const { value: name, bind: bindName /*reset: resetUsername*/ } = useInput(session.name);\r\n  const { value: surname, bind: bindSurname /*reset: resetUsername*/ } = useInput(session.surname);\r\n  const { value: phone, bind: bindPhone /*reset: resetUsername*/ } = useInput(session.phone);\r\n  const { value: birthday, setValue: setBirthday /* bind: bindBirthday ,reset: resetUsername*/ } = useInput(\r\n    session.birthday\r\n  );\r\n\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n\r\n  const showError = (message: SetStateAction<string>) => {\r\n    setErrorMessage(message);\r\n    setTimeout(() => setErrorMessage(''), 3000);\r\n  };\r\n  const showSuccess = (message: SetStateAction<string>) => {\r\n    setSuccessMessage(message);\r\n    setTimeout(() => setSuccessMessage(''), 3000);\r\n  };\r\n\r\n  const onSubmit = async (event: FormEvent<HTMLFormElement>) => {\r\n    console.log('onSubmit ');\r\n    try {\r\n      const response = await fetch('/api/v1/auth/update', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username: session.username, name, surname, email: session.email, phone, birthday })\r\n      });\r\n      await response.json();\r\n      if (response.ok) showSuccess('Aggiornamento effettuato ... ');\r\n      else showError('Errore durante aggiornamento dati');\r\n    } catch (error) {\r\n      showError('Errore durante aggiornamento dati');\r\n    }\r\n  };\r\n\r\n  const modalStyle: CSSProperties = {\r\n    textAlign: 'left',\r\n    width: '100%',\r\n    height: 'auto',\r\n    margin: 'auto',\r\n    color: 'white'\r\n  };\r\n\r\n  console.log('Rendere Edit : ', birthday);\r\n  return (\r\n    <Col md={{ span: '6', offset: '3' }} sm=\"12\">\r\n      <Card style={modalStyle} className=\"default-background\">\r\n        <Form onSubmit={onSubmit}>\r\n          <Card.Header as=\"h2\">Gestione dati utente</Card.Header>\r\n          <Card.Body>\r\n            <Container>\r\n              {errorMessage ? (\r\n                <Alert key={'auth-alert-error'} variant={'danger'}>\r\n                  {errorMessage}\r\n                </Alert>\r\n              ) : null}\r\n              {successMessage ? (\r\n                <Alert key={'auth-alert-success'} variant={'success'}>\r\n                  {successMessage}\r\n                </Alert>\r\n              ) : null}\r\n              <Form.Group as={Row} controlId=\"username\">\r\n                <Form.Label column>Username</Form.Label>\r\n                <Col sm=\"9\">\r\n                  <Form.Control\r\n                    plaintext\r\n                    value={session.username!}\r\n                    readOnly\r\n                    style={{ fontSize: 'larger', fontWeight: 'bolder' }}\r\n                    className=\"default-color-white \"\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group as={Row} controlId=\"email\">\r\n                <Form.Label column>Email</Form.Label>\r\n                <Col sm=\"9\">\r\n                  <Form.Control\r\n                    plaintext\r\n                    value={session.email!}\r\n                    readOnly\r\n                    style={{ fontSize: 'larger', fontWeight: 'bolder' }}\r\n                    className=\"default-color-white\"\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group controlId=\"name\">\r\n                    <Form.Label>Nome</Form.Label>\r\n                    <Form.Control required type=\"text\" placeholder=\"Nome\" {...bindName} />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group controlId=\"surname\">\r\n                    <Form.Label>Cognome</Form.Label>\r\n                    <Form.Control required type=\"text\" placeholder=\"Cognome\" {...bindSurname} />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group controlId=\"phone\">\r\n                    <Form.Label>Telefono</Form.Label>\r\n                    <Form.Control required type=\"text\" placeholder=\"Telefono\" {...bindPhone} />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group controlId=\"birthday\">\r\n                    <Form.Label>Data di Nascita</Form.Label>\r\n                    <Form.Control\r\n                      as={() => (\r\n                        <DatePicker\r\n                          selected={new Date(birthday)}\r\n                          locale=\"it\"\r\n                          dateFormat=\"dd/MM/yyyy\"\r\n                          onChange={newValue => setBirthday(newValue ? newValue : new Date())}\r\n                        />\r\n                      )}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n            </Container>\r\n          </Card.Body>\r\n          <Card.Footer style={{ height: '10vh' }}>\r\n            <Button variant=\"outline-success\" type=\"submit\" className=\"float-right\">\r\n              <SaveIcon /> Salva\r\n            </Button>\r\n            <Button variant=\"outline-danger\" className=\"float-left\" onClick={() => setShowModalDelete(true)}>\r\n              <TrashIcon /> Elimina Utente\r\n            </Button>\r\n          </Card.Footer>\r\n        </Form>\r\n        <Delete show={showModalDelete} onHide={() => setShowModalDelete(false)} />\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default EditUser;\r\n"],"sourceRoot":""}