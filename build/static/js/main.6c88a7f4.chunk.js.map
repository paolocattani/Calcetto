{"version":3,"sources":["components/assets/header.jpg","components/core/Routes.ts","components/Header/Header.tsx","components/core/ProtectedRoute.tsx","components/App.tsx","serviceWorker.ts","index.tsx","components/core/SessionContext.tsx","components/core/Commons.tsx"],"names":["module","exports","lazyPlayer","React","lazy","lazyTournament","lazyPairs","lazyStage1","lazyStage2","lazyRedirectionControl","routes","path","label","exact","ComponentToRender","visible","private","index","Header","_","useSessionContext","sessionContext","updateSessionContext","logout","a","fetch","ok","isAuthenticated","jumboStyle","backgroundImage","backgroundSize","padding","minHeight","nameStyle","color","fontSize","Jumbotron","style","margin","Navbar","collapseOnSelect","expand","bg","variant","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","map","route","key","name","Text","Button","onClick","ProtectedRoute","props","SessionContext","Consumer","session","render","innerProps","location","pathname","console","log","state","from","pathName","element","find","e","getLabelByPathname","library","add","fas","far","App","useHistory","Container","fluid","fallback","show","message","Boolean","window","hostname","match","setDefaultLocale","registerLocale","it","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","initialSession","createContext","useContext","SessionContextProvider","children","useState","sessionState","setSessionState","defaultSessionContext","useEffect","response","json","user","error","Provider","value","isEditable","role","LoadingModal","onHide","size","centered","closeButton","Title","Body","Footer","animation","GenericToast","type"],"mappings":"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","file":"static/js/main.6c88a7f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.7774471e.jpg\";","import React from 'react';\r\n\r\n// import { OrganizationChartDemo } from '../Stage2/table';\r\nconst lazyPlayer = React.lazy(() => import('../Player/table'));\r\nconst lazyTournament = React.lazy(() => import('../Tournament/Tournament'));\r\nconst lazyPairs = React.lazy(() => import('../Pair/table'));\r\nconst lazyStage1 = React.lazy(() => import('../Stage1/wrapper'));\r\nconst lazyStage2 = React.lazy(() => import('../Stage2/model'));\r\nconst lazyRedirectionControl = React.lazy(() => import('./RedirectionControls'));\r\nconst lazyLogin = React.lazy(() => import('../Auth/Wrapper'));\r\nconst lazyUser = React.lazy(() => import('../Auth/Edit'));\r\n\r\nexport interface routeType {\r\n  path: string;\r\n  label: string;\r\n  exact: boolean;\r\n  ComponentToRender: React.ComponentType;\r\n  visible: boolean;\r\n  index: number;\r\n  private: boolean;\r\n}\r\n\r\n// Mappatura route\r\nexport const routes: routeType[] = [\r\n  {\r\n    path: '/login',\r\n    label: 'Login',\r\n    exact: true,\r\n    ComponentToRender: lazyLogin,\r\n    visible: false,\r\n    private: false,\r\n    index: 0\r\n  },\r\n  {\r\n    path: '/',\r\n    label: 'Home',\r\n    exact: true,\r\n    ComponentToRender: lazyTournament,\r\n    visible: false,\r\n    private: true,\r\n    index: 10\r\n  },\r\n  {\r\n    path: '/tournament/:tId',\r\n    label: 'Selezione Coppie',\r\n    exact: true,\r\n    ComponentToRender: lazyPairs,\r\n    visible: false,\r\n    private: true,\r\n    index: 20\r\n  },\r\n  {\r\n    path: '/stage1/:tId',\r\n    label: 'Torneo fase 1',\r\n    exact: true,\r\n    ComponentToRender: lazyStage1,\r\n    visible: false,\r\n    private: true,\r\n    index: 30\r\n  },\r\n  {\r\n    path: '/player',\r\n    label: 'Gestione Giocatori',\r\n    exact: true,\r\n    ComponentToRender: lazyPlayer,\r\n    visible: true,\r\n    private: true,\r\n    index: 40\r\n  },\r\n  {\r\n    path: '/user',\r\n    label: 'Gestione Utente',\r\n    exact: true,\r\n    ComponentToRender: lazyUser,\r\n    visible: false,\r\n    private: true,\r\n    index: 50\r\n  },\r\n  {\r\n    path: '/stage2/:tId',\r\n    label: 'Torneo fase 2',\r\n    exact: true,\r\n    ComponentToRender: lazyStage2,\r\n    //ComponentToRender: OrganizationChartDemo,\r\n    visible: !(process.env.NODE_ENV === 'production'),\r\n    private: true,\r\n    index: 100\r\n  },\r\n  // TODO: creare pagina per route not found\r\n  {\r\n    path: '*',\r\n    label: 'Not Found',\r\n    exact: false,\r\n    ComponentToRender: lazyRedirectionControl,\r\n    visible: false,\r\n    private: true,\r\n    index: 1000\r\n  }\r\n];\r\nexport default routes;\r\n\r\nexport function getLabelByPathname(pathName: string): string {\r\n  const element = routes.find(e => e.path === pathName);\r\n  return element ? element.label : `route ${pathName} not found!`;\r\n}\r\n\r\nexport function getRouteByPathname(pathName: string): routeType | undefined {\r\n  return routes.find(e => e.path === pathName);\r\n}\r\n","import React, { CSSProperties, useState } from 'react';\r\nimport backgroundImage from '../assets/header.jpg';\r\nimport { Jumbotron, Navbar, Nav, Button } from 'react-bootstrap';\r\nimport routes from '../core/Routes';\r\nimport { useSessionContext } from '../core/SessionContext';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst applicationName = 'Calcetto C.S.M';\r\nexport const Header: React.FC = _ => {\r\n  const [sessionContext, updateSessionContext] = useSessionContext();\r\n\r\n  const logout = async () => {\r\n    const response = await fetch('/api/v1/auth/logout');\r\n    if (response.ok) updateSessionContext({ isAuthenticated: false });\r\n    // TODO: gestire messaggi utente\r\n  };\r\n\r\n  const yellow = '##ffc107';\r\n  const jumboStyle: CSSProperties = {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundSize: 'cover',\r\n    padding: '60px 0px 10px 0px',\r\n    minHeight: '28vh'\r\n  };\r\n\r\n  const titleStyle: CSSProperties = {\r\n    color: 'white'\r\n  };\r\n\r\n  const nameStyle: CSSProperties = {\r\n    color: yellow,\r\n    fontSize: '4vh',\r\n    padding: '0vw 2vw'\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <Jumbotron style={jumboStyle}>\r\n        <h1 style={{ margin: '5vh' }}>\r\n          <strong style={titleStyle}>{applicationName}</strong>\r\n        </h1>\r\n        {sessionContext.isAuthenticated ? (\r\n          <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n              Home\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                {routes.map(route =>\r\n                  route.visible ? (\r\n                    route.private && !sessionContext.isAuthenticated ? null : (\r\n                      <Nav.Link as={Link} key={route.index} to={route.path}>\r\n                        {route.label}\r\n                      </Nav.Link>\r\n                    )\r\n                  ) : null\r\n                )}\r\n              </Nav>\r\n              {sessionContext.name ? (\r\n                <>\r\n                  <Navbar.Text style={nameStyle}>\r\n                    <strong style={{ color: '#64bd9c' }}>{sessionContext.name}</strong>\r\n                  </Navbar.Text>\r\n                  <>\r\n                    <Button variant=\"outline-warning\" onClick={logout}>\r\n                      Log out\r\n                    </Button>\r\n                    <Button as={Link} to={'/user'} variant=\"outline-warning\">\r\n                      Gestione Utente\r\n                    </Button>\r\n                  </>\r\n                </>\r\n              ) : null}\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        ) : null}\r\n      </Jumbotron>\r\n    </header>\r\n  );\r\n};\r\n","// https://github.com/openscript/react-example-authentication-redirection\r\n\r\nimport * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport { routeType, getLabelByPathname } from './Routes';\r\nimport { SessionContext } from './SessionContext';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const ProtectedRoute: React.FC<routeType> = props => (\r\n  <SessionContext.Consumer>\r\n    {([session]) => {\r\n      return (\r\n        <Route\r\n          {...props}\r\n          render={innerProps => {\r\n            const { location } = innerProps;\r\n            // Se sono gia autenticato e sto chiedendo la login, reindirizzo alla home\r\n            if (session.isAuthenticated && location.pathname === '/login') {\r\n              console.log('ProtectedRoute => redirect to Home');\r\n              return <Redirect {...props} to={{ pathname: '/', state: { from: location } }} />;\r\n            }\r\n\r\n            // Se non è una rotta protetta\r\n            if (!props.private) {\r\n              console.log('ProtectedRoute => public route : ', { ...props });\r\n              return <props.ComponentToRender {...props} />;\r\n            }\r\n\r\n            // Se è una rotta privata e non sono autenticato devo andare alla login\r\n            if (!session.isAuthenticated) {\r\n              console.log('ProtectedRoute => redirect to Login : ', { ...session });\r\n              return <Redirect {...props} to={{ pathname: '/login', state: { from: location } }} />;\r\n            }\r\n            /**\r\n             * Se sono arrivato qui vuol dire che è una rotta protetta, che sono autenticato\r\n             * e che non sto chiedendo di andare alla login. Quindi direi che posso andare dove voglio...\r\n             */\r\n            console.log('ProtectedRoute => render component : ', getLabelByPathname(location.pathname));\r\n            return <props.ComponentToRender {...props} />;\r\n          }}\r\n        />\r\n      );\r\n    }}\r\n  </SessionContext.Consumer>\r\n);\r\n\r\nexport default ProtectedRoute;\r\n","import React, { Suspense } from 'react';\r\n// Components\r\nimport { Header } from './Header/Header';\r\nimport { LoadingModal /* LogSessionContext */ } from './core/Commons';\r\n// Routing\r\nimport { Switch, useHistory } from 'react-router';\r\nimport routes from '../components/core/Routes';\r\nimport { ProtectedRoute } from '../components/core/ProtectedRoute';\r\n// Style\r\nimport './style/App.css';\r\nimport { Container } from 'react-bootstrap';\r\n// FontAwesome 5\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { far } from '@fortawesome/free-regular-svg-icons';\r\n\r\nlibrary.add(fas, far);\r\n\r\nconst App: React.FC = _ => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Container fluid>\r\n        {/*<LogSessionContext /> */}\r\n        {/*<RedirectionControl />*/}\r\n        <Suspense fallback={<LoadingModal show={true} message={'....Caricamento'} />}>\r\n          <Switch>\r\n            {routes.map(route => (\r\n              <ProtectedRoute {...route} key={route.index} />\r\n            ))}\r\n          </Switch>\r\n        </Suspense>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = _ => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = _ => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport 'typeface-roboto';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { SessionContextProvider } from './components/core/SessionContext';\r\nimport it from 'date-fns/locale/it';\r\nimport { setDefaultLocale, registerLocale } from 'react-datepicker';\r\n\r\nsetDefaultLocale('it');\r\nregisterLocale('it', it);\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <SessionContextProvider>\r\n      <App />\r\n    </SessionContextProvider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createContext, useContext, useState, useEffect } from 'react';\r\nimport React from 'react';\r\n\r\nexport interface Session {\r\n  isAuthenticated?: boolean | null;\r\n  username?: string | null;\r\n  name?: string | null;\r\n  surname?: string | null;\r\n  email?: string | null;\r\n  phone?: string | null;\r\n  birthday?: string | null;\r\n  label?: string | null;\r\n  role?: string | null;\r\n}\r\n\r\n// https://stackoverflow.com/questions/59422159/redirecting-a-user-to-the-page-they-requested-after-successful-authentication-wi\r\n// https://github.com/openscript/react-example-authentication-redirection\r\n\r\n// https://www.freecodecamp.org/news/react-context-in-5-minutes/\r\nexport const initialSession: Session = { isAuthenticated: false };\r\n\r\nexport const SessionContext = createContext<[Session, (session: Session) => void]>([initialSession, () => {}]);\r\nexport const useSessionContext = () => useContext(SessionContext);\r\n\r\nexport const SessionContextProvider: React.FC = ({ children }) => {\r\n  const [sessionState, setSessionState] = useState(initialSession);\r\n  const defaultSessionContext: [Session, typeof setSessionState] = [sessionState, setSessionState];\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const response = await fetch('/api/v1/auth/');\r\n        const user = await response.json();\r\n        if (user && response.ok) setSessionState({ isAuthenticated: true, ...user });\r\n        else setSessionState(initialSession);\r\n      } catch (error) {\r\n        console.error('SessionContext.error :', error);\r\n        setSessionState(initialSession);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  console.log('sessionContext.session: ', sessionState);\r\n\r\n  return (\r\n    <SessionContext.Provider value={defaultSessionContext}>{sessionState ? children : null}</SessionContext.Provider>\r\n  );\r\n};\r\n\r\nexport const isEditable = (sessionContext: Session): boolean =>\r\n  !sessionContext || !sessionContext.isAuthenticated || !sessionContext.role\r\n    ? false\r\n    : sessionContext.isAuthenticated && sessionContext.role === 'Admin';\r\n","import React from 'react';\r\nimport { Modal, Spinner, Toast, Alert } from 'react-bootstrap';\r\nimport { SessionContext } from './SessionContext';\r\n\r\n// Loading Modal\r\ntype loadingModalPropsType = {\r\n  show: boolean;\r\n  message: string;\r\n  onHide?: () => void;\r\n};\r\n\r\nexport const LoadingModal: React.FC<loadingModalPropsType> = ({\r\n  message,\r\n  show,\r\n  onHide = () => (show = false)\r\n}: loadingModalPropsType) => (\r\n  <Modal show={show} onHide={onHide} size=\"xl\" centered>\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>Caricamento....</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>{message}</Modal.Body>\r\n    <Modal.Footer>\r\n      <Spinner animation=\"border\" variant=\"light\" />\r\n      <Spinner animation=\"border\" variant=\"primary\" />\r\n      <Spinner animation=\"border\" variant=\"secondary\" />\r\n      <Spinner animation=\"border\" variant=\"success\" />\r\n      <Spinner animation=\"border\" variant=\"danger\" />\r\n      <Spinner animation=\"border\" variant=\"warning\" />\r\n      <Spinner animation=\"border\" variant=\"info\" />\r\n      <Spinner animation=\"border\" variant=\"dark\" />\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n\r\n// Toasts\r\ntype toastPropsType = {\r\n  message: string;\r\n  type?: 'success' | 'warning' | 'danger';\r\n};\r\n\r\nexport const GenericToast: React.FC<toastPropsType> = ({ message, type }: toastPropsType) =>\r\n  message && message !== '' ? (\r\n    <Toast className=\"rounded mr-2 mx-auto\" key={`${type}-message`} show={message !== ''}>\r\n      <Toast.Header closeButton={false}>\r\n        <strong>Operazione completata !</strong>\r\n      </Toast.Header>\r\n      <Toast.Body>\r\n        <Alert variant={type}>{message}</Alert>\r\n      </Toast.Body>\r\n    </Toast>\r\n  ) : null;\r\n\r\nexport const LogSessionContext: React.FC<{}> = _ => (\r\n  <SessionContext.Consumer>\r\n    {([session]) =>\r\n      Object.entries(session).map(([key, value]) => (\r\n        <p>\r\n          {key} : {value}\r\n        </p>\r\n      ))\r\n    }\r\n  </SessionContext.Consumer>\r\n);\r\n"],"sourceRoot":""}