{"version":3,"sources":["components/Player/helper.js","components/core/utils.ts","components/Tournament/type.ts","components/Player/select.jsx","components/Pair/helper.js","components/Pair/header.tsx","components/Pair/noData.tsx","components/Pair/table.jsx"],"names":["nameFilter","surnameFilter","aliasFilter","roleFilter","emailFilter","phoneFilter","selectOptions","Portiere","Attaccante","Master","clearAllFilter","playerColumns","isEditable","dataField","text","editable","headerStyle","column","colIndex","width","headerClasses","autoSelectText","filter","textFilter","placeholder","getFilter","selectFilter","options","editor","type","Type","SELECT","getOptions","_","value","label","hidden","valueFormatter","selectedOption","alias","surname","name","getEmptyPlayer","id","role","email","phone","match_played","match_won","total_score","getTodayDate","formatDate","Date","translateTournamentProgress","TournamentProgress","New","PairsSelection","Stage1","Stage2","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","RegExp","passwordRegExp","emailRegExp","animatedComponents","makeAnimated","PlayerSelection","React","forwardRef","props","ref","useState","setSelectedOption","row","columnIndex","onUpdate","onSelect","components","onChange","pairId","isSearchable","isClearable","columns","align","editorRenderer","editorProps","rowIndex","styles","customStyles","toUpperCase","split","map","e","CHECKBOX","style","content","backgroundColor","cellEditProps","cellEditFactory","mode","blurToSave","afterSaveCell","oldValue","newValue","a","fetch","method","headers","body","JSON","stringify","response","json","getEmptyRowModel","rowNumber","tId","player1","player2","pairAlias","stage1Name","paid1","paid2","fetchData","rows","result","players","console","log","tournament","fetchPairs","setterFunction","option","provided","state","color","control","height","marginBottom","singleValue","valueContainer","fontSize","TableHeader","progress","noData","addRow","optionsLength","diff","Button","variant","onClick","disabled","to","PairsTable","useParams","currentHistory","useHistory","message","isLoading","setIsLoading","messageInitialState","setMessage","data","setData","selectedRows","setSelectedRows","stage1Number","setStage1Number","newRowsNumber","setNewRowsNumber","showErrorMessage","setTimeout","showSuccessMessage","index","emptyRow","current","addMultipleRows","ii","deleteRow","forEach","push","sort","e1","e2","localeCompare","find","selectedRow","updateOptions","player","selected","useEffect","selectedElement","newRowsElement","rowElement","handleSelect","isSelected","found","confirmPairs","missingStage1Name","missingPairs","stageName","invalidStage","pairsInStage","reduce","allNames","MIN_PAIR_PER_STAGE","selectRow","onSelectAll","deleteStage1","setStage1Name","names","newRows","error","availableRows","Math","floor","accumulator","deleteDisabled","deleteTooltipMessage","SessionContext","Consumer","session","Row","show","Col","margin","md","span","ListGroup","Item","action","OverlayTrigger","placement","key","overlay","Tooltip","className","pointerEvents","display","InputGroup","target","Prepend","Text","FormControl","aria-label","Append","bootstrap4","keyField","cellEdit","noDataIndication","caption","striped","hover"],"mappings":"+OAaIA,EACAC,EACAC,EACAC,EACAC,EACAC,E,kBAZEC,EAAgB,CACpBC,SAAU,WACVC,WAAY,aACZC,OAAQ,UAWH,SAASC,IACdV,EAAW,IACXC,EAAc,IACdC,EAAY,IACZC,EAAW,IACXC,EAAY,IACZC,EAAY,IAyFCM,IArFO,SAAAC,GAAU,MAAI,CAClC,CAAEC,UAAW,KAAMC,KAAM,KAAMC,UAAU,EAAOC,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,QAC7F,CACEN,UAAW,OACXC,KAAM,OACNM,cAAe,8BACfC,gBAAgB,EAChBL,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAOP,EAAa,MAAQ,QAClEU,OAAQC,qBAAW,CACjBC,YAAa,YACbC,UAAW,SAAAH,GAAM,OAAKtB,EAAasB,MAGvC,CACET,UAAW,UACXC,KAAM,UACNM,cAAe,8BACfC,gBAAgB,EAChBL,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAOP,EAAa,MAAQ,QAClEU,OAAQC,qBAAW,CACjBC,YAAa,YACbC,UAAW,SAAAH,GAAM,OAAKrB,EAAgBqB,MAG1C,CACET,UAAW,QACXC,KAAM,QACNM,cAAe,8BACfJ,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAOP,EAAa,MAAQ,QAClES,gBAAgB,EAChBC,OAAQC,qBAAW,CACjBC,YAAa,YACbC,UAAW,SAAAH,GAAM,OAAKpB,EAAcoB,MAGxC,CACET,UAAW,OACXC,KAAM,QACNM,cAAe,8BACfJ,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAM,GAAD,OAAKP,EAAa,KAAO,KAAzB,OAC3CU,OAAQI,uBAAa,CACnBF,YAAa,YACbG,QAASrB,EACTmB,UAAW,SAAAH,GAAM,OAAKnB,EAAamB,KAErCM,OAAQ,CACNC,KAAMC,OAAKC,OACXC,WAAY,SAAAC,GACV,MAAO,CACL,CAAEC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,SAAUC,MAAO,cAKlC,CACEtB,UAAW,QACXC,KAAM,QACNE,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,QAC7CC,cAAe,8BACfC,gBAAgB,EAChBe,QAASxB,EACTU,OAAQC,qBAAW,CACjBC,YAAa,YACbC,UAAW,SAAAH,GAAM,OAAKlB,EAAckB,MAGxC,CACET,UAAW,QACXG,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,QAC7CL,KAAM,WACNM,cAAe,8BACfC,gBAAgB,EAChBe,QAASxB,EACTU,OAAQC,qBAAW,CACjBC,YAAa,YACbC,UAAW,SAAAH,GAAM,OAAKjB,EAAciB,MAGxC,CAAET,UAAW,eAAgBC,KAAM,kBAAmBsB,QAAQ,GAC9D,CAAEvB,UAAW,YAAaC,KAAM,WAAYsB,QAAQ,GACpD,CAAEvB,UAAW,cAAeC,KAAM,YAAasB,QAAQ,KA2BlD,SAASC,EAAeC,GAE7B,OAAKA,EACDA,EAAeC,MACTD,EAAeC,MAEfD,EAAeE,QAAf,UAA4BF,EAAeG,KAA3C,cAAqDH,EAAeE,SAAYF,EAAeG,KAJ7E,GASvB,SAASC,EAAeP,GAC7B,MAAO,CACLQ,GAAI,KACJF,KAAM,GACND,QAAS,GACTD,MAAO,GACPJ,MAAOA,GAAS,GAChBS,KAAM,WACNC,MAAO,GACPC,MAAO,GACPC,aAAc,EACdC,UAAW,EACXC,YAAa,EACblC,UAAU,K,iCCnKd,uLAEamC,EAAe,kBAAMC,EAAW,IAAIC,OAE1C,SAASC,EAA4BnB,GAC1C,OAAQA,GACN,KAAKoB,IAAmBC,IACtB,MAAO,QACT,KAAKD,IAAmBE,eACtB,MAAO,mBACT,KAAKF,IAAmBG,OACtB,MAAO,SACT,KAAKH,IAAmBI,OACtB,MAAO,SACT,QACE,MAAO,IAIN,SAASP,EAAWQ,GACzB,IAAIC,EAAI,IAAIR,KAAKO,GACfE,EAAQ,IAAMD,EAAEE,WAAa,GAC7BC,EAAM,GAAKH,EAAEI,UACbC,EAAOL,EAAEM,cAKX,OAHIL,EAAMM,OAAS,IAAGN,EAAQ,IAAMA,GAChCE,EAAII,OAAS,IAAGJ,EAAM,IAAMA,GAEzB,CAACE,EAAMJ,EAAOE,GAAKK,KAAK,KASN,IAAIC,OAAO,WAA/B,IACMC,EAAiB,IAAID,OAAO,iDAC5BE,EAAc,IAAIF,OAE7B,wI,iCCpBF,kCAAO,IAAMf,EAAqB,CAAEC,IAAK,MAAOC,eAAgB,iBAAkBC,OAAQ,SAAUC,OAAQ,W,8TCftGc,EAAqBC,cAgCZC,EA9BSC,IAAMC,YAAW,SAACC,EAAOC,GAAS,IAAD,EACXC,qBADW,mBAChDzC,EADgD,KAChC0C,EADgC,KAE/CC,EAAsDJ,EAAtDI,IAAKC,EAAiDL,EAAjDK,YAAavC,EAAoCkC,EAApClC,GAAIwC,EAAgCN,EAAhCM,SAAUC,EAAsBP,EAAtBO,SAAUzD,EAAYkD,EAAZlD,QAelD,OACE,kBAAC,IAAD,CACE0D,WAAYb,EACZ7C,QAASA,EACT2D,SAZiB,SAAAhD,GACnBA,EAAeiD,OAAS5C,EACxBqC,EAAkB1C,GAClB,IAAMJ,EAAQG,YAAeC,GAC7B6C,EAASjD,GACTkD,EAAS9C,EAAgB2C,EAAItC,GAAIuC,IAQ/BhD,MAAOI,EACPd,YAAY,WACZgE,cAAY,EACZC,aAAW,OC5BJC,EAAU,SAACN,EAAUzD,GAAX,MAAuB,CAC5C,CAAEd,UAAW,KAAMC,KAAM,KAAMC,UAAU,EAAOqB,QAAQ,EAAMuD,MAAO,iBAAM,WAC3E,CAAE9E,UAAW,YAAaC,KAAM,KAAMC,UAAU,EAAO4E,MAAO,iBAAM,WACpE,CACE9E,UAAW,gBACXC,KAAM,cACN6E,MAAO,iBAAM,UACbC,eAAgB,SAACC,EAAa3D,EAAO+C,EAAKhE,EAAQ6E,EAAUZ,GAA5C,OACd,kBAAC,EAAD,iBACMW,EADN,CAEElD,GAAIuC,EACJD,IAAKA,EACLa,SAAUA,EACVZ,YAAaA,EACbhD,MAAOA,EACPkD,SAAUA,EACVzD,QAASA,EACToE,OAAQC,MAGZhF,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,SAE/C,CACEN,UAAW,gBACXC,KAAM,cACN6E,MAAO,iBAAM,UACbC,eAAgB,SAACC,EAAa3D,EAAO+C,EAAKhE,EAAQ6E,EAAUZ,GAA5C,OACd,kBAAC,EAAD,iBACMW,EADN,CAEElD,GAAIuC,EACJD,IAAKA,EACLa,SAAUA,EACVZ,YAAaA,EACbhD,MAAOA,EACPkD,SAAUA,EACVzD,QAASA,EACToE,OAAQC,MAGZhF,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,SAE/C,CAAEN,UAAW,YAAaC,KAAM,eAAgBE,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,SAC7F,CACEN,UAAW,aACXC,KAAM,cACN6E,MAAO,iBAAM,UACb3E,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,QAC7CS,OAAQ,CACNC,KAAMC,OAAKC,OACXJ,QAAS,6BACNsE,cACAC,MAAM,IACNC,KAAI,SAAAC,GACH,MAAO,CAAElE,MAAOkE,EAAGjE,MAAOiE,QAIlC,CACEvF,UAAW,QACXC,KAAM,WACN6E,MAAO,iBAAM,UACb3E,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,SAC7CS,OAAQ,CACNC,KAAMC,OAAKuE,SACXnE,MAAO,SAWToE,MAAO,SAACC,EAAStB,EAAKa,EAAUZ,GAC9B,GAAgB,OAAZqB,EAAkB,MAAO,CAAEC,gBAAiB,aAGpD,CACE3F,UAAW,QACXC,KAAM,WACN6E,MAAO,iBAAM,UACb3E,YAAa,SAACC,EAAQC,GAAT,MAAuB,CAAEC,MAAO,SAC7CS,OAAQ,CACNC,KAAMC,OAAKuE,SACXnE,MAAO,SAWToE,MAAO,SAACC,EAAStB,EAAKa,EAAUZ,GAC9B,GAAgB,OAAZqB,EAAkB,MAAO,CAAEC,gBAAiB,eAKzCC,EAAgB,SAAA1F,GAAQ,OACnC2F,IAAgB,CACdC,KAAM5F,EAAW,QAAU,OAC3B6F,YAAY,EACZC,cAAe,SAACC,EAAUC,EAAU9B,EAAKhE,GAEd,kBAArBA,EAAOJ,WAAsD,kBAArBI,EAAOJ,WACnD,sBAAC,4BAAAmG,EAAA,sEACwBC,MAAM,eAAgB,CAC3CC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUrC,KAJxB,cACOsC,EADP,gBAMOA,EAASC,OANhB,0CAAD,OAWC,SAASC,IACd,MAAO,CACL9E,GAAI,KACJ+E,UAAW,KACXC,IAAK,KACLC,QAASlF,cACTmF,QAASnF,cACToF,UAAW,GACXC,WAAY,GACZC,MAAO,KACPC,MAAO,MAIJ,IAAMC,EAAS,uCAAG,WAAMP,GAAN,uBAAAX,EAAA,sEAEFC,MAAM,0BAAD,OAA2BU,GAAO,CAC1DT,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAJN,cAEnBI,EAFmB,gBAMJA,EAASC,OANL,cAMjBW,EANiB,gBAQNlB,MAAMU,EAAG,8BAA0BA,GAAQ,sBAAuB,CACjFT,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAVN,cAQvBI,EARuB,iBAYFA,EAASC,OAZP,eAYjBY,EAZiB,OAajBC,EAbiB,sBAaHD,GAbG,CAaK1F,YAAe,sBAC3C4F,QAAQC,IAAI,gBAAiBH,GAdN,UAiBNnB,MAAM,sBAAD,OAAuBU,GAAO,CAClDT,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAnBN,eAiBvBI,EAjBuB,iBAqBEA,EAASC,OArBX,eAqBjBgB,EArBiB,yBAuBhB,CAAEL,OAAME,UAASG,eAvBD,4CAAH,sDA0BTC,EAAa,SAACC,EAAgBf,GACzC,sBAAC,8BAAAX,EAAA,sEACwBC,MAAM,0BAAD,OAA2BU,GAAO,CAC5DT,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAH9B,cACOI,EADP,gBAKsBA,EAASC,OAL/B,OAKOY,EALP,OAMCM,EAAeN,GANhB,0CAAD,IA2BF,IAAMpC,EAAe,CAEnB2C,OAAQ,SAACC,EAAUC,GAAX,sBACHD,EADG,CAENpC,gBAAiB,QACjBsC,MAAO,QACP,UAAW,CACTtC,gBAAiB,UACjBsC,MAAO,YAGXC,QAAS,SAAAH,GAAQ,sBAAUA,EAAV,CAAoBI,OAAQ,QAASC,aAAc,UACpEC,YAAa,SAACN,EAAUC,GAAX,sBAA2BD,IACxCO,eAAgB,SAAAP,GAAQ,sBAAUA,EAAV,CAAoBI,OAAQ,OAAQI,SAAU,c,yPC9LzDC,EAbgC,SAAC,GAAqC,IAAnCb,EAAkC,EAAlCA,WAChD,OAAOA,EACL,4BACE,2BACE,+BACG,uCAASA,QAAT,IAASA,OAAT,EAASA,EAAY/F,KAAKwD,eAD7B,IAEE,qCAAW5C,YAA4BmF,EAAYc,cAIvD,M,QCeSC,EAvB2B,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,OAAQC,EAAiD,EAAjDA,cAAe7I,EAAkC,EAAlCA,WAE5DyH,EAAUoB,EAAgB,EAC1BC,EAAOrB,EAFO,IAE+BA,EAAU,EAC7D,OAAKoB,EACEpB,GAJa,EAKlB,oCACE,uEACA,kBAACsB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASL,EAAQM,UAAWlJ,GAAtD,oBAKF,oCACE,2CAAiByH,EAAjB,iFACA,2BAAa,IAATqB,EAAa,oCAAb,mCAA+EA,IACnF,kBAAC,IAAD,CAAMK,GAAI,WACR,kBAACJ,EAAA,EAAD,CAAQC,QAAQ,WAAhB,wBAbqB,M,kCC2ddI,UAzdI,WAAM,IAEfrC,EAAQsC,cAARtC,IACJuC,EAAiBC,cAHE,EAOWpF,mBAAS,CAAE8D,OAAO,EAAOuB,QAAS,gBAP7C,mBAOhBC,EAPgB,KAOLC,EAPK,KAQjBC,EAAsB,CAAEH,QAAS,GAAIvI,KAAM,WAR1B,EASOkD,mBAASwF,GAThB,mBAShBH,EATgB,KASPI,EATO,OAWCzF,mBAAS,CAAEyD,WAAY,KAAML,KAAM,GAAIE,QAAS,KAXjD,mBAWhBoC,EAXgB,KAWVC,EAXU,OAYiB3F,mBAAS,IAZ1B,mBAYhB4F,EAZgB,KAYFC,EAZE,OAciB7F,mBAAS,GAd1B,mBAchB8F,EAdgB,KAcFC,EAdE,OAemB/F,mBAAS,GAf5B,mBAehBgG,EAfgB,KAeDC,EAfC,KAuBvB,SAASC,EAAiBb,GACxBE,EAAa,CAAEzB,OAAO,EAAOuB,YAC7BI,EAAW,CAAEJ,UAASvI,KAAM,WAC5BqJ,YAAW,kBAAMV,EAAWD,KAAsB,KAEpD,SAASY,EAAmBf,GAC1BE,EAAa,CAAEzB,OAAO,EAAOuB,YAC7BI,EAAW,CAAEJ,UAASvI,KAAM,YAC5BqJ,YAAW,kBAAMV,EAAWD,KAAsB,KA/B7B,SAkCRf,EAlCQ,8EAkCvB,WAAsB4B,GAAtB,mBAAApE,EAAA,sEAEIsD,EAAa,CAAEzB,OAAO,EAAMuB,QAAS,4BAC/BiB,EAAW5D,eACRE,IAAMA,EAJnB,SAK2BV,MAAM,eAAgB,CAC3CC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU+D,KAR3B,cAKU9D,EALV,gBAUyBA,EAASC,OAVlC,OAUUY,EAVV,OAWIiD,EAAS1I,GAAKyF,EAAOzF,GACrB0I,EAAS3D,UAAY0D,GAASX,EAAKtC,KAAKhE,OAAS,EACjDuG,GAAQ,SAAAY,GAAO,MAAK,CAClB9C,WAAY8C,EAAQ9C,WACpBL,KAAK,CAAEkD,GAAH,mBAAgBC,EAAQnD,OAC5BE,QAASiD,EAAQjD,YAEnB8C,EAAmB,iBAlBvB,kDAoBIF,EAAiB,wBApBrB,2DAlCuB,+BA0DRM,KA1DQ,8EA0DvB,8BAAAvE,EAAA,sDACMoE,EAAQX,EAAKtC,KAAKhE,OAAS,EACtBqH,EAAK,EAFhB,YAEmBA,EAAKT,GAFxB,gCAGUvB,EAAO4B,GAHjB,OAIIA,IAJJ,OAEuCI,IAFvC,sBAMER,EAAiB,GANnB,6CA1DuB,+BAmERS,KAnEQ,8EAmEvB,8BAAAzE,EAAA,sEAEIsD,EAAa,CACXzB,OAAO,EACPuB,QAASO,EAAaxG,OAAS,EAAI,+BAAiC,gCAGlEkE,EAAU,GACdsC,EAAae,SAAQ,SAAAtF,GACfA,EAAEwB,QAAQjF,IAAI0F,EAAQsD,KAAKvF,EAAEwB,SAC7BxB,EAAEyB,QAAQlF,IAAI0F,EAAQsD,KAAKvF,EAAEyB,YAE/BQ,GACFqC,GAAQ,SAAAY,GAAO,MAAK,CAClB9C,WAAY8C,EAAQ9C,WACpBL,KAAMmD,EAAQnD,KACdE,QAAS,UAAIA,EAAJ,YAAgBiD,EAAQjD,UAASuD,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGtJ,MAAMwJ,cAAcD,EAAGvJ,cAhB7F,SAmB2B0E,MAAM,eAAgB,CAC3CC,OAAQ,SACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUqD,KAtB3B,cAmBUpD,EAnBV,iBAwBUA,EAASC,OAxBnB,QA0BIkD,GAAQ,SAAAY,GAAO,MAAK,CAClB9C,WAAY8C,EAAQ9C,WACpBL,KAAMmD,EAAQnD,KAAK7G,QAAO,SAAA2D,GAAG,OAAK0F,EAAaqB,MAAK,SAAAC,GAAW,OAAIA,EAAYtJ,KAAOsC,EAAItC,SAC1F0F,QAASiD,EAAQjD,YAGnB8C,EAAmBR,EAAaxG,OAAS,EAAI,mBAAqB,mBAhCtE,kDAkCI8G,EAAiB,6BAlCrB,QAqCEL,EAAgB,IArClB,2DAnEuB,sBA4GvB,SAASsB,GAAcC,EAAQC,GACzBD,GAAUA,EAAOxJ,GACfyJ,EAASzJ,GACX+H,GAAQ,SAAAY,GAAO,MAAK,CAClB9C,WAAY8C,EAAQ9C,WACpBL,KAAMmD,EAAQnD,KACdE,QAAS,sBAAIiD,EAAQjD,QAAQ/G,QAAO,SAAA8E,GAAC,OAAIA,EAAEzD,KAAOyJ,EAASzJ,OAAlD,CAAuDwJ,IAAQP,MAAK,SAACC,EAAIC,GAAL,OAC3ED,EAAGtJ,MAAMwJ,cAAcD,EAAGvJ,cAI9BmI,GAAQ,SAAAY,GAAO,MAAK,CAClB9C,WAAY8C,EAAQ9C,WACpBL,KAAMmD,EAAQnD,KACdE,QAAS,sBAAIiD,EAAQjD,SAAZ,CAAqB8D,IAAQP,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGtJ,MAAMwJ,cAAcD,EAAGvJ,cAE9E6J,EAASzJ,IAChB+H,GAAQ,SAAAY,GAAO,MAAK,CAClB9C,WAAY8C,EAAQ9C,WACpBL,KAAMmD,EAAQnD,KACdE,QAASiD,EAAQjD,QAAQ/G,QAAO,SAAA8E,GAAC,OAAIA,EAAEzD,KAAOyJ,EAASzJ,UA9G7D0J,qBAAU,WACR,sBAAC,sBAAArF,EAAA,kEAAY0D,EAAZ,SAA0BxC,YAAUP,GAApC,sGAAD,KACC,CAACA,IAgHJ,IAAMvC,GAAW,SAACkH,EAAiBxG,EAAUZ,GAC3C,IAAMqH,EAAiB9B,EAAKtC,KAAKhC,KAAI,SAAAqG,GACnC,GAAIA,EAAW7J,KAAOmD,EAAU,CAC9B,IAAIb,EAAMuH,EA0BV,OAzBoB,IAAhBtH,EACEoH,EAAgB3J,IAAMsC,EAAI4C,SAAW5C,EAAI4C,QAAQlF,KAAO2J,EAAgB3J,IAE1EsC,EAAI2C,QAAUlF,cACduI,EAAiB,4DAGjBiB,GAAcjH,EAAI2C,QAAS0E,GAC3BrH,EAAI2C,QAAU0E,GAGZA,EAAgB3J,IAAMsC,EAAI2C,SAAW3C,EAAI2C,QAAQjF,KAAO2J,EAAgB3J,IAC1EsC,EAAI4C,QAAUnF,cACduI,EAAiB,4DAEjBiB,GAAcjH,EAAI4C,QAASyE,GAC3BrH,EAAI4C,QAAUyE,GAIlBrF,MAAM,eAAgB,CACpBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUrC,KAEhBA,EACF,OAAOuH,KAEhB9B,GAAQ,SAAAY,GAAO,MAAK,CAClB9C,WAAY8C,EAAQ9C,WACpBL,KAAMoE,EACNlE,QAASiD,EAAQjD,aAIfoE,GAAe,SAACxH,EAAKyH,GACzB9B,GAAgB,SAAAD,GACd,IAAMgC,IAAQhC,EAAaqB,MAAK,SAAA5F,GAAC,OAAIA,EAAEzD,KAAOsC,EAAItC,MAClD,OAAI+J,EACKC,EAAQhC,EAAH,CAAmB1F,GAAnB,mBAA2B0F,IAEhCgC,EAAQhC,EAAarJ,QAAO,SAAA8E,GAAC,OAAIA,EAAEzD,KAAOsC,EAAItC,MAAMgI,MAK3DiC,GAAY,uCAAG,oCAAA5F,EAAA,yDACdW,IACHsD,EAAiB,kEACjBC,YAAW,kBAAMhB,EAAeyB,KAAK,OAAM,QAIzClB,EAAKtC,KAAKhE,OAAS,GAPJ,uBAQjB8G,EAAiB,+DARA,6BAac,KAD3B4B,EAAoBpC,EAAKtC,KAAK7G,QAAO,SAAA8E,GAAC,OAAKA,EAAE2B,YAA+B,KAAjB3B,EAAE2B,cAAmB5B,KAAI,SAAAC,GAAC,OAAIA,EAAEsB,cAC3EvD,OAbH,uBAcjB8G,EAAiB,YAAD,OAEiB,IAA7B4B,EAAkB1I,OAAe,WAAa,YAFlC,YAGV0I,EAHU,iCAdC,6BAwBS,KADtBC,EAAerC,EAAKtC,KAAK7G,QAAO,SAAA8E,GAAC,OAAqB,OAAjBA,EAAEwB,QAAQjF,IAAgC,OAAjByD,EAAEyB,QAAQlF,MAAawD,KAAI,SAAAC,GAAC,OAAIA,EAAEsB,cACrFvD,OAxBE,wBAyBjB8G,EAAiB,wBAAD,OAEY,IAAxB6B,EAAa3I,OAAe,aAAe,cAF/B,YAGV2I,EAHU,oBAzBC,2BAyCnB,IAASC,KAPkB,EACvBC,EAAe,GACbC,EAAexC,EAAKtC,KAAK+E,QAAO,SAACC,EAAUlI,GAG/C,OAFIA,EAAI8C,cAAcoF,EAAUA,EAASlI,EAAI8C,cACxCoF,EAASlI,EAAI8C,YAAc,EACzBoF,IACN,IAEGF,EAAaF,IARQ,GAQ0BC,EAAarB,KAAKoB,GA1CpD,KA4CfC,EAAa7I,OAAS,GA5CP,wBA6CjB8G,EAC0B,IAAxB+B,EAAa7I,OAAb,oBACiB6I,EADjB,kCACuDI,EADvD,8BAEgBJ,EAFhB,oCAEwDI,EAFxD,YA9Ce,kCAsDnB3C,EAAKjC,WAAWc,SAAWhG,IAAmBG,OAtD3B,oBAwDXwD,MAAM,sBAAuB,CACjCC,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUmD,EAAKjC,cA3DX,2DA8DjBF,QAAQC,IAAI,iBAAZ,MA9DiB,QAiEnB2B,EAAeyB,KAAf,kBAA+BhE,IAjEZ,2DAAH,qDAwElB,IAAM0F,GAAY,CAChB1G,KAAM,WACNvB,SAAUqH,GACVa,YAAa,SAACZ,EAAYvE,GAAb,OAAsBA,EAAKuD,SAAQ,SAAAzG,GAAG,OAAIwH,GAAaxH,EAAKyH,OACzEpG,MAAO,CAAEE,gBAAiB,YAlQL,SAqQR+G,KArQQ,8EAqQvB,4BAAAvG,EAAA,sEAEIsD,EAAa,CAAEzB,OAAO,EAAMuB,QAAS,2BAFzC,SAG2BnD,MAAM,iBAAkB,CAC7CC,OAAQ,SACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEK,UAN7B,cAGUJ,EAHV,gBAQUA,EAASC,OARnB,OAUIiD,EAAKjC,WAAWc,SAAWhG,IAAmBE,eAC9CyD,MAAM,qBAAsB,CAC1BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUmD,EAAKjC,cAE5B2C,EAAmB,4BAhBvB,kDAkBIF,EAAiB,+BAlBrB,2DArQuB,+BA2RRuC,KA3RQ,8EA2RvB,oCAAAxG,EAAA,yDACO6D,EADP,uBAEII,EAAiB,gDAFrB,0BASE,IAASG,KAJTd,EAAa,CAAEzB,OAAO,EAAMuB,QAAS,4BACjCkB,EAAU,EACRmC,EAAQ,6BAA6BxH,cAAcC,MAAM,IAC3DwH,EAAU,GACIjD,EAAKtC,KAAM,CACvBlD,EAAMwF,EAAKtC,KAAKiD,GAGhBE,GAAWT,IAAcS,EAAU,GACvCrG,EAAG,WAAiBwI,EAAMnC,GAC1BA,IACA,IACErE,MAAM,eAAgB,CACpBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUrC,KAEvByI,EAAQ/B,KAAK1G,GACb,MAAO0I,GACP1C,EAAiB,UACjByC,EAAQ/B,KAAK1G,IAGjBkG,EAAmB,kCACnBT,GAAQ,SAAAY,GAAO,MAAK,CAAE9C,WAAY8C,EAAQ9C,WAAYL,KAAMuF,EAASrF,QAASiD,EAAQjD,YA7BxF,6CA3RuB,sBA2TvB,IAAMuF,GACJC,KAAKC,OAAOrD,EAAKpC,QAAQlE,OAAS,GAAK,IACjB,IAArBsG,EAAKtC,KAAKhE,OACP,EACAsG,EAAKtC,KAAK+E,QAAO,SAACa,EAAa3H,GAC7B,OAAMA,EAAEwB,UAAYxB,EAAEyB,UAAczB,EAAEwB,QAAQjF,KAAOyD,EAAEyB,QAAQlF,GAAYoL,EAAc,EACpF3H,EAAEwB,SAAYxB,EAAEwB,QAAQjF,IAAOyD,EAAEyB,SAAYzB,EAAEyB,QAAQlF,GACrDoL,EADiF,IAEvF,IAEHC,KACFrD,EAAaxG,OAAS,IAAmC,WAA7BsG,EAAKjC,WAAWc,UAAsD,WAA7BmB,EAAKjC,WAAWc,SAErF2E,GAAuB,GAQ3B,OALEA,GAFItD,EAAaxG,OAAS,EACU,WAA7BsG,EAAKjC,WAAWc,UAAsD,WAA7BmB,EAAKjC,WAAWc,SACzC,kEACG,iCAH2B,4BAQrD,kBAAC4E,EAAA,EAAeC,SAAhB,MACG,gBAAEC,EAAF,2BACC,kBAACC,EAAA,EAAD,KACE,kBAAC,eAAD,CAAcC,KAAMjE,EAAUxB,MAAOuB,QAASC,EAAUD,UACxD,kBAACmE,EAAA,EAAD,CAAKjI,MAAO,CAAEkI,OAAQ,QAAUC,GAAI,CAAEC,KAAM,IAC1C,kBAACL,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUC,KAAX,CAAgBC,QAAM,EAACjF,QAAQ,UAAUC,QAAS+C,IAAlD,YAgBA,kBAACkC,EAAA,EAAD,CAAgBC,UAAU,QAAQC,IAAI,QAAQC,QAAS,kBAACC,EAAA,EAAD,KAAUjB,KAC/D,0BAAMkB,UAAU,iBAAiBtF,QAAS4B,IACxC,kBAACkD,EAAA,EAAUC,KAAX,CACEC,QAAM,EACNjF,QAAQ,SACRtD,MAAO,CAAE8I,cAAe,QACxBtF,SAAUkE,KAAmBpN,YAAWwN,IAJ1C,kBAMkBJ,MAKtB,kBAACW,EAAA,EAAUC,KAAX,CAAgBC,QAAM,EAACjF,QAAQ,SAASC,QAAS0D,GAAczD,UAAWlJ,YAAWwN,IAArF,mBAMN,kBAACG,EAAA,EAAD,CAAKjI,MAAO,CAAEkI,OAAQ,SACpB,kBAACH,EAAA,EAAD,CAAK/H,MAAO,CAAE+I,QAASzO,YAAWwN,GAAW,OAAS,SACpD,kBAACG,EAAA,EAAD,KACE,kBAACe,EAAA,EAAD,CAAYhK,SAAU,SAAAc,GAAC,OAAI0E,EAAgB1E,EAAEmJ,OAAOrN,SAClD,kBAACoN,EAAA,EAAWE,QAAZ,KACE,kBAACF,EAAA,EAAWG,KAAZ,wCAEF,kBAACC,EAAA,EAAD,CACElO,YACEiJ,EAAKtC,KAAKhE,OAAS,EACf,4BADJ,iCAE8B0J,KAAKC,MAAMrD,EAAKtC,KAAKhE,OAAS,GAF5D,MAIFwL,aAAW,mBACX7F,SAAUW,EAAKtC,KAAKhE,OAAS,IAE/B,kBAACmL,EAAA,EAAWM,OAAZ,KACE,kBAACjG,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS2D,GACT1D,UACGe,GAAgBA,EAAegD,KAAKC,MAAMrD,EAAKtC,KAAKhE,OAAS,IAAMsG,EAAKtC,KAAKhE,OAAS,GAJ3F,aAYN,kBAACoK,EAAA,EAAD,KACE,kBAACe,EAAA,EAAD,CAAYhK,SAAU,SAAAc,GAAC,OAAI4E,EAAiB5E,EAAEmJ,OAAOrN,SACnD,kBAACoN,EAAA,EAAWE,QAAZ,KACE,kBAACF,EAAA,EAAWG,KAAZ,yBAEF,kBAACC,EAAA,EAAD,CACE5F,SAAU8D,IAAiB,EAC3BpM,YACEoM,IAAiB,EACb,sCADJ,+CAE4CA,GAF5C,MAIF+B,aAAW,mBACXzN,MAAO6I,GAAiB,KAE1B,kBAACuE,EAAA,EAAWM,OAAZ,KACE,kBAACjG,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,SAAAzD,GAAC,OAAI4E,EAAiB4C,KAC/B9D,SAAUiB,EAAgB6C,IAH5B,OAOA,kBAACjE,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS0B,GACTzB,UAAWiB,GAAiBA,EAAgB6C,IAH9C,cAWR,kBAACS,EAAA,EAAD,KACE,kBAAC,IAAD,CACEwB,YAAU,EACVC,SAAS,KACTrF,KAAMA,EAAKtC,KACXzC,QAASA,YAAQN,GAAUqF,EAAKpC,SAChC0H,SAAUtJ,YAAc7F,YAAWwN,IACnCf,UAAWA,GACX2C,iBACE,kBAAC,EAAD,CACEpP,WAAYA,YAAWwN,GACvB5E,OAAQ,kBAAMA,KACdC,cAAegB,EAAKpC,QAAQlE,SAGhC8L,QAAS,kBAAC,EAAD,CAAazH,WAAYiC,EAAKjC,aACvCpH,cAAc,yCACd8O,SAAO,EACPC,OAAK,MAIX,kBAAC5B,EAAA,EAAD,CAAKjI,MAAO,CAAEkI,OAAQ,QAAUC,GAAI,GAClC,kBAAC,eAAD,CAAcrE,QAASA,EAAQA,QAASvI,KAAMuI,EAAQvI","file":"static/js/8.c9b702a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { textFilter, selectFilter } from 'react-bootstrap-table2-filter';\r\nimport { Type } from 'react-bootstrap-table2-editor';\r\n\r\n// options for role column\r\nconst selectOptions = {\r\n  Portiere: 'Portiere',\r\n  Attaccante: 'Attaccante',\r\n  Master: 'Master'\r\n};\r\n\r\n// Filter\r\nlet nameFilter;\r\nlet surnameFilter;\r\nlet aliasFilter;\r\nlet roleFilter;\r\nlet emailFilter;\r\nlet phoneFilter;\r\n\r\nexport function clearAllFilter() {\r\n  nameFilter('');\r\n  surnameFilter('');\r\n  aliasFilter('');\r\n  roleFilter('');\r\n  emailFilter('');\r\n  phoneFilter('');\r\n}\r\n\r\n// Columns default\r\nconst playerColumns = isEditable => [\r\n  { dataField: 'id', text: 'ID', editable: false, headerStyle: (column, colIndex) => ({ width: '3%' }) },\r\n  {\r\n    dataField: 'name',\r\n    text: 'Nome',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '16%' : '25%' }),\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (nameFilter = filter)\r\n    })\r\n  },\r\n  {\r\n    dataField: 'surname',\r\n    text: 'Cognome',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '16%' : '25%' }),\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (surnameFilter = filter)\r\n    })\r\n  },\r\n  {\r\n    dataField: 'alias',\r\n    text: 'Alias',\r\n    headerClasses: 'player-table-header-element',\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '17%' : '25%' }),\r\n    autoSelectText: true,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (aliasFilter = filter)\r\n    })\r\n  },\r\n  {\r\n    dataField: 'role',\r\n    text: 'Roulo',\r\n    headerClasses: 'player-table-header-element',\r\n    headerStyle: (column, colIndex) => ({ width: `${isEditable ? '11' : '15'}%` }),\r\n    filter: selectFilter({\r\n      placeholder: 'Filtra...',\r\n      options: selectOptions,\r\n      getFilter: filter => (roleFilter = filter)\r\n    }),\r\n    editor: {\r\n      type: Type.SELECT,\r\n      getOptions: _ => {\r\n        return [\r\n          { value: 'Portiere', label: 'Portiere' },\r\n          { value: 'Attaccante', label: 'Attaccante' },\r\n          { value: 'Master', label: 'Master' }\r\n        ];\r\n      }\r\n    }\r\n  },\r\n  {\r\n    dataField: 'email',\r\n    text: 'Email',\r\n    headerStyle: (column, colIndex) => ({ width: '20%' }),\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    hidden: !isEditable,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (emailFilter = filter)\r\n    })\r\n  },\r\n  {\r\n    dataField: 'phone',\r\n    headerStyle: (column, colIndex) => ({ width: '10%' }),\r\n    text: 'Telefono',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    hidden: !isEditable,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (phoneFilter = filter)\r\n    })\r\n  },\r\n  { dataField: 'match_played', text: 'Partite Giocate', hidden: true },\r\n  { dataField: 'match_won', text: 'Vittorie', hidden: true },\r\n  { dataField: 'total_score', text: 'Punteggio', hidden: true }\r\n];\r\n\r\nexport default playerColumns;\r\n\r\n// Custom export button\r\nexport const ExportCSVButton = props => {\r\n  return (\r\n    <Button disabled className=\"btn btn-success\" onClick={() => props.onExport()}>\r\n      Esporta in CSV\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const fetchPlayers = (setterFunction, tId) => {\r\n  (async () => {\r\n    const response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const result = await response.json();\r\n    const model = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n    console.log('fetchPlayers.result : ', model);\r\n    setterFunction(model);\r\n  })();\r\n};\r\n\r\nexport function valueFormatter(selectedOption) {\r\n  let value = '';\r\n  if (!selectedOption) return '';\r\n  if (selectedOption.alias) {\r\n    value = selectedOption.alias;\r\n  } else {\r\n    value = selectedOption.surname ? `${selectedOption.name} - ${selectedOption.surname}` : selectedOption.name;\r\n  }\r\n  return value;\r\n}\r\n\r\nexport function getEmptyPlayer(label) {\r\n  return {\r\n    id: null,\r\n    name: '',\r\n    surname: '',\r\n    alias: '',\r\n    label: label || '',\r\n    role: 'Portiere',\r\n    email: '',\r\n    phone: '',\r\n    match_played: 0,\r\n    match_won: 0,\r\n    total_score: 0,\r\n    editable: false\r\n  };\r\n}\r\n","import { TournamentProgress } from '../Tournament/type';\r\n\r\nexport const getTodayDate = () => formatDate(new Date());\r\n\r\nexport function translateTournamentProgress(value: string) {\r\n  switch (value) {\r\n    case TournamentProgress.New:\r\n      return 'Nuovo';\r\n    case TournamentProgress.PairsSelection:\r\n      return 'Selezione Coppie';\r\n    case TournamentProgress.Stage1:\r\n      return 'Fase 1';\r\n    case TournamentProgress.Stage2:\r\n      return 'Fase 2';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport function formatDate(date: Date) {\r\n  var d = new Date(date),\r\n    month = '' + (d.getMonth() + 1),\r\n    day = '' + d.getDate(),\r\n    year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = '0' + month;\r\n  if (day.length < 2) day = '0' + day;\r\n\r\n  return [year, month, day].join('/');\r\n}\r\n\r\nexport function getRandomIntInclusive(min: number, max: number) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\r\n}\r\n\r\nexport const phoneRegExp = new RegExp('^d{10}$');\r\nexport const passwordRegExp = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,16})');\r\nexport const emailRegExp = new RegExp(\r\n  // eslint-disable-next-line quotes\r\n  \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"\r\n);\r\n","import { PairModel } from '../Pair/type';\r\n\r\nexport type TournamentProgressType = 'New' | 'PairsSelection' | 'Stage1' | 'Stage2';\r\n\r\nexport type TournamentModel = {\r\n  id: number;\r\n  name: string;\r\n  date: Date;\r\n  progress: TournamentProgressType;\r\n  public: boolean;\r\n  label: string;\r\n  ownerId?: number;\r\n  pairs?: PairModel[];\r\n};\r\n\r\nexport type selectOptions = {\r\n  label: string;\r\n  value: string;\r\n  data: TournamentModel;\r\n};\r\n\r\nexport const TournamentProgress = { New: 'New', PairsSelection: 'PairsSelection', Stage1: 'Stage1', Stage2: 'Stage2' };\r\n","import React, { useState } from 'react';\r\nimport Select from 'react-select';\r\nimport { valueFormatter } from './helper';\r\nimport makeAnimated from 'react-select/animated';\r\n\r\n// Probabilmente il componente Select usa Ref.... Lascio cosi..\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst PlayerSelection = React.forwardRef((props, ref) => {\r\n  const [selectedOption, setSelectedOption] = useState();\r\n  const { row, columnIndex, id, onUpdate, onSelect, options } = props;\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  function getValue() {\r\n    return valueFormatter(selectedOption);\r\n  }\r\n\r\n  const handleChange = selectedOption => {\r\n    selectedOption.pairId = id;\r\n    setSelectedOption(selectedOption);\r\n    const value = valueFormatter(selectedOption);\r\n    onUpdate(value);\r\n    onSelect(selectedOption, row.id, columnIndex);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      components={animatedComponents}\r\n      options={options}\r\n      onChange={handleChange}\r\n      value={selectedOption}\r\n      placeholder=\"Cerca...\"\r\n      isSearchable\r\n      isClearable\r\n    />\r\n  );\r\n});\r\n\r\nexport default PlayerSelection;\r\n","import React from 'react';\r\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\nimport PlayerSelect from '../Player/select';\r\nimport { getEmptyPlayer } from '../Player/helper';\r\n\r\nexport const columns = (onSelect, options) => [\r\n  { dataField: 'id', text: 'ID', editable: false, hidden: true, align: () => 'center' },\r\n  { dataField: 'rowNumber', text: 'ID', editable: false, align: () => 'center' },\r\n  {\r\n    dataField: 'player1.alias',\r\n    text: 'Giocatore 1',\r\n    align: () => 'center',\r\n    editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\r\n      <PlayerSelect\r\n        {...editorProps}\r\n        id={columnIndex}\r\n        row={row}\r\n        rowIndex={rowIndex}\r\n        columnIndex={columnIndex}\r\n        value={value}\r\n        onSelect={onSelect}\r\n        options={options}\r\n        styles={customStyles}\r\n      />\r\n    ),\r\n    headerStyle: (column, colIndex) => ({ width: '20%' })\r\n  },\r\n  {\r\n    dataField: 'player2.alias',\r\n    text: 'Giocatore 2',\r\n    align: () => 'center',\r\n    editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\r\n      <PlayerSelect\r\n        {...editorProps}\r\n        id={columnIndex}\r\n        row={row}\r\n        rowIndex={rowIndex}\r\n        columnIndex={columnIndex}\r\n        value={value}\r\n        onSelect={onSelect}\r\n        options={options}\r\n        styles={customStyles}\r\n      />\r\n    ),\r\n    headerStyle: (column, colIndex) => ({ width: '20%' })\r\n  },\r\n  { dataField: 'pairAlias', text: 'Alias Coppia', headerStyle: (column, colIndex) => ({ width: '25%' }) },\r\n  {\r\n    dataField: 'stage1Name',\r\n    text: 'Nome girone',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '10%' }),\r\n    editor: {\r\n      type: Type.SELECT,\r\n      options: 'abcdefghijklmnopqrstuvwxyz'\r\n        .toUpperCase()\r\n        .split('')\r\n        .map(e => {\r\n          return { value: e, label: e };\r\n        })\r\n    }\r\n  },\r\n  {\r\n    dataField: 'paid1',\r\n    text: 'Pagato 1',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '7,5%' }),\r\n    editor: {\r\n      type: Type.CHECKBOX,\r\n      value: 'Si:No'\r\n    },\r\n    /*\r\n    formatter: (cell, row, rowIndex) => {\r\n      console.log(cell);\r\n      return (\r\n        <InputGroup>\r\n          <InputGroup.Checkbox style={{ margin: 'auto' }} onCancechecked={cell}></InputGroup.Checkbox>\r\n        </InputGroup>\r\n      );\r\n    },*/\r\n    style: (content, row, rowIndex, columnIndex) => {\r\n      if (content !== 'Si') return { backgroundColor: '#ffbf47' };\r\n    }\r\n  },\r\n  {\r\n    dataField: 'paid2',\r\n    text: 'Pagato 2',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '7,5%' }),\r\n    editor: {\r\n      type: Type.CHECKBOX,\r\n      value: 'Si:No'\r\n    },\r\n    /*\r\n    formatter: (cell, row, rowIndex) => {\r\n      console.log(cell);\r\n      return (\r\n        <InputGroup>\r\n          <InputGroup.Checkbox style={{ margin: 'auto' }} onCancechecked={cell}></InputGroup.Checkbox>\r\n        </InputGroup>\r\n      );\r\n    },*/\r\n    style: (content, row, rowIndex, columnIndex) => {\r\n      if (content !== 'Si') return { backgroundColor: '#ffbf47' };\r\n    }\r\n  }\r\n];\r\n\r\nexport const cellEditProps = editable =>\r\n  cellEditFactory({\r\n    mode: editable ? 'click' : 'none',\r\n    blurToSave: true,\r\n    afterSaveCell: (oldValue, newValue, row, column) => {\r\n      // Aggiornamento per queste due colonne viene eseguito dalla funzione onSelect\r\n      if (column.dataField === 'player1.alias' || column.dataField === 'player2.alias') return;\r\n      (async () => {\r\n        const response = await fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row)\r\n        });\r\n        await response.json();\r\n      })();\r\n    }\r\n  });\r\n\r\nexport function getEmptyRowModel() {\r\n  return {\r\n    id: null,\r\n    rowNumber: null,\r\n    tId: null,\r\n    player1: getEmptyPlayer(),\r\n    player2: getEmptyPlayer(),\r\n    pairAlias: '',\r\n    stage1Name: '',\r\n    paid1: 'No',\r\n    paid2: 'No'\r\n  };\r\n}\r\n\r\nexport const fetchData = async tId => {\r\n  // Fetch Pairs\r\n  let response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n  const rows = await response.json();\r\n\r\n  response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n  const result = await response.json();\r\n  const players = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n  console.log('playerList : ', result);\r\n\r\n  // Fetch Tournament\r\n  response = await fetch(`/api/v1/tournament/${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n  const tournament = await response.json();\r\n\r\n  return { rows, players, tournament };\r\n};\r\n\r\nexport const fetchPairs = (setterFunction, tId) => {\r\n  (async () => {\r\n    const response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const result = await response.json();\r\n    setterFunction(result);\r\n  })();\r\n};\r\n\r\nexport function valueFormatter(selectedOption) {\r\n  console.log('valueFormatter : ', selectedOption);\r\n  if (selectedOption.pairAlias && selectedOption.pairAlias !== '')\r\n    return `${selectedOption.pairAlias} ( ${selectedOption.id} )`;\r\n  return createAlias(selectedOption);\r\n}\r\n\r\nexport function createAlias(selectedOption) {\r\n  console.log('createAlias : ', selectedOption);\r\n  let value = `${selectedOption.rowNumber} : `;\r\n  const { player1, player2, id } = selectedOption;\r\n  value += player1.alias ? player1.alias : player1.name;\r\n  value += ' - ' + player2.alias ? player2.alias : player2.name;\r\n  value += ` ( ${id} )`;\r\n  return value;\r\n}\r\n\r\nconst customStyles = {\r\n  // menuList: (provided, state) => ({ ...provided, border: '1px solid #ffc107' }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: 'white',\r\n    color: 'black',\r\n    '&:hover': {\r\n      backgroundColor: '#64bd9c',\r\n      color: 'white'\r\n    }\r\n  }),\r\n  control: provided => ({ ...provided, height: '3vmin', marginBottom: '40px' }),\r\n  singleValue: (provided, state) => ({ ...provided }),\r\n  valueContainer: provided => ({ ...provided, height: '100%', fontSize: 'larger' })\r\n};\r\n","import React from 'react';\r\nimport { headerPropsType } from './type';\r\nimport { translateTournamentProgress } from '../core/utils';\r\n\r\nconst TableHeader: React.FC<headerPropsType> = ({ tournament }: headerPropsType) => {\r\n  return tournament ? (\r\n    <h3>\r\n      <p>\r\n        <b>\r\n          \"<strong>{tournament?.name.toUpperCase()}</strong>\"\r\n          <small> @ {translateTournamentProgress(tournament!.progress)}</small>\r\n        </b>\r\n      </p>\r\n    </h3>\r\n  ) : null;\r\n};\r\n\r\nexport default TableHeader;\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { noDataPropsType } from './type';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// FIXME: change to tounament name\r\nconst noData: React.FC<noDataPropsType> = ({ addRow, optionsLength, isEditable }: noDataPropsType) => {\r\n  const MIN_PLAYERS = 8;\r\n  const players = optionsLength - 1;\r\n  const diff = players < MIN_PLAYERS ? MIN_PLAYERS - players : 0;\r\n  if (!optionsLength) return null;\r\n  return players >= MIN_PLAYERS ? (\r\n    <>\r\n      <p> Aggiungi le coppie per questo torneo...</p>\r\n      <Button variant=\"success\" onClick={addRow} disabled={!isEditable}>\r\n        Aggiungi Coppia\r\n      </Button>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <p>Ci sono solo {players} giocatori definiti ma devono essercene almeno 8 per poter formare un torneo.</p>\r\n      <p>{diff === 1 ? 'Devi creare un altro giocatore...' : `Devi creare almeno altri ${diff}`}</p>\r\n      <Link to={'/player'}>\r\n        <Button variant=\"success\">Gestione Giocatori</Button>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default noData;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, ListGroup, InputGroup, FormControl, Row, Col, Tooltip, OverlayTrigger } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { fetchData, columns, cellEditProps, getEmptyRowModel } from './helper';\r\nimport { getEmptyPlayer } from '../Player/helper';\r\nimport { useParams, useHistory } from 'react-router';\r\nimport TableHeader from './header';\r\nimport NoData from './noData';\r\nimport { LoadingModal, GenericToast } from '../core/generic/Commons';\r\nimport './style.css';\r\nimport { TournamentProgress } from '../Tournament/type';\r\nimport { SessionContext, isEditable } from '../core/routing/SessionContext';\r\nconst PairsTable = () => {\r\n  // Navigation\r\n  const { tId } = useParams();\r\n  let currentHistory = useHistory();\r\n\r\n  // States\r\n  // User messages\r\n  const [isLoading, setIsLoading] = useState({ state: false, message: 'Caricamento' });\r\n  const messageInitialState = { message: '', type: 'success' };\r\n  const [message, setMessage] = useState(messageInitialState);\r\n  // Data\r\n  const [data, setData] = useState({ tournament: null, rows: [], players: [] });\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  // Function params\r\n  const [stage1Number, setStage1Number] = useState(0);\r\n  const [newRowsNumber, setNewRowsNumber] = useState(0);\r\n\r\n  // Initial Fetch\r\n  useEffect(() => {\r\n    (async () => setData(await fetchData(tId)))();\r\n  }, [tId]);\r\n\r\n  // User messages\r\n  function showErrorMessage(message) {\r\n    setIsLoading({ state: false, message });\r\n    setMessage({ message, type: 'danger' });\r\n    setTimeout(() => setMessage(messageInitialState), 5000);\r\n  }\r\n  function showSuccessMessage(message) {\r\n    setIsLoading({ state: false, message });\r\n    setMessage({ message, type: 'success' });\r\n    setTimeout(() => setMessage(messageInitialState), 5000);\r\n  }\r\n\r\n  async function addRow(index) {\r\n    try {\r\n      setIsLoading({ state: true, message: 'Aggiunta riga in corso' });\r\n      const emptyRow = getEmptyRowModel();\r\n      emptyRow.tId = tId;\r\n      const response = await fetch('/api/v1/pair', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(emptyRow)\r\n      });\r\n      const result = await response.json();\r\n      emptyRow.id = result.id;\r\n      emptyRow.rowNumber = index || data.rows.length + 1;\r\n      setData(current => ({\r\n        tournament: current.tournament,\r\n        rows: [emptyRow, ...current.rows],\r\n        players: current.players\r\n      }));\r\n      showSuccessMessage('Riga aggiunta');\r\n    } catch (error) {\r\n      showErrorMessage('Errore aggiunta riga');\r\n    }\r\n  }\r\n\r\n  async function addMultipleRows() {\r\n    let index = data.rows.length + 1;\r\n    for (let ii = 0; ii < newRowsNumber; ii++) {\r\n      await addRow(index);\r\n      index++;\r\n    }\r\n    setNewRowsNumber(0);\r\n  }\r\n\r\n  async function deleteRow() {\r\n    try {\r\n      setIsLoading({\r\n        state: true,\r\n        message: selectedRows.length > 1 ? 'Cancellazione righe in corso' : 'Cancellazione riga in corso'\r\n      });\r\n      // Devo ripristinare i giocatori eliminati\r\n      let players = [];\r\n      selectedRows.forEach(e => {\r\n        if (e.player1.id) players.push(e.player1);\r\n        if (e.player2.id) players.push(e.player2);\r\n      });\r\n      if (players)\r\n        setData(current => ({\r\n          tournament: current.tournament,\r\n          rows: current.rows,\r\n          players: [...players, ...current.players].sort((e1, e2) => e1.alias.localeCompare(e2.alias))\r\n        }));\r\n\r\n      const response = await fetch('/api/v1/pair', {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(selectedRows)\r\n      });\r\n      await response.json();\r\n\r\n      setData(current => ({\r\n        tournament: current.tournament,\r\n        rows: current.rows.filter(row => !selectedRows.find(selectedRow => selectedRow.id === row.id)),\r\n        players: current.players\r\n      }));\r\n\r\n      showSuccessMessage(selectedRows.length > 1 ? 'Righe cancellate' : 'Riga cancellata');\r\n    } catch (error) {\r\n      showErrorMessage('Errore cancellazione riga');\r\n    }\r\n\r\n    setSelectedRows([]);\r\n  }\r\n\r\n  // update players list when a player is selected\r\n  function updateOptions(player, selected) {\r\n    if (player && player.id)\r\n      if (selected.id)\r\n        setData(current => ({\r\n          tournament: current.tournament,\r\n          rows: current.rows,\r\n          players: [...current.players.filter(e => e.id !== selected.id), player].sort((e1, e2) =>\r\n            e1.alias.localeCompare(e2.alias)\r\n          )\r\n        }));\r\n      else\r\n        setData(current => ({\r\n          tournament: current.tournament,\r\n          rows: current.rows,\r\n          players: [...current.players, player].sort((e1, e2) => e1.alias.localeCompare(e2.alias))\r\n        }));\r\n    else if (selected.id)\r\n      setData(current => ({\r\n        tournament: current.tournament,\r\n        rows: current.rows,\r\n        players: current.players.filter(e => e.id !== selected.id)\r\n      }));\r\n  }\r\n  // Aggiorno la colonna con il giocatore selezionato\r\n  const onSelect = (selectedElement, rowIndex, columnIndex) => {\r\n    const newRowsElement = data.rows.map(rowElement => {\r\n      if (rowElement.id === rowIndex) {\r\n        let row = rowElement;\r\n        if (columnIndex === 1) {\r\n          if (selectedElement.id && row.player2 && row.player2.id === selectedElement.id) {\r\n            // Devo salvare l'elemnto che sto per sostituire\r\n            row.player1 = getEmptyPlayer();\r\n            showErrorMessage('Attenzione : Non puoi selezionare lo stesso giocare ! ');\r\n          } else {\r\n            // Aggiorno la lista dei giocatori disponibili prima di aggiornare i dati\r\n            updateOptions(row.player1, selectedElement);\r\n            row.player1 = selectedElement;\r\n          }\r\n        } else {\r\n          if (selectedElement.id && row.player1 && row.player1.id === selectedElement.id) {\r\n            row.player2 = getEmptyPlayer();\r\n            showErrorMessage('Attenzione : Non puoi selezionare lo stesso giocare ! ');\r\n          } else {\r\n            updateOptions(row.player2, selectedElement);\r\n            row.player2 = selectedElement;\r\n          }\r\n        }\r\n        // update Db. Non aspetto la risposta...\r\n        fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row)\r\n        });\r\n        return row;\r\n      } else return rowElement;\r\n    });\r\n    setData(current => ({\r\n      tournament: current.tournament,\r\n      rows: newRowsElement,\r\n      players: current.players\r\n    }));\r\n  };\r\n\r\n  const handleSelect = (row, isSelected) => {\r\n    setSelectedRows(selectedRows => {\r\n      const found = selectedRows.find(e => e.id === row.id) ? true : false;\r\n      if (isSelected) {\r\n        return found ? selectedRows : [row, ...selectedRows];\r\n      } else {\r\n        return found ? selectedRows.filter(e => e.id !== row.id) : selectedRows;\r\n      }\r\n    });\r\n  };\r\n\r\n  const confirmPairs = async () => {\r\n    if (!tId) {\r\n      showErrorMessage('Id torneo mancante. Verrai inviato alla Home tra 5 secondi....');\r\n      setTimeout(() => currentHistory.push('/'), 5000);\r\n    }\r\n\r\n    // Controllo che sia presente almeno una coppia\r\n    if (data.rows.length < 4) {\r\n      showErrorMessage('Numero di coppie insufficente. Devi formare almeno 4 coppie');\r\n      return;\r\n    }\r\n    // Controllo gironi non assegnati\r\n    const missingStage1Name = data.rows.filter(e => !e.stage1Name || e.stage1Name === '').map(e => e.rowNumber);\r\n    if (missingStage1Name.length !== 0) {\r\n      showErrorMessage(\r\n        `Assegna  ${\r\n          missingStage1Name.length === 1 ? 'la riga ' : 'le righe '\r\n        } ${missingStage1Name} ad un girone per procedere `\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Controllo coppie non assegnate\r\n    const missingPairs = data.rows.filter(e => e.player1.id === null || e.player2.id === null).map(e => e.rowNumber);\r\n    if (missingPairs.length !== 0) {\r\n      showErrorMessage(\r\n        `Assegna  i giocatori ${\r\n          missingPairs.length === 1 ? 'alla riga ' : 'alle righe '\r\n        } ${missingPairs} per procedere `\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Controllo che non ci siano gironi con meno di 1 coppia ( meglio spostare 3 )\r\n    const MIN_PAIR_PER_STAGE = 3;\r\n    let invalidStage = [];\r\n    const pairsInStage = data.rows.reduce((allNames, row) => {\r\n      if (row.stage1Name in allNames) allNames[row.stage1Name]++;\r\n      else allNames[row.stage1Name] = 1;\r\n      return allNames;\r\n    }, {});\r\n    for (let stageName in pairsInStage) {\r\n      if (pairsInStage[stageName] <= MIN_PAIR_PER_STAGE) invalidStage.push(stageName);\r\n    }\r\n    if (invalidStage.length > 0) {\r\n      showErrorMessage(\r\n        invalidStage.length === 1\r\n          ? `Il torneo ${invalidStage} deve contenere almeno ${MIN_PAIR_PER_STAGE + 1} coppie`\r\n          : `I torneI ${invalidStage} devono contenere almeno ${MIN_PAIR_PER_STAGE + 1} coppie`\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Update tournament progress\r\n    data.tournament.progress = TournamentProgress.Stage1;\r\n    try {\r\n      await fetch('/api/v1/tournament/', {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data.tournament)\r\n      });\r\n    } catch (error) {\r\n      console.log('errororroror :', error);\r\n    }\r\n    // Go to Stage1\r\n    currentHistory.push(`/stage1/${tId}`);\r\n  };\r\n\r\n  function goBack() {\r\n    currentHistory.push('/');\r\n  }\r\n\r\n  const selectRow = {\r\n    mode: 'checkbox',\r\n    onSelect: handleSelect,\r\n    onSelectAll: (isSelected, rows) => rows.forEach(row => handleSelect(row, isSelected)),\r\n    style: { backgroundColor: '#c8e6c9' }\r\n  };\r\n\r\n  async function deleteStage1() {\r\n    try {\r\n      setIsLoading({ state: true, message: 'Cancellazione in corso' });\r\n      const response = await fetch('/api/v1/stage1', {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ tId })\r\n      });\r\n      await response.json();\r\n      // Update tournament progress\r\n      data.tournament.progress = TournamentProgress.PairsSelection;\r\n      fetch('/api/v1/tournament', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data.tournament)\r\n      });\r\n      showSuccessMessage('Cancellazione completata');\r\n    } catch (error) {\r\n      showErrorMessage('Errore cancellazione Fase 1');\r\n    }\r\n  }\r\n\r\n  async function setStage1Name() {\r\n    if (!stage1Number) {\r\n      showErrorMessage('Specificare il numero di gironi da assegnare');\r\n      return;\r\n    }\r\n    setIsLoading({ state: true, message: 'Aggiornamento in corso ' });\r\n    let current = 0;\r\n    const names = 'abcdefghijklmnopqrstuvwxyz'.toUpperCase().split('');\r\n    let newRows = [];\r\n    for (let index in data.rows) {\r\n      let row = data.rows[index];\r\n      // FIXME: if (current === stage1Number) QUESTO NON FUNZIONA ===\r\n      // eslint-disable-next-line eqeqeq\r\n      if (current == stage1Number) current = 0;\r\n      row['stage1Name'] = names[current];\r\n      current++;\r\n      try {\r\n        fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row)\r\n        });\r\n        newRows.push(row);\r\n      } catch (error) {\r\n        showErrorMessage('Errore');\r\n        newRows.push(row);\r\n      }\r\n    }\r\n    showSuccessMessage('Gironi assegnati correttamente');\r\n    setData(current => ({ tournament: current.tournament, rows: newRows, players: current.players }));\r\n  }\r\n\r\n  const availableRows =\r\n    Math.floor((data.players.length - 1) / 2) -\r\n    (data.rows.length === 0\r\n      ? 0\r\n      : data.rows.reduce((accumulator, e) => {\r\n          if ((!e.player1 && !e.player2) || (!e.player1.id && !e.player2.id)) return accumulator + 1;\r\n          if (!e.player1 || !e.player1.id || !e.player2 || !e.player2.id) return accumulator + 0, 5;\r\n          return accumulator;\r\n        }, 0));\r\n\r\n  const deleteDisabled =\r\n    !(selectedRows.length > 0) || data.tournament.progress === 'Stage1' || data.tournament.progress === 'Stage2';\r\n\r\n  let deleteTooltipMessage = '';\r\n  if (!(selectedRows.length > 0)) deleteTooltipMessage = 'Seleziona almeno una riga';\r\n  else if (data.tournament.progress === 'Stage1' || data.tournament.progress === 'Stage2')\r\n    deleteTooltipMessage = 'Devi prima resettare i gironi per poter cancellare delle coppie';\r\n  else deleteTooltipMessage = 'Cancella le coppie selezionate';\r\n\r\n  // console.log('render table : ', data);\r\n\r\n  return (\r\n    <SessionContext.Consumer>\r\n      {([session]) => (\r\n        <Row>\r\n          <LoadingModal show={isLoading.state} message={isLoading.message} />\r\n          <Col style={{ margin: '10px' }} md={{ span: 1 }}>\r\n            <Row>\r\n              <ListGroup>\r\n                <ListGroup.Item action variant=\"primary\" onClick={confirmPairs}>\r\n                  Prosegui\r\n                </ListGroup.Item>\r\n                {/*\r\n                <ListGroup.Item action variant=\"secondary\" onClick={goBack}>\r\n                  Home\r\n                </ListGroup.Item>\r\n                <ListGroup.Item\r\n                  action\r\n                  variant=\"success\"\r\n                  onClick={() => addRow()}\r\n                  disabled={availableRows <= 0 || !isEditable(session)}\r\n                >\r\n                  Aggiungi Coppia\r\n                </ListGroup.Item>\r\n                */}\r\n                <OverlayTrigger placement=\"right\" key=\"right\" overlay={<Tooltip>{deleteTooltipMessage}</Tooltip>}>\r\n                  <span className=\"d-inline-block\" onClick={deleteRow}>\r\n                    <ListGroup.Item\r\n                      action\r\n                      variant=\"danger\"\r\n                      style={{ pointerEvents: 'none' }}\r\n                      disabled={deleteDisabled || !isEditable(session)}\r\n                    >\r\n                      Elimina Coppia {deleteDisabled}\r\n                    </ListGroup.Item>\r\n                  </span>\r\n                </OverlayTrigger>\r\n\r\n                <ListGroup.Item action variant=\"danger\" onClick={deleteStage1} disabled={!isEditable(session)}>\r\n                  Reset gironi\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Row>\r\n          </Col>\r\n          <Col style={{ margin: '10px' }}>\r\n            <Row style={{ display: isEditable(session) ? 'flex' : 'none' }}>\r\n              <Col>\r\n                <InputGroup onChange={e => setStage1Number(e.target.value)}>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Assegna gironi automaticamente</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <FormControl\r\n                    placeholder={\r\n                      data.rows.length < 4\r\n                        ? 'Inserisci almeno 4 coppie'\r\n                        : `Numero di gironi ( max ${Math.floor(data.rows.length / 4)} )`\r\n                    }\r\n                    aria-label=\"Numero di gironi\"\r\n                    disabled={data.rows.length < 4}\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      onClick={setStage1Name}\r\n                      disabled={\r\n                        !stage1Number || stage1Number > Math.floor(data.rows.length / 4) || data.rows.length < 4\r\n                      }\r\n                    >\r\n                      Esegui\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col>\r\n              <Col>\r\n                <InputGroup onChange={e => setNewRowsNumber(e.target.value)}>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Aggiungi coppie</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <FormControl\r\n                    disabled={availableRows <= 0}\r\n                    placeholder={\r\n                      availableRows <= 0\r\n                        ? 'Numero massimo di coppie gia creato'\r\n                        : `Numero di coppie da aggiungere ( max ${availableRows} )`\r\n                    }\r\n                    aria-label=\"Numero di coppie\"\r\n                    value={newRowsNumber || ''}\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      onClick={e => setNewRowsNumber(availableRows)}\r\n                      disabled={newRowsNumber > availableRows}\r\n                    >\r\n                      Max\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      onClick={addMultipleRows}\r\n                      disabled={!newRowsNumber || newRowsNumber > availableRows}\r\n                    >\r\n                      Esegui\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <BootstrapTable\r\n                bootstrap4\r\n                keyField=\"id\"\r\n                data={data.rows}\r\n                columns={columns(onSelect, data.players)}\r\n                cellEdit={cellEditProps(isEditable(session))}\r\n                selectRow={selectRow}\r\n                noDataIndication={\r\n                  <NoData\r\n                    isEditable={isEditable(session)}\r\n                    addRow={() => addRow()}\r\n                    optionsLength={data.players.length}\r\n                  />\r\n                }\r\n                caption={<TableHeader tournament={data.tournament} />}\r\n                headerClasses=\"default-background default-color-white\"\r\n                striped\r\n                hover\r\n              />\r\n            </Row>\r\n          </Col>\r\n          <Col style={{ margin: '10px' }} md={2}>\r\n            <GenericToast message={message.message} type={message.type} />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </SessionContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default PairsTable;\r\n"],"sourceRoot":""}