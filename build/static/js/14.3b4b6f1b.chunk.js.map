{"version":3,"sources":["components/core/hooks/InputHook.ts","components/core/generic/Input.tsx","components/Auth/Login.tsx"],"names":["useInput","initialValue","useState","value","setValue","reset","bind","onChange","event","currentTarget","InputField","controlId","label","placeholder","type","required","validFeedback","invalidFeedback","Group","Label","Control","Feedback","withRouter","dispatch","useDispatch","useTranslation","t","currentHistory","i18n","useHistory","validated","setValidated","username","bindUsername","password","bindPassword","handleSubmit","evt","a","preventDefault","toast","error","SessionAction","login","request","trim","history","onSubmit","noValidate","id","size","variant","className","disabled"],"mappings":"6JAKaA,EAAW,SAAgBC,GAAqB,IAAD,EAChCC,mBAAYD,GADoB,mBACnDE,EADmD,KAC5CC,EAD4C,KAE1D,MAAO,CACLD,QACAC,WACAC,MAAO,kBAAMD,EAASH,IACtBK,KAAM,CACJH,QACAI,SAAU,SAACC,GAAD,OAA6CJ,EAASI,EAAMC,cAAcN,Y,iCCb1F,+DAeaO,EAAwC,SAAC,GAAD,IACnDC,EADmD,EACnDA,UACAC,EAFmD,EAEnDA,MACAC,EAHmD,EAGnDA,YACAC,EAJmD,EAInDA,KACAC,EALmD,EAKnDA,SACAZ,EANmD,EAMnDA,MACAI,EAPmD,EAOnDA,SACAS,EARmD,EAQnDA,cACAC,EATmD,EASnDA,gBATmD,OAWnD,kBAAC,IAAKC,MAAN,CAAYP,UAAWA,GACpBC,EAAQ,kBAAC,IAAKO,MAAN,KAAaP,GAAsB,KAC5C,kBAAC,IAAKQ,QAAN,CACEL,SAAUA,EACVD,KAAMA,GAAQ,OACdD,YAAaA,EACbV,MAAOA,EACPI,SAAUA,IAEXS,EAAgB,kBAAC,IAAKI,QAAQC,SAAd,KAAwBL,GAAyC,KACjFC,EAAkB,kBAAC,IAAKG,QAAQC,SAAd,CAAuBP,KAAK,WAAWG,GAA2C,Q,4LC4C1FK,uBApEqB,WAClC,IAAMC,EAAWC,cADoC,EAEjCC,YAAe,UAA3BC,EAF6C,EAE7CA,EACFC,GAH+C,EAE1CC,KACYC,eAH8B,EAKnB3B,oBAAkB,GALC,mBAK9C4B,EAL8C,KAKnCC,EALmC,OAML/B,YAAiB,IAAlDgC,EANsC,EAM7C7B,MAAuB8B,EANsB,EAM5B3B,KAN4B,EAOLN,YAAiB,IAAlDkC,EAPsC,EAO7C/B,MAAuBgC,EAPsB,EAO5B7B,KAEnB8B,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACnBD,EAAIE,iBACCP,GAAyB,KAAbA,EAFE,uBAGjBQ,IAAMC,MAAM,gCAHK,6BAMdP,GAAyB,KAAbA,EANE,uBAOjBM,IAAMC,MAAM,wBAPK,0BAUnBV,GAAa,GACbR,EACEmB,IAAcC,MAAMC,QAAQ,CAC1BZ,SAAUA,EAASa,OACnBX,SAAUA,EAASW,OACnBC,QAASnB,KAfM,2CAAH,sDAqBlB,OACE,kBAAC,IAAD,CAAMoB,SAAUX,EAAcY,YAAU,EAAClB,UAAWA,GAClD,kBAAC,IAAD,eACEnB,UAAU,WACVC,MAAOc,EAAE,mBACTX,UAAU,EACVD,KAAK,OACLD,YAAY,oBACRoB,IAGN,kBAAC,IAAD,eACEtB,UAAU,WACVC,MAAM,WACNG,UAAU,EACVD,KAAK,WACLD,YAAY,WACZI,gBAAgB,wBACZkB,IAEN,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEc,GAAG,cACHC,KAAK,KACLC,QAAQ,kBACRC,UAAU,cACVtC,KAAK,SACLuC,UAAWrB,IAAaE,GAEvBR,EAAE","file":"static/js/14.3b4b6f1b.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { FormEventType } from '../generic/CommonTypes';\r\n\r\n// Hook per facilitare la gestione dei campi di una form nei componenti funzionali\r\n// https://rangle.io/blog/simplifying-controlled-inputs-with-hooks/\r\nexport const useInput = <T extends any>(initialValue: T) => {\r\n  const [value, setValue] = useState<T>(initialValue);\r\n  return {\r\n    value,\r\n    setValue,\r\n    reset: () => setValue(initialValue),\r\n    bind: {\r\n      value,\r\n      onChange: (event: React.ChangeEvent<FormEventType>) => setValue(event.currentTarget.value as T),\r\n    },\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { FormEventType } from './CommonTypes';\r\n\r\ninterface InputFieldProps {\r\n  controlId: string;\r\n  label?: string;\r\n  placeholder?: string;\r\n  type?: string;\r\n  required?: boolean;\r\n  value: any;\r\n  onChange: (event: React.ChangeEvent<FormEventType>) => void;\r\n  validFeedback?: string;\r\n  invalidFeedback?: string;\r\n}\r\nexport const InputField: React.FC<InputFieldProps> = ({\r\n  controlId,\r\n  label,\r\n  placeholder,\r\n  type,\r\n  required,\r\n  value,\r\n  onChange,\r\n  validFeedback,\r\n  invalidFeedback,\r\n}) => (\r\n  <Form.Group controlId={controlId}>\r\n    {label ? <Form.Label>{label}</Form.Label> : null}\r\n    <Form.Control\r\n      required={required}\r\n      type={type || 'text'}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n    {validFeedback ? <Form.Control.Feedback>{validFeedback}</Form.Control.Feedback> : null}\r\n    {invalidFeedback ? <Form.Control.Feedback type=\"invalid\">{invalidFeedback}</Form.Control.Feedback> : null}\r\n  </Form.Group>\r\n);\r\n","import { useInput } from '../core/hooks/InputHook';\r\nimport { Form, Button, Row, Col } from 'react-bootstrap';\r\nimport React, { useState } from 'react';\r\nimport { useHistory, withRouter } from 'react-router-dom';\r\nimport { SessionAction } from 'redux/actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { InputField } from '../core/generic/Input';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport interface LoginProps {}\r\n// https://medium.com/@faizanv/authentication-for-your-react-and-express-application-w-json-web-tokens-923515826e0#6563\r\nconst Login: React.FC<LoginProps> = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  const { t, i18n } = useTranslation('common');\r\n  const currentHistory = useHistory();\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const { value: username, bind: bindUsername } = useInput<string>('');\r\n  const { value: password, bind: bindPassword } = useInput<string>('');\r\n\r\n  const handleSubmit = async (evt: React.SyntheticEvent) => {\r\n    evt.preventDefault();\r\n    if (!username || username === '') {\r\n      toast.error('Inserire username o password');\r\n      return;\r\n    }\r\n    if (!password || password === '') {\r\n      toast.error('Inserire la password');\r\n      return;\r\n    }\r\n    setValidated(true);\r\n    dispatch(\r\n      SessionAction.login.request({\r\n        username: username.trim(),\r\n        password: password.trim(),\r\n        history: currentHistory,\r\n      })\r\n    );\r\n  };\r\n\r\n  // i18n.changeLanguage('it');\r\n  return (\r\n    <Form onSubmit={handleSubmit} noValidate validated={validated}>\r\n      <InputField\r\n        controlId=\"username\"\r\n        label={t('common:username')}\r\n        required={true}\r\n        type=\"text\"\r\n        placeholder=\"username o email\"\r\n        {...bindUsername}\r\n      />\r\n\r\n      <InputField\r\n        controlId=\"password\"\r\n        label=\"Password\"\r\n        required={true}\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        invalidFeedback=\"Inserire la password\"\r\n        {...bindPassword}\r\n      />\r\n      <Row>\r\n        <Col>\r\n          <Button\r\n            id=\"loginButton\"\r\n            size=\"lg\"\r\n            variant=\"outline-success\"\r\n            className=\"float-right\"\r\n            type=\"submit\"\r\n            disabled={!username || !password}\r\n          >\r\n            {t('common:confim')}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default withRouter(Login);\r\n"],"sourceRoot":""}