{"version":3,"sources":["components/core/utils.ts","components/core/generic/Commons.tsx","components/Pair/helper.ts","models/index.ts","actions/constants.ts","models/player.model.ts","components/Stage2/helper.tsx","assets/header.jpg","actions/pair.action.ts","actions/stage1.action.ts","actions/stage2.action.ts","actions/tournament.action.ts","components/core/routing/Routes.ts","components/Header/Header.tsx","components/core/routing/ProtectedRoute.tsx","components/App/App.tsx","serviceWorker.ts","models/user.model.ts","reducers/tournament.reducer.ts","reducers/player.reducer.ts","reducers/pair.reducer.ts","reducers/session.reducer.ts","reducers/stage1.reducer.ts","reducers/stage2.reducer.ts","services/tournament.service.ts","sagas/tournament.saga.ts","sagas/player.saga.ts","services/pair.service.ts","sagas/pair.saga.ts","services/session.service.ts","sagas/session.saga.ts","services/stage2.service.ts","sagas/stage2.saga.ts","store.ts","index.tsx","actions/session.action.ts","actions/player.action.ts","selectors/session.selector.ts","models/tournament.model.ts","services/player.service.ts"],"names":["getTodayDate","formatDate","Date","translateTournamentProgress","value","TournamentProgress","New","PairsSelection","Stage1","Stage2","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","RegExp","passwordRegExp","emailRegExp","getBaseLog","x","y","Math","log","LoadingModal","message","show","onHide","size","centered","Header","closeButton","Title","Body","Footer","animation","variant","GenericToast","type","className","key","LogSessionContext","session","useSelector","SessionSelector","getSession","Object","entries","map","RedirectionControl","props","location","useLocation","pathname","getEmptyRowModel","label","id","tId","rowNumber","player1","getEmptyPlayer","player2","alias","stage1Name","placement","paid1","paid2","fetchPairs","setterFunction","a","fetch","method","headers","response","json","result","customStyles","option","provided","state","backgroundColor","color","input","control","height","marginBottom","singleValue","valueContainer","fontSize","fetchData","rows","players","console","Request","Success","Failure","PlayerRole","getIndexes","pairsNumber","indexes","NaN","currentMax","ii","growFactor","pow","jj","getEmptyCell","name","winner","parentId","generateStructure","N","counter","Array","fill","e","bounce","index","temp","push","pair","undefined","module","exports","PairAction","getPairs","createAsyncAction","Stage1Action","setSelectedPairs","createAction","Stage2Action","fetchStage2","updateCell","setCells","ActionName","TournamentAction","getTournaments","setTournament","saveTournament","updateTournament","lazyPlayer","lazy","lazyTournament","lazyPairs","lazyStage1","lazyStage2","routes","path","exact","ComponentToRender","visible","private","then","default","dispatch","useDispatch","logout","ok","SessionAction","updateSession","user","jumboStyle","backgroundImage","backgroundSize","padding","minHeight","Jumbotron","style","margin","isAuthenticated","Navbar","collapseOnSelect","expand","bg","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","route","Dropdown","alignRight","ButtonGroup","Button","opacity","disabled","username","split","Menu","Item","onClick","eventKey","Divider","borderTopColor","ProtectedRoute","render","innerProps","from","pathName","element","find","getLabelByPathname","library","add","fas","far","App","_","getMessage","useState","setShow","useEffect","checkAuthentication","request","Container","fluid","Alert","onClose","dismissible","Heading","fallback","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","UserRole","TournamentReducer","createReducer","tournament","tournamentsList","isLoading","handleAction","errorMessage","failure","payload","success","results","PlayerReducer","PlayerAction","getPlayers","playersList","PairReducer","pairList","SessionReducer","isAdmin","login","role","Admin","initialState","selectedPairs","Stage1Reducer","stageName","selected","selectedRows","Map","set","filter","Stage2Reducer","cells","rowsNumber","fetchTournaments","handleError","postTournament","model","body","JSON","stringify","warn","Error","getTournamentsSaga","saveTournamentSaga","updateTournamentSaga","action","call","put","TournamentsSagas","takeEvery","getPlayersSaga","fetchPlayers","PlayersSagas","getPairsSaga","SessionStatus","PairsSagas","CheckAuthentication","createCommunicationChannel","channel","eventChannel","emitter","openListener","event","messageListener","messageEvent","parse","data","status","SESSION_EXPIRED","closeConnection","errorListener","END","addEventListener","removeEventListener","close","buffers","expanding","checkAuthenticationSaga","watchSessionSaga","EventSource","take","history","SessionSagas","takeLatest","sessionControl","count","tournamentId","structure","fetchStage2Saga","Stage2Sagas","rootSagas","composeEnhancer","compose","sagaMiddleware","createSagaMiddleware","commonReducers","tournamentState","playerState","pairState","sessionState","stage1State","stage2State","store","createStore","combineReducers","applyMiddleware","all","run","setDefaultLocale","registerLocale","it","ReactDOM","document","getElementById","URL","process","href","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","forEach","getUser","addEmpty","surname","GoalKeeper","email","phone","match_played","match_won","total_score","editable"],"mappings":"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","file":"static/js/main.fc747631.chunk.js","sourcesContent":["import { TournamentProgress } from '../../models/tournament.model';\r\n\r\nexport const getTodayDate = () => formatDate(new Date());\r\n\r\nexport function translateTournamentProgress(value: string) {\r\n  switch (value) {\r\n    case TournamentProgress.New:\r\n      return 'Nuovo';\r\n    case TournamentProgress.PairsSelection:\r\n      return 'Selezione Coppie';\r\n    case TournamentProgress.Stage1:\r\n      return 'Fase 1';\r\n    case TournamentProgress.Stage2:\r\n      return 'Fase 2';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport function formatDate(date: Date) {\r\n  var d = new Date(date),\r\n    month = '' + (d.getMonth() + 1),\r\n    day = '' + d.getDate(),\r\n    year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = '0' + month;\r\n  if (day.length < 2) day = '0' + day;\r\n\r\n  return [year, month, day].join('/');\r\n}\r\n\r\nexport function getRandomIntInclusive(min: number, max: number) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\r\n}\r\n\r\nexport const phoneRegExp = new RegExp('^d{10}$');\r\nexport const passwordRegExp = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,16})');\r\nexport const emailRegExp = new RegExp(\r\n  // eslint-disable-next-line quotes\r\n  \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\"\r\n);\r\n\r\nexport function getBaseLog(x: number, y: number) {\r\n  return Math.log(y) / Math.log(x);\r\n}\r\n","import React from 'react';\r\nimport { Modal, Spinner, Toast, Alert } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\n\r\n// Loading Modal\r\ntype loadingModalPropsType = {\r\n  show: boolean;\r\n  message?: string;\r\n  onHide?: () => void;\r\n};\r\n\r\nexport const LoadingModal: React.FC<loadingModalPropsType> = ({\r\n  message,\r\n  show,\r\n  onHide = () => (show = false),\r\n}: loadingModalPropsType) => (\r\n  <Modal show={show} onHide={onHide} size=\"xl\" centered>\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>Caricamento....</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>{message ? message : 'Caricamento....'}</Modal.Body>\r\n    <Modal.Footer>\r\n      <Spinner animation=\"border\" variant=\"light\" />\r\n      <Spinner animation=\"border\" variant=\"primary\" />\r\n      <Spinner animation=\"border\" variant=\"secondary\" />\r\n      <Spinner animation=\"border\" variant=\"success\" />\r\n      <Spinner animation=\"border\" variant=\"danger\" />\r\n      <Spinner animation=\"border\" variant=\"warning\" />\r\n      <Spinner animation=\"border\" variant=\"info\" />\r\n      <Spinner animation=\"border\" variant=\"dark\" />\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n\r\n// Toasts\r\nexport interface IToastProps {\r\n  message: string;\r\n  type?: toastType;\r\n}\r\n\r\nexport type toastType = 'success' | 'warning' | 'danger';\r\n\r\nexport const GenericToast: React.FC<IToastProps> = ({ message, type }) =>\r\n  message && message !== '' ? (\r\n    <Toast className=\"rounded mr-2 mx-auto\" key={`${type}-message`} show={message !== ''}>\r\n      <Toast.Header closeButton={false}>\r\n        <strong>Operazione completata !</strong>\r\n      </Toast.Header>\r\n      <Toast.Body>\r\n        <Alert variant={type}>{message}</Alert>\r\n      </Toast.Body>\r\n    </Toast>\r\n  ) : null;\r\n\r\n// Util per loggare i dati utente in sessione\r\nexport const LogSessionContext: React.FC<{}> = () => {\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  return (\r\n    <>\r\n      {Object.entries(session).map(([key, value]) => (\r\n        <p>\r\n          {key} : {value}\r\n        </p>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\n// TODO: Componente fallback se route non trovata\r\nexport function RedirectionControl(props: any): JSX.Element {\r\n  const location = useLocation();\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Current Ruote : <code>{location.pathname}</code>\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n","import { getEmptyPlayer } from 'services/player.service';\r\nimport { Styles } from 'react-select';\r\nimport { PairDTO } from 'models';\r\n\r\nexport const getEmptyRowModel = (label?: string): PairDTO => ({\r\n  id: null,\r\n  tId: 0,\r\n  rowNumber: 0,\r\n  player1: getEmptyPlayer(),\r\n  player2: getEmptyPlayer(),\r\n  alias: label || '',\r\n  stage1Name: '',\r\n  placement: 0,\r\n  paid1: false,\r\n  paid2: false,\r\n});\r\n\r\nexport const fetchPairs = (setterFunction: React.Dispatch<React.SetStateAction<PairDTO[]>>, tId: number) => {\r\n  (async () => {\r\n    const response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const result = await response.json();\r\n    setterFunction(result);\r\n  })();\r\n};\r\n\r\nexport const valueFormatter = (selectedOption: PairDTO) =>\r\n  selectedOption.alias ? `${selectedOption.alias}` : createAlias(selectedOption);\r\n\r\nexport function createAlias(selectedOption: PairDTO) {\r\n  console.log('createAlias : ', selectedOption);\r\n  let value = `${selectedOption.rowNumber} : `;\r\n  const { player1, player2 } = selectedOption;\r\n  value += player1!.alias ? player1!.alias : player1!.name;\r\n  value += ' - ' + player2!.alias ? player2!.alias : player2!.name;\r\n  // value += ` ( ${id} )`;\r\n  return value;\r\n}\r\n\r\nexport const customStyles: Partial<Styles> | undefined = {\r\n  // menuList: (provided, state) => ({ ...provided, border: '1px solid #ffc107' }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: 'white',\r\n    color: 'black',\r\n    '&:hover': {\r\n      backgroundColor: '#64bd9c',\r\n      color: 'white',\r\n    },\r\n  }),\r\n  input: (provided) => ({ ...provided, backgroundColor: '#64bd9c' }),\r\n  control: (provided) => ({ ...provided, height: '3vmin', marginBottom: 'auto' }),\r\n  singleValue: (provided) => ({ ...provided }),\r\n  valueContainer: (provided) => ({ ...provided, height: '100%', fontSize: 'larger' }),\r\n};\r\n\r\nexport const fetchData = async (tId: number) => {\r\n  // Fetch Pairs\r\n  let response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  const rows = await response.json();\r\n\r\n  response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  const result = await response.json();\r\n  const players = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n\r\n  console.log('rows : ', rows);\r\n  return { rows, players };\r\n};\r\n","export * from './common.model';\r\nexport * from './pair.model';\r\nexport * from './player.model';\r\nexport * from './tournament.model';\r\nexport * from './session.model';\r\nexport * from './stage1.model';\r\nexport * from './stage2.model';\r\n","export const Request = 'Request';\r\nexport const Success = 'Success';\r\nexport const Failure = 'Failure';\r\n","// Requests\r\nexport interface FetchPlayersRequest {\r\n  tId?: number;\r\n  addEmpty: boolean;\r\n}\r\n// Responses\r\nexport interface FetchPlayersResponse {\r\n  results: PlayerDTO[];\r\n}\r\n\r\nexport interface PlayerState {\r\n  player?: PlayerDTO;\r\n  playerList?: PlayerDTO[];\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface PlayerDTO {\r\n  id: number | null;\r\n  name: string;\r\n  surname: string;\r\n  alias: string;\r\n  label: string;\r\n  role: PlayerRole;\r\n  email: string;\r\n  phone: string;\r\n  userId?: number;\r\n  match_played?: number;\r\n  match_won?: number;\r\n  total_score?: number;\r\n  editable: boolean;\r\n}\r\n\r\nexport enum PlayerRole {\r\n  None = 'No',\r\n  GoalKeeper = 'Portiere',\r\n  Master = 'Master',\r\n  Striker = 'Attaccante',\r\n}\r\n","import { getBaseLog } from '../core/utils';\r\nimport { ICell } from 'models/stage2.model';\r\n\r\n/*\r\n\t_______________________________________________________________________\r\n\t| n.   |                      |                   |                   |\r\n\t| Riga |     16 coppie        |     8 Coppie      |   4 Coppie        |\r\n\t|______|______________________|___________________|___________________|\r\n\t|\t     |\t( rowSpan )\t\t      |\t\t( rowSpan )\t    |\t   ( rowSpan )    |\r\n\t|      | \t                    |                   |                   |   Escludendo il primo elemento e ossevando le righe da 2 a 32 si\r\n\t|  1   | 1 - 2 - 4 - 8 - 16   | 1 - 2 - 4 - 8     | 1 - 2 - 4         |  \tpuò notare che la seguenza ha la forma di una piramide.\r\n\t|  2   | 1                    | 1                 | 1                 |  \tEsempio N= 32 :\r\n\t|  3   | 1 - 2                | 1 - 2             | 1 - 2             |\r\n\t|  4   | 1                    | 1                 | 1                 |  \t\t     | 6\r\n\t|  5   | 1 - 2 - 4            | 1 - 2 - 4         |                   |  \t       |                                 5\r\n\t|  6   | 1                    | 1                 |                   |  \t       |                 4                               4\r\n\t|  7   | 1 - 2                | 1 - 2             |                   |  \t       |         3               3               3               3\r\n\t|  8   | 1                    | 1                 |                   |  \t       |     2       2       2       2       2       2       2       2\r\n\t|  9   | 1 - 2 - 4 - 8        |                   |                   |          |   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\r\n\t|  10  | 1                    |                   |                   |     _____|___________________________________________________________________\r\n\t|  11  | 1 - 2                |                   |                   |     n.   | 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3\r\n\t|  12  | 1                    |                   |                   |\t\tRiga |                     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\r\n\t|  13  | 1 - 2 - 4            |                   |                   |\r\n\t|  14  | 1                    |                   |                   |\r\n\t|  15  | 1 - 2                |                   |                   |\r\n\t|  16  | 1                    |                   |                   |\r\n\t|______|______________________|___________________|___________________|\r\n\r\n\r\nPosso calcolare un array contenente il numero di elementi che ogni riga deve contenere.\r\n\r\nDato:\r\n\t- N  : numero di righe ( = 32 )\r\n\t- currentMax : valore da assegnare alla seguenza corrente ( 1, 2 ,3, 4, 5, 6, .... )\r\n\t- jj : il numero di multipli da calcolare per ogni seguenza ( jj <= N )\r\n\r\nPartendo ad esempio da un array vuoto di lunghezza N:\r\n\t- Se l'elemento con indice \"ii\" dell'array non contiene nessun valore allora gli assegno \"currentMax\".\r\n\t- Il fattore distanziale tra un elemento e l'altro è : growFactor = Math.pow(2, currentMax);\r\n\t- Tutti gli elementi con indice jj = ii + growFactor * jj hanno quindi valore \"currentMax\"\r\n\r\nIl rowSpan da assegnare al singolo elemento è calcolato come 2^jj. ( 0<=jj<= N+1 )\r\n\r\n\r\n*/\r\nexport const getIndexes = (pairsNumber: number): number[] => {\r\n  const N = getBaseLog(2, pairsNumber) + 1; // Numero massimo di elementi td\r\n  /*\r\n   * Array per mappare numero riga a numero di elementi td\r\n   * Inizializzo come primo NaN solo per avere un placeholder all'index 0  e iniziare l'analisi da 1\r\n   */\r\n  let indexes = [NaN, N];\r\n  let currentMax = 1;\r\n  for (let ii = 1; ii <= pairsNumber; ii++) {\r\n    if (!indexes[ii]) {\r\n      indexes[ii] = currentMax;\r\n      let growFactor = Math.pow(2, currentMax);\r\n      for (let jj = 1; ii + growFactor * jj < pairsNumber + 1; jj++) indexes[ii + growFactor * jj] = currentMax;\r\n      currentMax++;\r\n    }\r\n  }\r\n  return indexes;\r\n};\r\n\r\nexport const getEmptyCell = (name?: string): ICell => ({\r\n  name: '',\r\n  winner: false,\r\n  id: 0,\r\n  parentId: 0,\r\n});\r\n\r\n// Genera la struttura per Stage2\r\nexport const generateStructure = (rowNumber: number): ICell[][] => {\r\n  const N = getBaseLog(2, rowNumber) + 1;\r\n  let counter = rowNumber * 2;\r\n  const result = new Array(N).fill([]).map((e, ii) => {\r\n    counter /= 2;\r\n    let bounce = true;\r\n    let index = 0;\r\n    let temp: ICell[] = [];\r\n    for (let jj = 0; jj < counter; jj++) {\r\n      if (bounce) index++;\r\n      bounce = !bounce;\r\n      temp.push({\r\n        id: index,\r\n        parentId: ii === 0 ? 0 : jj + 1,\r\n        name: `${ii}-${jj + 1}`,\r\n        pair: undefined,\r\n        winner: false,\r\n      });\r\n    }\r\n    return [...temp];\r\n  });\r\n  console.log('generateStructure : ', result);\r\n\r\n  return result;\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/header.7774471e.jpg\";","import { createAsyncAction } from 'typesafe-actions';\r\nimport { Failure, Success, Request } from './constants';\r\nimport { FetchPairsRequest, FetchPairsResponse } from 'models';\r\n\r\nconst ActionName = '[Pair]';\r\n\r\nexport const PairAction = {\r\n  // fetch tournaments\r\n  getPairs: createAsyncAction(\r\n    `${ActionName} Get Pair ${Request}`,\r\n    `${ActionName} Get Pair ${Success}`,\r\n    `${ActionName} Get Pair ${Failure}`\r\n  )<FetchPairsRequest, FetchPairsResponse, Error>(),\r\n};\r\n","import { createAction } from 'typesafe-actions';\r\nimport { Stage1Row } from 'models';\r\n\r\nconst ActionName = '[Stage1]';\r\n\r\nexport const Stage1Action = {\r\n  // get selected tournament\r\n  setSelectedPairs: createAction(`${ActionName} Set Selected Pairs`)<{ stageName: string; rows: Stage1Row[] }>(),\r\n};\r\n","import { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport {\r\n  FetchStage2Response,\r\n  FetchStage2Request,\r\n  UpdateStage2CellResponse,\r\n  UpdateStage2CellRequest,\r\n  ICell,\r\n} from 'models';\r\nimport { Success, Failure } from './constants';\r\n\r\nconst ActionName = '[Stage2]';\r\n\r\nexport const Stage2Action = {\r\n  // get selected tournament\r\n  fetchStage2: createAsyncAction(\r\n    `${ActionName} Fetch Stage2 ${Request}`,\r\n    `${ActionName} Fetch Stage2 ${Success}`,\r\n    `${ActionName} Fetch Stage2 ${Failure}`\r\n  )<FetchStage2Request, FetchStage2Response, Error>(),\r\n  updateCell: createAsyncAction(\r\n    `${ActionName} Update Stage2 Cell ${Request}`,\r\n    `${ActionName} Update Stage2 Cell ${Success}`,\r\n    `${ActionName} Update Stage2 Cell ${Failure}`\r\n  )<UpdateStage2CellRequest, UpdateStage2CellResponse, Error>(),\r\n  setCells: createAction(`${ActionName} Set Cells`)<ICell[][]>(),\r\n};\r\n","import {\r\n  FetchTournamentsRequest,\r\n  TournamentDTO,\r\n  PostTournamentRequest,\r\n  FetchTournamentsResponse,\r\n  PostTournamentResponse,\r\n  UpdateTournamentRequest,\r\n  UpdateTournamentResponse,\r\n} from '../models/tournament.model';\r\nimport { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport { Failure, Success, Request } from './constants';\r\n\r\nconst ActionName = '[Tournament]';\r\n\r\nexport const TournamentAction = {\r\n  // fetch tournaments\r\n  getTournaments: createAsyncAction(\r\n    `${ActionName} Get Tournament ${Request}`,\r\n    `${ActionName} Get Tournament ${Success}`,\r\n    `${ActionName} Get Tournament ${Failure}`\r\n  )<FetchTournamentsRequest, FetchTournamentsResponse, Error>(),\r\n  // set selected tournament\r\n  setTournament: createAction(`${ActionName} Set Tournament`)<TournamentDTO | null>(),\r\n  // save a new tournament\r\n  saveTournament: createAsyncAction(\r\n    `${ActionName} Save Tournament ${Request}`,\r\n    `${ActionName} Save Tournament ${Success}`,\r\n    `${ActionName} Save Tournament ${Failure}`\r\n  )<PostTournamentRequest, PostTournamentResponse, Error>(),\r\n  // save a new tournament\r\n  updateTournament: createAsyncAction(\r\n    `${ActionName} Update Tournament Progress ${Request}`,\r\n    `${ActionName} Update Tournament Progress ${Success}`,\r\n    `${ActionName} Update Tournament Progress ${Failure}`\r\n  )<UpdateTournamentRequest, UpdateTournamentResponse, Error>(),\r\n};\r\n","import React, { lazy } from 'react';\r\n\r\nconst lazyPlayer = lazy(() => import('../../Player/table'));\r\nconst lazyTournament = lazy(() => import('../../Tournament/select'));\r\nconst lazyPairs = lazy(() => import('../../Pair/table'));\r\nconst lazyStage1 = lazy(() => import('../../Stage1/wrapper'));\r\nconst lazyStage2 = lazy(() => import('../../Stage2/handler'));\r\nconst lazyLogin = lazy(() => import('../../Auth/Wrapper'));\r\nconst lazyUser = lazy(() => import('../../Auth/Edit'));\r\nconst lazyRedirectionControl = lazy(() =>\r\n  import('../generic/Commons').then((module) => ({ default: module.RedirectionControl }))\r\n);\r\n\r\nexport interface routeType {\r\n  path: string;\r\n  label: string;\r\n  exact: boolean;\r\n  ComponentToRender: React.ComponentType;\r\n  visible: boolean;\r\n  index: number;\r\n  private: boolean;\r\n}\r\n\r\n// Mappatura route\r\nexport const routes: routeType[] = [\r\n  {\r\n    path: '/login',\r\n    label: 'Login',\r\n    exact: true,\r\n    ComponentToRender: lazyLogin,\r\n    visible: false,\r\n    private: false,\r\n    index: 0,\r\n  },\r\n  {\r\n    path: '/',\r\n    label: 'Home',\r\n    exact: true,\r\n    ComponentToRender: lazyTournament,\r\n    visible: false,\r\n    private: true,\r\n    index: 10,\r\n  },\r\n  {\r\n    path: '/tournament',\r\n    label: 'Selezione Coppie',\r\n    exact: true,\r\n    ComponentToRender: lazyPairs,\r\n    visible: false,\r\n    private: true,\r\n    index: 20,\r\n  },\r\n  {\r\n    path: '/stage1',\r\n    label: 'Torneo fase 1',\r\n    exact: true,\r\n    ComponentToRender: lazyStage1,\r\n    visible: false,\r\n    private: true,\r\n    index: 30,\r\n  },\r\n  {\r\n    path: '/player',\r\n    label: 'Gestione Giocatori',\r\n    exact: true,\r\n    ComponentToRender: lazyPlayer,\r\n    visible: true,\r\n    private: true,\r\n    index: 40,\r\n  },\r\n  {\r\n    path: '/user',\r\n    label: 'Gestione Utente',\r\n    exact: true,\r\n    ComponentToRender: lazyUser,\r\n    visible: false,\r\n    private: true,\r\n    index: 50,\r\n  },\r\n  {\r\n    path: '/stage2',\r\n    label: 'Torneo fase 2',\r\n    exact: true,\r\n    ComponentToRender: lazyStage2 as any,\r\n    visible: false,\r\n    private: true,\r\n    index: 100,\r\n  },\r\n  // TODO: creare pagina per route not found\r\n  {\r\n    path: '*',\r\n    label: 'Not Found',\r\n    exact: false,\r\n    ComponentToRender: lazyRedirectionControl,\r\n    visible: false,\r\n    private: true,\r\n    index: 1000,\r\n  },\r\n];\r\nexport default routes;\r\n\r\nexport function getLabelByPathname(pathName: string): string {\r\n  const element = routes.find((e) => e.path === pathName);\r\n  return element ? element.label : `route ${pathName} not found!`;\r\n}\r\n\r\nexport function getRouteByPathname(pathName: string): routeType | undefined {\r\n  return routes.find((e) => e.path === pathName);\r\n}\r\n","import React, { CSSProperties } from 'react';\r\nimport backgroundImage from '../../assets/header.jpg';\r\nimport { Jumbotron, Navbar, Nav, Button, Dropdown, ButtonGroup } from 'react-bootstrap';\r\nimport routes from '../core/routing/Routes';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\nimport { SessionAction } from 'actions';\r\n\r\nconst applicationName = 'Calcetto C.S.M';\r\n\r\n// Header applicazione, include navbar\r\nexport const Header: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  const logout = async () => {\r\n    const response = await fetch('/api/v1/auth/logout');\r\n    if (response.ok) dispatch(SessionAction.updateSession({ user: undefined }));\r\n    // TODO: gestire messaggi utente\r\n  };\r\n\r\n  // const yellow = '#ffc107';\r\n  const jumboStyle: CSSProperties = {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundSize: 'cover',\r\n    padding: '60px 0px 10px 0px',\r\n    minHeight: '28vh',\r\n  };\r\n\r\n  const titleStyle: CSSProperties = {\r\n    color: 'white',\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <Jumbotron style={jumboStyle}>\r\n        <h1 style={{ margin: '5vh' }}>\r\n          <strong style={titleStyle}>{applicationName}</strong>\r\n        </h1>\r\n        {session.isAuthenticated ? (\r\n          <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n              Home\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                {routes.map((route) =>\r\n                  route.visible ? (\r\n                    route.private && !session.isAuthenticated ? null : (\r\n                      <Nav.Link as={Link} key={route.index} to={route.path}>\r\n                        {route.label}\r\n                      </Nav.Link>\r\n                    )\r\n                  ) : null\r\n                )}\r\n              </Nav>\r\n              {session.user ? (\r\n                <>\r\n                  <Dropdown alignRight as={ButtonGroup}>\r\n                    <Button style={{ opacity: 1 }} variant=\"outline-warning\" size=\"lg\" disabled>\r\n                      <strong style={{ color: '#64bd9c', fontSize: 'larger' }}>{session.user.username}</strong>\r\n                    </Button>\r\n                    <Dropdown.Toggle split variant=\"outline-warning\" id=\"dropdown-custom-2\" />\r\n                    <Dropdown.Menu className=\"default-background default-border-yellow\">\r\n                      <Dropdown.Item\r\n                        className=\"default-color-white default-hover-green\"\r\n                        as=\"button\"\r\n                        variant=\"warning\"\r\n                        onClick={logout}\r\n                        eventKey=\"1\"\r\n                      >\r\n                        Log out\r\n                      </Dropdown.Item>\r\n                      <Dropdown.Divider style={{ borderTopColor: '#ffc107' }} />\r\n                      <Dropdown.Item\r\n                        className=\"default-color-white default-hover-green\"\r\n                        as={Link}\r\n                        to={'/user'}\r\n                        eventKey=\"2\"\r\n                      >\r\n                        Gestione Utente\r\n                      </Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </>\r\n              ) : null}\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        ) : null}\r\n      </Jumbotron>\r\n    </header>\r\n  );\r\n};\r\n","// https://github.com/openscript/react-example-authentication-redirection\r\n\r\nimport * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport { routeType, getLabelByPathname } from './Routes';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\n\r\n// HOC gestisce la visibilità dei componenti ed eventualmente reindirizza alla login\r\nexport const ProtectedRoute: React.FC<routeType> = (props) => {\r\n  const isAuthenticated = useSelector(SessionSelector.isAuthenticated);\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  return (\r\n    <Route\r\n      {...props}\r\n      render={(innerProps) => {\r\n        const { location } = innerProps;\r\n        // Se sono gia autenticato e sto chiedendo la login, reindirizzo alla home\r\n        if (isAuthenticated && location.pathname === '/login') {\r\n          console.log('ProtectedRoute => redirect to Home');\r\n          return <Redirect {...props} to={{ pathname: '/', state: { from: location } }} />;\r\n        }\r\n\r\n        // Se non è una rotta protetta\r\n        if (!props.private) {\r\n          console.log('ProtectedRoute => public route : ', { ...props });\r\n          return <props.ComponentToRender {...props} />;\r\n        }\r\n\r\n        // Se è una rotta privata e non sono autenticato devo andare alla login\r\n        if (!isAuthenticated) {\r\n          console.log('ProtectedRoute => redirect to Login : ', { ...session });\r\n          return <Redirect {...props} to={{ pathname: '/login', state: { from: location } }} />;\r\n        }\r\n        /**\r\n         * Se sono arrivato qui vuol dire che è una rotta protetta, che sono autenticato\r\n         * e che non sto chiedendo di andare alla login. Quindi direi che posso andare dove voglio...\r\n         */\r\n        console.log('ProtectedRoute => render component : ', getLabelByPathname(location.pathname));\r\n        return <props.ComponentToRender {...props} />;\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default ProtectedRoute;\r\n","import React, { Suspense, useEffect, useState } from 'react';\r\n// Components\r\nimport { Header } from '../Header/Header';\r\nimport { LoadingModal /* LogSessionContext */ } from '../core/generic/Commons';\r\n// Routing\r\nimport { Switch } from 'react-router';\r\nimport routes from '../core/routing/Routes';\r\nimport { ProtectedRoute } from '../core/routing/ProtectedRoute';\r\n// Style\r\nimport './App.css';\r\nimport { Container, Alert } from 'react-bootstrap';\r\n// FontAwesome 5\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { far } from '@fortawesome/free-regular-svg-icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SessionAction } from 'actions';\r\nimport { SessionSelector } from '../../selectors/session.selector';\r\n\r\nlibrary.add(fas, far);\r\n\r\nconst App: React.FC = (_) => {\r\n  const dispatch = useDispatch();\r\n  const message = useSelector(SessionSelector.getMessage);\r\n  const [, setShow] = useState<boolean>();\r\n\r\n  // Check if user is already logged\r\n  useEffect(() => {\r\n    dispatch(SessionAction.checkAuthentication.request({}));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Container fluid style={{ marginBottom: '20vh' }}>\r\n        {/*<LogSessionContext /> */}\r\n        {/*<RedirectionControl />*/}\r\n        {\r\n          // Show user message\r\n          message ? (\r\n            <Alert\r\n              variant={message.type}\r\n              key={'welcome-message'}\r\n              show={true}\r\n              onClose={() => setShow(false)}\r\n              dismissible\r\n            >\r\n              <Alert.Heading>{message.message}</Alert.Heading>\r\n            </Alert>\r\n          ) : null\r\n        }\r\n        {/* */}\r\n        <Suspense fallback={<LoadingModal show={true} message={'....Caricamento'} />}>\r\n          <Switch>\r\n            {routes.map((route) => (\r\n              <ProtectedRoute {...route} key={route.index} />\r\n            ))}\r\n          </Switch>\r\n        </Suspense>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          // TODO: show this message to user\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = (_) => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = (_) => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { PlayerDTO } from './player.model';\r\n\r\nexport interface UserState {}\r\n\r\nexport interface UserDTO {\r\n  id: number;\r\n  username: string;\r\n  name: string;\r\n  surname: string;\r\n  email: string;\r\n  phone: string;\r\n  role: UserRole;\r\n  birthday: Date;\r\n  label: string;\r\n  player: PlayerDTO;\r\n}\r\nexport enum UserRole {\r\n  Admin = 'Admin',\r\n  User = 'User',\r\n}\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { TournamentAction } from '../actions/tournament.action';\r\nimport { TournamentState } from 'models/tournament.model';\r\n\r\nconst initialState: TournamentState = {\r\n  tournament: null,\r\n  tournamentsList: [],\r\n  isLoading: false,\r\n};\r\n\r\nexport const TournamentReducer = createReducer<TournamentState, Action>(initialState)\r\n  // Request\r\n  .handleAction(\r\n    [\r\n      TournamentAction.getTournaments.request,\r\n      TournamentAction.saveTournament.request,\r\n      TournamentAction.updateTournament.request,\r\n    ],\r\n    (state) => ({\r\n      ...state,\r\n      isLoading: true,\r\n      errorMessage: undefined,\r\n    })\r\n  )\r\n  // Failure\r\n  .handleAction(\r\n    [\r\n      TournamentAction.getTournaments.failure,\r\n      TournamentAction.saveTournament.failure,\r\n      TournamentAction.updateTournament.failure,\r\n    ],\r\n    (state, { payload: { message } }) => ({\r\n      ...state,\r\n      errorMessage: message,\r\n      isLoading: false,\r\n    })\r\n  )\r\n  // SUCCESS\r\n  // Fetch Tournament\r\n  .handleAction(TournamentAction.getTournaments.success, (state, { payload: { results } }) => ({\r\n    ...state,\r\n    tournament: results && results.length > 0 ? results[0] : state.tournament,\r\n    tournamentsList: results,\r\n    isLoading: false,\r\n  }))\r\n  // Set selected tournament\r\n  .handleAction(TournamentAction.setTournament, (state, { payload }) => ({\r\n    ...state,\r\n    tournament: payload,\r\n    isLoading: false,\r\n  }))\r\n  // Create/Update a new tournament\r\n  .handleAction(\r\n    [TournamentAction.saveTournament.success, TournamentAction.updateTournament.success],\r\n    (state, { payload: { result } }) => ({\r\n      ...state,\r\n      tournament: result,\r\n      isLoading: false,\r\n    })\r\n  );\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { PlayerState } from 'models/player.model';\r\nimport { PlayerAction } from 'actions/player.action';\r\n\r\nconst initialState: PlayerState = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const PlayerReducer = createReducer<PlayerState, Action>(initialState)\r\n  // Request\r\n  .handleAction([PlayerAction.getPlayers.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction([PlayerAction.getPlayers.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  // Fetch Tournament\r\n  .handleAction(PlayerAction.getPlayers.success, (state, { payload: { results } }) => ({\r\n    ...state,\r\n    playersList: results,\r\n    isLoading: false,\r\n  }));\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { PairState } from 'models';\r\nimport { PairAction } from 'actions';\r\n\r\nconst initialState: PairState = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const PairReducer = createReducer<PairState, Action>(initialState)\r\n  // Request\r\n  .handleAction([PairAction.getPairs.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction([PairAction.getPairs.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  // Fetch Tournament\r\n  .handleAction(PairAction.getPairs.success, (state, { payload: { results } }) => ({\r\n    ...state,\r\n    pairList: results,\r\n    isLoading: false,\r\n  }));\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { SessionState } from 'models/session.model';\r\nimport { SessionAction } from 'actions/session.action';\r\nimport { UserRole } from 'models/user.model';\r\n\r\nconst initialState: SessionState = {\r\n  isAuthenticated: false,\r\n  isAdmin: false,\r\n  isLoading: false,\r\n};\r\n\r\nexport const SessionReducer = createReducer<SessionState, Action>(initialState)\r\n  // Request\r\n  .handleAction([SessionAction.checkAuthentication.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction([SessionAction.checkAuthentication.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  .handleAction(\r\n    [\r\n      SessionAction.checkAuthentication.success,\r\n      SessionAction.register.success,\r\n      SessionAction.login.success,\r\n      SessionAction.updateSession,\r\n    ],\r\n    (state, { payload: { user, message } }) => ({\r\n      ...state,\r\n      user,\r\n      isAuthenticated: user ? true : false,\r\n      isAdmin: user ? user.role === UserRole.Admin : false,\r\n      message,\r\n      isLoading: false,\r\n    })\r\n  );\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { Stage1State, Stage1Row } from 'models';\r\nimport { Stage1Action } from 'actions';\r\nimport { getEmptyRowModel } from 'components/Pair/helper';\r\n\r\nconst initialState: Stage1State = {\r\n  selectedPairs: [getEmptyRowModel('placeholder')],\r\n  isLoading: false,\r\n};\r\n\r\nexport const Stage1Reducer = createReducer<Stage1State, Action>(initialState)\r\n  // Request\r\n  .handleAction([Stage1Action.setSelectedPairs], (state, { payload: { stageName, rows } }) => {\r\n    const selected = state.selectedRows ? state.selectedRows : new Map<string, Stage1Row[]>();\r\n    selected.set(stageName, rows);\r\n\r\n    const selectedPairs = state.selectedPairs\r\n      ? [\r\n          // Filtro selectedPairs\r\n          //  e.id === null : mantengo il placeholder\r\n          //  e.stage1Name !== stageName : matengo tutte le coppie che non appartengo al girone attuale\r\n          ...state.selectedPairs.filter((e) => e.id === null || e.stage1Name !== stageName),\r\n          ...rows.map((e) => e.pair),\r\n        ]\r\n      : [...rows.map((e) => e.pair)];\r\n\r\n    return {\r\n      ...state,\r\n      selectedRows: selected,\r\n      selectedPairs,\r\n      isLoading: true,\r\n    };\r\n  });\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { Stage2State } from 'models';\r\nimport { Stage2Action } from 'actions';\r\n\r\nconst initialState: Stage2State = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const Stage2Reducer = createReducer<Stage2State, Action>(initialState)\r\n  // Request\r\n  .handleAction([Stage2Action.fetchStage2.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n  }))\r\n  // Failure\r\n  .handleAction([Stage2Action.fetchStage2.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  // Success\r\n  .handleAction([Stage2Action.fetchStage2.success], (state, { payload: { cells, rowsNumber } }) => {\r\n    console.log('Stage2Action.fetchStage2.success :', { cells, rowsNumber });\r\n\r\n    return {\r\n      cells,\r\n      rowsNumber,\r\n      isLoading: false,\r\n    };\r\n  })\r\n  .handleAction([Stage2Action.setCells], (state, { payload }) => ({\r\n    ...state,\r\n    cells: payload,\r\n  }));\r\n","import {\r\n  FetchTournamentsRequest,\r\n  FetchTournamentsResponse,\r\n  TournamentDTO,\r\n  PostTournamentRequest,\r\n  PostTournamentResponse,\r\n  UpdateTournamentRequest,\r\n  UpdateTournamentResponse,\r\n} from '../models/tournament.model';\r\n\r\nexport const fetchTournaments = async (request: FetchTournamentsRequest): Promise<FetchTournamentsResponse> => {\r\n  try {\r\n    const response = await fetch(request?.tId ? `/api/v1/tournament/${request.tId}` : '/api/v1/tournament/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const results: TournamentDTO[] = await response.json();\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e);\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nexport const postTournament = async ({ model }: PostTournamentRequest): Promise<PostTournamentResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/tournament', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    const result: TournamentDTO = await response.json();\r\n    console.log('postTournament : ', result);\r\n\r\n    return { result };\r\n  } catch (e) {\r\n    handleError(e);\r\n    return { result: null };\r\n  }\r\n};\r\n\r\nexport const updateTournament = async ({ model }: UpdateTournamentRequest): Promise<UpdateTournamentResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/tournament', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    const result: TournamentDTO = await response.json();\r\n    return { result };\r\n  } catch (e) {\r\n    handleError(e);\r\n    return { result: model };\r\n  }\r\n};\r\n\r\nconst handleError = (errorMessage: string): PostTournamentResponse => {\r\n  console.warn('Failed to fetch tournaments', errorMessage);\r\n  throw new Error('Something went wrong');\r\n};\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { fetchTournaments, postTournament } from 'services/tournament.service';\r\nimport { PostTournamentResponse, FetchTournamentsResponse } from 'models/tournament.model';\r\nimport { TournamentAction } from 'actions/tournament.action';\r\n\r\n// https://medium.com/swlh/asynchronous-with-redux-sagas-b43c9630f218\r\nfunction* getTournamentsSaga(\r\n  action: ReturnType<typeof TournamentAction.getTournaments.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchTournamentsResponse = yield call(fetchTournaments, action.payload);\r\n    yield put(TournamentAction.getTournaments.success(response));\r\n  } catch (err) {\r\n    yield put(TournamentAction.getTournaments.failure(err));\r\n  }\r\n}\r\n\r\nfunction* saveTournamentSaga(\r\n  action: ReturnType<typeof TournamentAction.saveTournament.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: PostTournamentResponse = yield call(postTournament, action.payload);\r\n    yield put(TournamentAction.saveTournament.success(response));\r\n  } catch (err) {\r\n    yield put(TournamentAction.saveTournament.failure(err));\r\n  }\r\n}\r\n\r\nfunction* updateTournamentSaga(\r\n  action: ReturnType<typeof TournamentAction.saveTournament.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: PostTournamentResponse = yield call(postTournament, action.payload);\r\n    yield put(TournamentAction.saveTournament.success(response));\r\n  } catch (err) {\r\n    yield put(TournamentAction.saveTournament.failure(err));\r\n  }\r\n}\r\n\r\nexport const TournamentsSagas = [\r\n  takeEvery(TournamentAction.getTournaments.request, getTournamentsSaga),\r\n  takeEvery(TournamentAction.saveTournament.request, saveTournamentSaga),\r\n  takeEvery(TournamentAction.updateTournament.request, updateTournamentSaga),\r\n];\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { PlayerAction } from 'actions/player.action';\r\nimport { FetchPlayersResponse } from 'models/player.model';\r\nimport { fetchPlayers } from 'services/player.service';\r\n\r\nfunction* getPlayersSaga(\r\n  action: ReturnType<typeof PlayerAction.getPlayers.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    console.log('getPlayersSaga');\r\n\r\n    const response: FetchPlayersResponse = yield call(fetchPlayers, action.payload);\r\n    console.log('getPlayersSaga: ', response);\r\n\r\n    yield put(PlayerAction.getPlayers.success(response));\r\n  } catch (err) {\r\n    yield put(PlayerAction.getPlayers.failure(err));\r\n  }\r\n}\r\n\r\nexport const PlayersSagas = [takeEvery(PlayerAction.getPlayers.request, getPlayersSaga)];\r\n","import { FetchPairsRequest, FetchPairsResponse, PostPairsResponse, PostPairsRequest } from 'models';\r\n\r\nexport const fetchPairs = async ({ tId }: FetchPairsRequest): Promise<FetchPairsResponse> => {\r\n  try {\r\n    console.log('fetchPairs : ', tId);\r\n    const response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const results = await response.json();\r\n    console.log('fetchPairs : ', tId, results);\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e);\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nexport const postPair = async ({ models }: PostPairsRequest): Promise<PostPairsResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/pair', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(models),\r\n    });\r\n    const results = await response.json();\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e);\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nconst handleError = (errorMessage: string): FetchPairsResponse => {\r\n  console.warn('Pair Error : ', errorMessage);\r\n  throw new Error('Something went wrong');\r\n};\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { PairAction } from 'actions';\r\nimport { fetchPairs } from 'services/pair.service';\r\nimport { FetchPairsResponse } from 'models';\r\n\r\nfunction* getPairsSaga(action: ReturnType<typeof PairAction.getPairs.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchPairsResponse = yield call(fetchPairs, action.payload);\r\n    console.log('getPairsSaga : ', response);\r\n\r\n    yield put(PairAction.getPairs.success(response));\r\n  } catch (err) {\r\n    yield put(PairAction.getPairs.failure(err));\r\n  }\r\n}\r\n\r\nexport const PairsSagas = [takeEvery(PairAction.getPairs.request, getPairsSaga)];\r\n","import { CheckAuthenticationRequest, AuthenticationResponse } from 'models';\r\nimport { UserDTO } from 'models/user.model';\r\nimport { eventChannel, buffers, END } from 'redux-saga';\r\n\r\nexport enum SessionStatus {\r\n  SESSION_EXPIRED = 'session_expired',\r\n}\r\n\r\nexport interface Message {\r\n  status: SessionStatus;\r\n  message?: string;\r\n}\r\n\r\n// eslint-disable-next-line no-empty-pattern\r\nexport const CheckAuthentication = async ({}: CheckAuthenticationRequest): Promise<AuthenticationResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/auth/');\r\n    const user: UserDTO | null = await response.json();\r\n    console.log('SessionContext.user : ', user);\r\n\r\n    return { user: user && response.ok ? user : undefined };\r\n  } catch (error) {\r\n    handleError('SessionContext.error :');\r\n    return { user: undefined };\r\n  }\r\n};\r\n\r\nexport const createCommunicationChannel = (channel: EventSource) =>\r\n  eventChannel<Message>((emitter) => {\r\n    // Listen for open channel\r\n    const openListener = (event: Event) => console.log('Session Channel is now open.');\r\n\r\n    // Listen for new message\r\n    const messageListener = (messageEvent: MessageEvent) => {\r\n      if (messageEvent) {\r\n        const message = JSON.parse(messageEvent.data) as Message;\r\n        if (message.status === SessionStatus.SESSION_EXPIRED) {\r\n          emitter(message);\r\n          closeConnection();\r\n        }\r\n      }\r\n    };\r\n    // Listen for error\r\n    const errorListener = (event: Event) => {\r\n      console.error('An Error Occur: ', event);\r\n      emitter(END);\r\n      closeConnection();\r\n    };\r\n    channel.addEventListener('open', openListener);\r\n    channel.addEventListener('message', messageListener);\r\n    channel.addEventListener('error', errorListener);\r\n    // Cleanup function\r\n    const closeConnection = () => {\r\n      channel.removeEventListener('open', openListener);\r\n      channel.removeEventListener('message', messageListener);\r\n      channel.removeEventListener('error', errorListener);\r\n      channel.close();\r\n    };\r\n    return closeConnection;\r\n  }, buffers.expanding());\r\n\r\nconst handleError = (errorMessage: string) => {\r\n  console.warn('Session Error : ', errorMessage);\r\n  throw new Error('Something went wrong');\r\n};\r\n","import { put, call, StrictEffect, takeEvery, take, takeLatest } from 'redux-saga/effects';\r\nimport { SessionAction } from 'actions/session.action';\r\nimport { CheckAuthenticationRequest } from 'models';\r\nimport { CheckAuthentication, createCommunicationChannel, Message } from 'services/session.service';\r\n\r\nfunction* checkAuthenticationSaga(\r\n  action: ReturnType<typeof SessionAction.checkAuthentication.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: CheckAuthenticationRequest = yield call(CheckAuthentication, action.payload);\r\n    yield put(SessionAction.checkAuthentication.success(response));\r\n  } catch (err) {\r\n    yield put(SessionAction.checkAuthentication.failure(err));\r\n  }\r\n}\r\n\r\n/*\r\nFIXME:\r\nhttps://github.com/redux-saga/redux-saga/issues/868\r\nhttps://github.com/redux-saga/redux-saga/blob/master/docs/advanced/Channels.md#using-the-eventchannel-factory-to-connect-to-external-events\r\nhttps://github.com/redux-saga/redux-saga/issues/940#issuecomment-298170212\r\n*/\r\n\r\nfunction* watchSessionSaga(\r\n  action: ReturnType<typeof SessionAction.sessionControl.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    console.log('watchSessionSaga : start');\r\n    const eventChannel = new EventSource('/sse/v1/session');\r\n    const channel = yield call(createCommunicationChannel, eventChannel);\r\n    while (true) {\r\n      const message: Message = yield take(channel);\r\n      if (message) {\r\n        console.log('Message from queue : ', message);\r\n        yield put(SessionAction.updateSession({ message: { type: 'danger', message: 'La tua sessione è scaduta' } }));\r\n        action.payload.history.push('/login');\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log('watchSessionSaga.err : ', err);\r\n  }\r\n}\r\n\r\nexport const SessionSagas = [\r\n  takeEvery(SessionAction.checkAuthentication.request, checkAuthenticationSaga),\r\n  takeLatest(SessionAction.sessionControl.request, watchSessionSaga),\r\n];\r\n","import { FetchStage2Response, FetchStage2Request } from 'models';\r\nimport { generateStructure } from 'components/Stage2/helper';\r\n\r\nexport const fetchStage2 = async ({\r\n  count: rowsNumber,\r\n  tournamentId,\r\n}: FetchStage2Request): Promise<FetchStage2Response> => {\r\n  const structure = generateStructure(rowsNumber);\r\n  try {\r\n    const response = await fetch('/api/v1/stage2', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ tournamentId, structure }),\r\n    });\r\n    const cells = await response.json();\r\n    // console.log('response : ', cells);\r\n    return { cells, rowsNumber };\r\n  } catch (e) {\r\n    handleError(e);\r\n    return { cells: structure, rowsNumber };\r\n  }\r\n};\r\n\r\nconst handleError = (errorMessage: string): FetchStage2Request => {\r\n  console.warn('Stage2 Error : ', errorMessage);\r\n  throw new Error('Something went wrong');\r\n};\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { Stage2Action } from 'actions';\r\nimport { fetchStage2 } from 'services/stage2.service';\r\nimport { FetchStage2Response } from 'models';\r\n\r\nfunction* fetchStage2Saga(\r\n  action: ReturnType<typeof Stage2Action.fetchStage2.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchStage2Response = yield call(fetchStage2, action.payload);\r\n    yield put(Stage2Action.fetchStage2.success(response));\r\n  } catch (err) {\r\n    yield put(Stage2Action.fetchStage2.failure(err));\r\n  }\r\n}\r\n\r\nexport const Stage2Sagas = [takeEvery(Stage2Action.fetchStage2.request, fetchStage2Saga)];\r\n","import createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware, compose, combineReducers, ReducersMapObject } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport { RootState } from 'models';\r\nimport { TournamentReducer, PlayerReducer, PairReducer, SessionReducer, Stage1Reducer, Stage2Reducer } from 'reducers';\r\nimport { TournamentsSagas, PlayersSagas, PairsSagas, SessionSagas } from 'sagas';\r\nimport { Stage2Sagas } from 'sagas/stage2.saga';\r\n\r\n// https://redux-saga.js.org/docs/introduction/BeginnerTutorial.html\r\n// custom compose for the redux devtool extension\r\nconst composeEnhancer = (() => {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // https://github.com/zalmoxisus/redux-devtools-extension#redux-devtools-extension\r\n    const key = '__REDUX_DEVTOOLS_EXTENSION_COMPOSE__';\r\n    if (window && typeof (window as any)[key] !== 'undefined') {\r\n      // custom compose\r\n      return (window as any)[key];\r\n    }\r\n  }\r\n  // default compose\r\n  return compose;\r\n})();\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst commonReducers: ReducersMapObject<RootState> = {\r\n  tournamentState: TournamentReducer,\r\n  playerState: PlayerReducer,\r\n  pairState: PairReducer,\r\n  sessionState: SessionReducer,\r\n  stage1State: Stage1Reducer,\r\n  stage2State: Stage2Reducer,\r\n};\r\n\r\n// Meet the Store\r\nexport const store = createStore(combineReducers(commonReducers), composeEnhancer(applyMiddleware(sagaMiddleware)));\r\n\r\n// Exec all sagas ( watcher )\r\nfunction* rootSagas() {\r\n  yield all([...TournamentsSagas, ...PlayersSagas, ...PairsSagas, ...SessionSagas, ...Stage2Sagas]);\r\n}\r\n\r\nsagaMiddleware.run(rootSagas);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport 'typeface-roboto';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, useHistory } from 'react-router-dom';\r\nimport it from 'date-fns/locale/it';\r\nimport { setDefaultLocale, registerLocale } from 'react-datepicker';\r\nimport { store } from 'store';\r\nimport { Provider } from 'react-redux';\r\n\r\nsetDefaultLocale('it');\r\nregisterLocale('it', it);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nprocess.env.NODE_ENV !== 'production' ? serviceWorker.unregister() : serviceWorker.register();\r\n\r\n// Redefine console so it does not in production env\r\nif (process.env.NODE_ENV === 'production') {\r\n  if (!window.console) (window as any).console = {};\r\n  ['log', 'debug', 'warn', 'info'].forEach((e) => ((window as any).console[e] = () => {}));\r\n}\r\n","import { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport { Failure, Success, Request } from './constants';\r\nimport {\r\n  CheckAuthenticationRequest,\r\n  WatchSessionRequest,\r\n  AuthenticationError,\r\n  AuthenticationResponse,\r\n  LoginRequest,\r\n  RegisterRequest,\r\n} from 'models/session.model';\r\n\r\nconst ActionName = '[Session]';\r\n\r\nexport const SessionAction = {\r\n  // Register new user\r\n  register: createAsyncAction(\r\n    `${ActionName} Register ${Request}`,\r\n    `${ActionName} Register ${Success}`,\r\n    `${ActionName} Register ${Failure}`\r\n  )<RegisterRequest, AuthenticationResponse, AuthenticationError>(),\r\n  // Login\r\n  login: createAsyncAction(\r\n    `${ActionName} Login ${Request}`,\r\n    `${ActionName} Login ${Success}`,\r\n    `${ActionName} Login ${Failure}`\r\n  )<LoginRequest, AuthenticationResponse, AuthenticationError>(),\r\n  // Check if user is already authenticate\r\n  checkAuthentication: createAsyncAction(\r\n    `${ActionName} Get Session ${Request}`,\r\n    `${ActionName} Get Session ${Success}`,\r\n    `${ActionName} Get Session ${Failure}`\r\n  )<CheckAuthenticationRequest, AuthenticationResponse, AuthenticationError>(),\r\n  // Session watcher\r\n  sessionControl: createAsyncAction(\r\n    `${ActionName} Watch Session ${Request}`,\r\n    `${ActionName} Watch Session ${Success}`,\r\n    `${ActionName} Watch Session ${Failure}`\r\n  )<WatchSessionRequest, AuthenticationResponse, AuthenticationError>(),\r\n  // set selected tournament\r\n  updateSession: createAction(`${ActionName} Set Session`)<AuthenticationResponse>(),\r\n};\r\n","import { createAsyncAction } from 'typesafe-actions';\r\nimport { Failure, Success, Request } from './constants';\r\nimport { FetchPlayersResponse, FetchPlayersRequest } from 'models/player.model';\r\n\r\nconst ActionName = '[Player]';\r\n\r\nexport const PlayerAction = {\r\n  // fetch tournaments\r\n  getPlayers: createAsyncAction(\r\n    `${ActionName} Get Player ${Request}`,\r\n    `${ActionName} Get Player ${Success}`,\r\n    `${ActionName} Get Player ${Failure}`\r\n  )<FetchPlayersRequest, FetchPlayersResponse, Error>(),\r\n};\r\n","import { RootState } from 'models';\r\n\r\n// Get state from store\r\nexport const SessionSelector = {\r\n  isLoading({ sessionState: { isLoading } }: RootState) {\r\n    return isLoading;\r\n  },\r\n  getMessage({ sessionState: { message } }: RootState) {\r\n    return message;\r\n  },\r\n  getUser({ sessionState: { user } }: RootState) {\r\n    return user;\r\n  },\r\n  isAdmin({ sessionState: { isAdmin } }: RootState) {\r\n    return isAdmin;\r\n  },\r\n  isAuthenticated({ sessionState: { isAuthenticated } }: RootState) {\r\n    return isAuthenticated;\r\n  },\r\n  getSession({ sessionState }: RootState) {\r\n    return sessionState;\r\n  },\r\n};\r\n","// Requests\r\nexport interface FetchTournamentsRequest {\r\n  tId?: number;\r\n}\r\n\r\nexport interface PostTournamentRequest {\r\n  model: TournamentDTO;\r\n}\r\n\r\nexport interface UpdateTournamentRequest {\r\n  model: TournamentDTO;\r\n}\r\n\r\n// Responses\r\nexport interface FetchTournamentsResponse {\r\n  results: TournamentDTO[];\r\n}\r\nexport interface PostTournamentResponse {\r\n  result: TournamentDTO | null;\r\n}\r\nexport interface UpdateTournamentResponse {\r\n  result: TournamentDTO;\r\n}\r\n\r\n//\r\nexport interface TournamentState {\r\n  tournament: TournamentDTO | null;\r\n  tournamentsList: TournamentDTO[] | [];\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface TournamentDTO {\r\n  id: number | null;\r\n  name: string;\r\n  date: Date;\r\n  progress: TournamentProgress;\r\n  public: boolean;\r\n  label: string;\r\n  ownerId: number | null;\r\n}\r\n\r\nexport enum TournamentProgress {\r\n  New = 'New',\r\n  PairsSelection = 'PairsSelection',\r\n  Stage1 = 'Stage1',\r\n  Stage2 = 'Stage2',\r\n}\r\n","import { FetchPlayersRequest, FetchPlayersResponse, PlayerRole, PlayerDTO } from 'models';\r\n\r\nexport const fetchPlayers = async ({ tId, addEmpty }: FetchPlayersRequest): Promise<FetchPlayersResponse> => {\r\n  try {\r\n    const response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const result = await response.json();\r\n    return { results: addEmpty ? [...result, getEmptyPlayer('Nessun Giocatore')] : result };\r\n  } catch (e) {\r\n    handleError(e);\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nconst handleError = (errorMessage: string): FetchPlayersResponse => {\r\n  console.warn('Player Error : ', errorMessage);\r\n  throw new Error('Something went wrong');\r\n};\r\n\r\nexport function getEmptyPlayer(label?: string): PlayerDTO {\r\n  return {\r\n    id: null,\r\n    name: '',\r\n    surname: '',\r\n    alias: '',\r\n    label: label || '',\r\n    role: PlayerRole.GoalKeeper,\r\n    email: '',\r\n    phone: '',\r\n    match_played: 0,\r\n    match_won: 0,\r\n    total_score: 0,\r\n    editable: false,\r\n  };\r\n}\r\n"],"sourceRoot":""}