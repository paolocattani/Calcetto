{"version":3,"sources":["redux/actions/pair.action.ts","redux/actions/stage1.action.ts","redux/actions/stage2.action.ts","redux/actions/root.action.ts","components/core/icons.tsx","redux/models/tournament.model.ts","redux/selectors/tournament.selector.ts","redux/models/player.model.ts","components/Stage1/helper.ts","assets/header.jpg","redux/actions/constants.ts","redux/actions/tournament.action.ts","serviceWorker.ts","redux/models/user.model.ts","redux/reducers/tournament.reducer.ts","redux/reducers/player.reducer.ts","redux/reducers/pair.reducer.ts","redux/reducers/session.reducer.ts","redux/reducers/stage1.reducer.ts","redux/reducers/stage2.reducer.ts","redux/sagas/tournament.saga.ts","redux/sagas/player.saga.ts","redux/services/pair.service.ts","redux/sagas/pair.saga.ts","redux/services/session.service.ts","redux/services/stage1.service.ts","redux/sagas/stage1.saga.ts","redux/sagas/stage2.saga.ts","redux/sagas/session.saga.ts","redux/store.ts","components/core/routing/Routes.ts","components/Header/Header.tsx","components/core/routing/ProtectedRoute.tsx","components/core/errorBoundary.tsx","components/App/badge.tsx","components/App/App.tsx","components/App/Entry.tsx","index.tsx","redux/services/common.ts","redux/actions/player.action.ts","redux/actions/session.action.ts","redux/selectors/session.selector.ts","redux/services/player.service.ts","redux/selectors/pair.selector.ts","redux/selectors/player.selector.ts","redux/selectors/stage1.selector.ts","redux/selectors/stage2.selector.ts","components/core/generic/Commons.tsx","redux/models/index.ts","components/Pair/helper.ts","redux/services/tournament.service.ts","redux/services/stage2.service.ts"],"names":["PairAction","fetchPairs","createAsyncAction","defaultAsyncParams","Stage1Action","updateSelectedPairs","stage1Watcher","fetchStage1","updateCellStage1","updatePlacement","Stage2Action","fetchStage2","updateCell","delete","setCells","createAction","defaultParam","setLoading","RootAction","logout","Icon","size","prefix","iconName","color","icon","findIconDefinition","TrashIcon","SaveIcon","HomeIcon","BroomIcon","RightArrowIcon","LeftArrowIcon","TimesIcon","ToggleOn","ToggleOff","PlusIcon","TrophyIcon","DoubleRightIcon","BanIcon","TournamentProgress","TournamentSelector","isLoading","tournamentState","getTournament","tournament","getTournamentsList","tournamentsList","PlayerRole","getOpposite","value","parseInt","comparator","obj1","obj2","total","rowNumber","rowsGenerator","pairsList","map","e","ii","row","id","tId","pair","placement","jj","length","module","exports","actionName","name","TournamentAction","fetchTournaments","setTournament","saveTournament","updateTournament","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","_","installingWorker","installing","onstatechange","state","controller","toast","warn","console","log","onUpdate","onSuccess","catch","error","UserRole","TournamentReducer","createReducer","handleAction","request","errorMessage","undefined","failure","message","payload","success","results","result","PlayerReducer","playersList","PlayerAction","fetchPlayers","savePlayer","player","deletePlayers","players","filter","find","selectedRow","i","PairReducer","pairList","SessionReducer","isAuthenticated","isAdmin","SessionAction","checkAuthentication","login","updateSession","user","role","Admin","stage1State","needRefresh","selectedPairs","getEmptyRowModel","stages","Stage1Reducer","stageName","rows","currentStage","s","newStage","autoOrder","res1","res2","push","res3","selected","selectedRows","Map","set","stage1Name","Stage2Reducer","cells","rowsNumber","getTournamentsSaga","saveTournamentSaga","updateTournamentSaga","action","call","response","put","postTournament","history","TournamentsSagas","takeEvery","getPlayersSaga","deletePlayersSaga","savePlayerSaga","PlayersSagas","a","fetch","method","headers","json","handleError","getPairsSaga","SessionStatus","PairsSagas","CheckAuthentication","ok","createSessionChannel","channel","eventChannel","emitter","openListener","event","messageListener","messageEvent","JSON","parse","data","status","SESSION_EXPIRED","closeConnection","errorListener","END","addEventListener","removeEventListener","close","buffers","expanding","template","body","stringify","pairs","model","createStage1Channel","NEED_REFRESH","watchStage1Saga","fetchSaga","updateCellSaga","updatePlacementSaga","updateSelectedPairsSaga","EventSource","take","fork","Stage1Sagas","takeLatest","deleteStage2Saga","fetchStage2Saga","updateCellsSaga","deleteStage2","select","progress","Stage1","cell1","cell2","updateCells","Stage2Sagas","checkAuthenticationSaga","watchSessionSaga","sessionControl","SessionSagas","rootSagas","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","commonReducers","playerState","pairState","sessionState","stage2State","store","createStore","persistReducer","key","storage","localForage","combineReducers","applyMiddleware","persistor","persistStore","all","run","lazyPlayer","lazy","lazyTournament","lazyPairs","lazyStage1","lazyStage2","routes","path","label","exact","componentToRender","visible","private","index","default","RedirectionControl","Header","dispatch","useDispatch","session","useSelector","SessionSelector","getSession","jumboStyle","backgroundImage","backgroundSize","padding","minHeight","Jumbotron","style","margin","Navbar","collapseOnSelect","expand","bg","variant","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","className","route","Dropdown","alignRight","ButtonGroup","Button","opacity","disabled","fontSize","username","split","Menu","Item","onClick","eventKey","Divider","borderTopColor","ProtectedRoute","props","render","innerProps","pathname","from","pathName","element","getLabelByPathname","connect","ErrorBoundary","errorInfo","this","setState","children","React","Component","AppBadge","position","top","right","Badge","process","library","add","fas","far","App","currentHistory","useHistory","useEffect","Container","fluid","marginBottom","autoClose","show","fallback","Entry","loading","setDefaultLocale","registerLocale","it","ReactDOM","document","getElementById","URL","href","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","forEach","Error","getUser","addEmpty","getEmptyPlayer","surname","alias","GoalKeeper","email","phone","match_played","match_won","total_score","editable","PairSelector","getPairsList","PlayerSelector","getPlayersList","Stage1Selector","getSelectedRows","getSelectedPairs","getNeedRefresh","getStages","Stage2Selector","getCells","getRowsNumber","modalStyle","backgroundColor","borderColor","fancyModalFooter","animation","LoadingModal","title","onHide","centered","borderWidth","closeButton","Title","Body","Footer","YesNoModal","GenericToast","type","LogSessionContext","Object","entries","useLocation","player1","player2","paid1","paid2","customStyles","option","provided","input","control","height","singleValue","valueContainer","fetchData","isValidTournament","isValid","fetchPairsStage2","count","tournamentId"],"mappings":"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","file":"static/js/main.f19d17dc.chunk.js","sourcesContent":["import { createAsyncAction } from 'typesafe-actions';\r\nimport { defaultAsyncParams } from './constants';\r\nimport { FetchPairsRequest, FetchPairsResponse } from 'redux/models';\r\n\r\nconst actionName = '[Pair]';\r\n\r\nexport const PairAction = {\r\n  // Fetch Pairs\r\n  fetchPairs: createAsyncAction(...defaultAsyncParams(actionName, 'Fetch Pairs'))<\r\n    FetchPairsRequest,\r\n    FetchPairsResponse,\r\n    Error\r\n  >(),\r\n};\r\n","import { createAsyncAction } from 'typesafe-actions';\r\nimport {\r\n  WatchStage1Request,\r\n  WatchStage1Response,\r\n  FetchStage1Response,\r\n  FetchStage1Request,\r\n  UpdateCellRequest,\r\n  UpdateCellResponse,\r\n  UpdatePlacementRequest,\r\n  UpdatePlacementResponse,\r\n  UpdateSelectedPairsRequest,\r\n  UpdateSelectedPairsResponse,\r\n} from 'redux/models';\r\nimport { defaultAsyncParams } from './constants';\r\n\r\nconst actionName = '[Stage1]';\r\n\r\nexport const Stage1Action = {\r\n  // Update Selected Pairs\r\n  updateSelectedPairs: createAsyncAction(...defaultAsyncParams(actionName, 'Update Selected Pairs Stage1'))<\r\n    UpdateSelectedPairsRequest,\r\n    UpdateSelectedPairsResponse,\r\n    Error\r\n  >(),\r\n\r\n  // watcher\r\n  stage1Watcher: createAsyncAction(...defaultAsyncParams(actionName, 'Stage1 Watcher'))<\r\n    WatchStage1Request,\r\n    WatchStage1Response,\r\n    Error\r\n  >(),\r\n  fetchStage1: createAsyncAction(...defaultAsyncParams(actionName, 'Fetch Stage1'))<\r\n    FetchStage1Request,\r\n    FetchStage1Response,\r\n    Error\r\n  >(),\r\n  updateCellStage1: createAsyncAction(...defaultAsyncParams(actionName, 'Update Cell Stage1'))<\r\n    UpdateCellRequest,\r\n    UpdateCellResponse,\r\n    Error\r\n  >(),\r\n  updatePlacement: createAsyncAction(...defaultAsyncParams(actionName, 'Update Placement Stage1'))<\r\n    UpdatePlacementRequest,\r\n    UpdatePlacementResponse,\r\n    Error\r\n  >(),\r\n};\r\n","import { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport {\r\n  FetchStage2Response,\r\n  FetchStage2Request,\r\n  UpdateStage2CellResponse,\r\n  UpdateStage2CellRequest,\r\n  ICell,\r\n  DeleteStage2Request,\r\n  DeleteStage2Response,\r\n} from 'redux/models';\r\nimport { defaultAsyncParams, defaultParam } from './constants';\r\n\r\nconst actionName = '[Stage2]';\r\n\r\nexport const Stage2Action = {\r\n  // get selected tournament\r\n  fetchStage2: createAsyncAction(...defaultAsyncParams(actionName, 'Fetch Stage2'))<\r\n    FetchStage2Request,\r\n    FetchStage2Response,\r\n    Error\r\n  >(),\r\n  updateCell: createAsyncAction(...defaultAsyncParams(actionName, 'Update Cell Stage2'))<\r\n    UpdateStage2CellRequest,\r\n    UpdateStage2CellResponse,\r\n    Error\r\n  >(),\r\n  delete: createAsyncAction(...defaultAsyncParams(actionName, 'Delete Stage2'))<\r\n    DeleteStage2Request,\r\n    DeleteStage2Response,\r\n    Error\r\n  >(),\r\n  setCells: createAction(...defaultParam(actionName, 'Set Cells'))<ICell[][]>(),\r\n  setLoading: createAction(...defaultParam(actionName, 'Stage2 is Loading'))<boolean>(),\r\n};\r\n","import { createAction } from 'typesafe-actions';\r\nimport { defaultParam } from './constants';\r\n\r\nconst actionName = '[Root]';\r\n\r\nexport const RootAction = {\r\n  // logout\r\n  logout: createAction(...defaultParam(actionName, 'Logout'))(),\r\n};\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { findIconDefinition, SizeProp, IconPrefix, IconName } from '@fortawesome/fontawesome-svg-core';\r\n\r\ninterface IconProps {\r\n  color?: string;\r\n  size?: SizeProp;\r\n}\r\n\r\ninterface AbstractIconProps extends IconProps {\r\n  prefix: IconPrefix;\r\n  iconName: IconName;\r\n}\r\n\r\nconst SOLID = 'fas';\r\nconst REGULAR = 'far';\r\n\r\n// Wrapper per icone FontAwesome\r\nconst Icon: React.FC<AbstractIconProps> = ({ size, prefix, iconName, color }) => (\r\n  <FontAwesomeIcon color={color} size={size} icon={findIconDefinition({ prefix, iconName })} />\r\n);\r\n\r\n// Regular\r\nexport const TrashIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={REGULAR} iconName=\"trash-alt\" />\r\n);\r\nexport const SaveIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={REGULAR} iconName=\"save\" />\r\n);\r\n\r\n// Solid\r\nexport const HomeIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"home\" />\r\n);\r\nexport const BroomIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"broom\" />\r\n);\r\nexport const RightArrowIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"arrow-alt-circle-right\" />\r\n);\r\nexport const LeftArrowIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"arrow-alt-circle-left\" />\r\n);\r\nexport const TimesIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"times\" />\r\n);\r\nexport const ToggleOn: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"toggle-on\" />\r\n);\r\nexport const ToggleOff: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"toggle-off\" />\r\n);\r\nexport const PlusIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"plus\" />\r\n);\r\nexport const TrophyIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"trophy\" />\r\n);\r\nexport const DoubleRightIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"angle-double-right\" />\r\n);\r\nexport const BanIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix={SOLID} iconName=\"ban\" />\r\n);\r\n","import * as H from 'history';\r\n\r\n// Requests\r\nexport interface FetchTournamentsRequest {\r\n  tId?: number;\r\n}\r\n\r\nexport interface PostTournamentRequest {\r\n  model: TournamentDTO;\r\n  history: H.History<unknown>;\r\n}\r\n\r\nexport interface UpdateTournamentRequest {\r\n  model: TournamentDTO;\r\n}\r\n\r\nexport interface IsValidTournamentRequest {\r\n  model: TournamentDTO;\r\n}\r\n\r\n// Responses\r\nexport interface FetchTournamentsResponse {\r\n  results: TournamentDTO[];\r\n}\r\nexport interface PostTournamentResponse {\r\n  result: TournamentDTO | null;\r\n}\r\nexport interface UpdateTournamentResponse {\r\n  result: TournamentDTO;\r\n}\r\nexport interface IsValidTournamentResponse {\r\n  isValid: boolean;\r\n  errorMessage: string;\r\n}\r\n\r\n//\r\nexport interface TournamentState {\r\n  tournament: TournamentDTO | null;\r\n  tournamentsList: TournamentDTO[] | [];\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface TournamentDTO {\r\n  id: number | null;\r\n  name: string;\r\n  date: Date;\r\n  progress: TournamentProgress;\r\n  public: boolean;\r\n  autoOrder: boolean;\r\n  label: string;\r\n  ownerId: number | null;\r\n}\r\n\r\nexport enum TournamentProgress {\r\n  New = 'New',\r\n  PairsSelection = 'PairsSelection',\r\n  Stage1 = 'Stage1',\r\n  Stage2 = 'Stage2',\r\n}\r\n","import { RootState } from 'redux/models/common.model';\r\n\r\n// Get state from store\r\nexport const TournamentSelector = {\r\n  isLoading: ({ tournamentState: { isLoading } }: RootState) => isLoading,\r\n  getTournament: ({ tournamentState: { tournament } }: RootState) => tournament,\r\n  getTournamentsList: ({ tournamentState: { tournamentsList } }: RootState) => tournamentsList,\r\n};\r\n","// Requests\r\nexport interface FetchPlayersRequest {\r\n  tId?: number;\r\n  addEmpty?: boolean;\r\n}\r\nexport interface UpdatePlayerRequest {\r\n  player: PlayerDTO;\r\n}\r\nexport interface DeletePlayersRequest {\r\n  players: PlayerDTO[];\r\n}\r\n// Responses\r\nexport interface FetchPlayersResponse {\r\n  results: PlayerDTO[];\r\n}\r\nexport interface UpdatePlayerResponse {\r\n  player: PlayerDTO;\r\n}\r\nexport interface DeletePlayersResponse {\r\n  players: PlayerDTO[];\r\n}\r\n\r\n//\r\nexport interface PlayerState {\r\n  player?: PlayerDTO;\r\n  playersList: PlayerDTO[];\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface PlayerDTO {\r\n  id: number | null;\r\n  name: string;\r\n  surname: string;\r\n  alias: string;\r\n  label: string;\r\n  role: PlayerRole;\r\n  email: string;\r\n  phone: string;\r\n  userId?: number;\r\n  match_played?: number;\r\n  match_won?: number;\r\n  total_score?: number;\r\n  editable: boolean;\r\n  rowNumber: number;\r\n}\r\n\r\nexport enum PlayerRole {\r\n  None = 'No',\r\n  NotAPlayer = 'Non sono un giocatore',\r\n  GoalKeeper = 'Portiere',\r\n  Master = 'Master',\r\n  Striker = 'Attaccante',\r\n}\r\n","import { PairDTO, Stage1Row } from 'redux/models';\r\n\r\n/**\r\n *\r\n * @param value il valore di partenza\r\n * @returns il valore opposto a quello di partenze\r\n *\r\n *  3->0 , 2->1 , 1->2 , 0->3\r\n */\r\nexport function getOpposite(value: string | null) {\r\n  /*\r\n   * Attenzione :\r\n   *  !0 = true\r\n   *  !''  = true\r\n   *  !null   = true\r\n   *  !undefined  = true\r\n   */\r\n  if (value === null) return null;\r\n  switch (parseInt(value)) {\r\n    case 3:\r\n      return 0;\r\n    case 2:\r\n      return 1;\r\n    case 1:\r\n      return 2;\r\n    case 0:\r\n      return 3;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} obj1\r\n * @param {*} obj2\r\n */\r\nexport function comparator(obj1: Stage1Row, obj2: Stage1Row) {\r\n  // in caso di parità valuto scontro diretto\r\n  if (obj1.total === obj2.total) {\r\n    if (obj1[`col${obj2.rowNumber}`] === 3 || obj1[`col${obj2.rowNumber}`] === 2) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n  return obj2.total - obj1.total;\r\n}\r\n\r\n/**\r\n * Questo metodo riceve una lista di coppie PairdDTO e la trasforma in Stage1Row.\r\n * Viene utilizzato da Stage1.handler per costruire la struttura da passare alla tabella\r\n * Inoltre viene passata al BE per salvare i dati sul DB.\r\n *\r\n * @param pairsList PairDTO[] Lista di coppie\r\n *\r\n */\r\nexport const rowsGenerator = (pairsList: PairDTO[]): Stage1Row[] =>\r\n  pairsList.map((e, ii) => {\r\n    const row: Stage1Row = {\r\n      id: `row-${e.tId}-${ii}`,\r\n      rowNumber: ii + 1,\r\n      pair: e,\r\n      total: 0,\r\n      placement: e.placement || 0,\r\n    };\r\n    for (let jj = 1; jj <= pairsList.length; jj++) {\r\n      row[`col${jj}`] = null;\r\n    }\r\n    return row;\r\n  });\r\n","module.exports = __webpack_public_path__ + \"static/media/header.7774471e.jpg\";","import { TypeConstant } from 'typesafe-actions';\r\n\r\nexport const Request = 'Request';\r\nexport const Success = 'Success';\r\nexport const Failure = 'Failure';\r\n\r\nexport const defaultAsyncParams = (actionName: string, name: string): [TypeConstant, TypeConstant, TypeConstant] => [\r\n  `${actionName} ${name} ${Request}`,\r\n  `${actionName} ${name} ${Success}`,\r\n  `${actionName} ${name} ${Failure}`,\r\n];\r\n\r\nexport const defaultParam = (actionName: string, name: string): [TypeConstant] => [`${actionName} ${name}`];\r\n","import {\r\n  FetchTournamentsRequest,\r\n  TournamentDTO,\r\n  PostTournamentRequest,\r\n  FetchTournamentsResponse,\r\n  PostTournamentResponse,\r\n  UpdateTournamentRequest,\r\n  UpdateTournamentResponse,\r\n} from '../models/tournament.model';\r\nimport { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport { defaultAsyncParams, defaultParam } from './constants';\r\n\r\nconst actionName = '[Tournament]';\r\n\r\nexport const TournamentAction = {\r\n  // fetch tournaments\r\n  fetchTournaments: createAsyncAction(...defaultAsyncParams(actionName, 'Fetch Tournaments'))<\r\n    FetchTournamentsRequest,\r\n    FetchTournamentsResponse,\r\n    Error\r\n  >(),\r\n  // set selected tournament\r\n  setTournament: createAction(...defaultParam(actionName, 'Set Tournament'))<TournamentDTO | null>(),\r\n  // save a new tournament\r\n  saveTournament: createAsyncAction(...defaultAsyncParams(actionName, 'Save Tournament'))<\r\n    PostTournamentRequest,\r\n    PostTournamentResponse,\r\n    Error\r\n  >(),\r\n  // save a new tournament\r\n  updateTournament: createAsyncAction(...defaultAsyncParams(actionName, 'Update Tournament'))<\r\n    UpdateTournamentRequest,\r\n    UpdateTournamentResponse,\r\n    Error\r\n  >(),\r\n};\r\n","import { toast } from 'react-toastify';\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          toast.warn('This web app is being served cache-first by a service worker.');\r\n          // TODO: show this message to user\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = (_) => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = (_) => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              toast.warn('New content is available and will be used when all tabs for this page are closed.');\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              toast.warn('Content is cached for offline use.');\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      toast.warn('Error during service worker registration.');\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      toast.warn('No internet connection found. App is running in offline mode.');\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { PlayerDTO } from './player.model';\r\n\r\nexport interface UserState {}\r\n\r\nexport interface UserDTO {\r\n  id: number;\r\n  username: string;\r\n  name: string;\r\n  surname: string;\r\n  email: string;\r\n  phone: string;\r\n  role: UserRole;\r\n  birthday: Date;\r\n  label: string;\r\n  player?: PlayerDTO;\r\n}\r\nexport enum UserRole {\r\n  Admin = 'Admin',\r\n  User = 'User',\r\n}\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { TournamentAction } from '../actions/tournament.action';\r\nimport { TournamentState } from 'redux/models/tournament.model';\r\n\r\nexport const tournamentState: TournamentState = {\r\n  tournament: null,\r\n  tournamentsList: [],\r\n  isLoading: false,\r\n};\r\n\r\nexport const TournamentReducer = createReducer<TournamentState, Action>(tournamentState)\r\n  // Request\r\n  .handleAction(\r\n    [\r\n      TournamentAction.fetchTournaments.request,\r\n      TournamentAction.saveTournament.request,\r\n      TournamentAction.updateTournament.request,\r\n    ],\r\n    (state) => ({\r\n      ...state,\r\n      isLoading: true,\r\n      errorMessage: undefined,\r\n    })\r\n  )\r\n  // Failure\r\n  .handleAction(\r\n    [\r\n      TournamentAction.fetchTournaments.failure,\r\n      TournamentAction.saveTournament.failure,\r\n      TournamentAction.updateTournament.failure,\r\n    ],\r\n    (state, { payload: { message } }) => ({\r\n      ...state,\r\n      errorMessage: message,\r\n      isLoading: false,\r\n    })\r\n  )\r\n  // SUCCESS\r\n  // Fetch Tournament\r\n  .handleAction(TournamentAction.fetchTournaments.success, (state, { payload: { results } }) => ({\r\n    tournament: results && results.length > 0 ? results[0] : null,\r\n    tournamentsList: results,\r\n    isLoading: false,\r\n  }))\r\n  // Set selected tournament\r\n  .handleAction(TournamentAction.setTournament, (state, { payload }) => ({\r\n    ...state,\r\n    tournament: payload,\r\n    isLoading: false,\r\n  }))\r\n  // Create/Update a new tournament\r\n  .handleAction(\r\n    [TournamentAction.saveTournament.success, TournamentAction.updateTournament.success],\r\n    (state, { payload: { result } }) => ({\r\n      ...state,\r\n      tournament: result,\r\n      isLoading: false,\r\n    })\r\n  );\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { PlayerState } from 'redux/models/player.model';\r\nimport { PlayerAction } from 'redux/actions/player.action';\r\n\r\nexport const playerState: PlayerState = {\r\n  isLoading: false,\r\n  playersList: [],\r\n};\r\n\r\nexport const PlayerReducer = createReducer<PlayerState, Action>(playerState)\r\n  // Request\r\n  .handleAction([PlayerAction.fetchPlayers.request, PlayerAction.savePlayer.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction(\r\n    [PlayerAction.fetchPlayers.failure, PlayerAction.savePlayer.failure],\r\n    (state, { payload: { message } }) => ({\r\n      ...state,\r\n      errorMessage: message,\r\n      isLoading: false,\r\n    })\r\n  )\r\n  .handleAction([PlayerAction.savePlayer.success], (state, { payload: { player } }) => ({\r\n    playersList: [player, ...state.playersList],\r\n    isLoading: false,\r\n  }))\r\n  .handleAction([PlayerAction.deletePlayers.success], (state, { payload: { players } }) => ({\r\n    playersList: state.playersList.filter((row) => !players.find((selectedRow) => selectedRow.id === row.id)),\r\n    isLoading: false,\r\n  }))\r\n  // Fetch Tournament\r\n  .handleAction(PlayerAction.fetchPlayers.success, (state, { payload: { results } }) => ({\r\n    playersList: results.map((e, i) => ({ ...e, rowNumber: i + 1 })),\r\n    isLoading: false,\r\n  }));\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { PairState } from 'redux/models';\r\nimport { PairAction } from 'redux/actions';\r\n\r\nexport const pairState: PairState = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const PairReducer = createReducer<PairState, Action>(pairState)\r\n  // Request\r\n  .handleAction([PairAction.fetchPairs.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction([PairAction.fetchPairs.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  // Fetch Tournament\r\n  .handleAction(PairAction.fetchPairs.success, (state, { payload: { results } }) => ({\r\n    ...state,\r\n    pairList: results,\r\n    isLoading: false,\r\n  }));\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { SessionState } from 'redux/models/session.model';\r\nimport { SessionAction } from 'redux/actions/session.action';\r\nimport { UserRole } from 'redux/models/user.model';\r\n\r\nexport const sessionState: SessionState = {\r\n  isAuthenticated: false,\r\n  isAdmin: false,\r\n  isLoading: true,\r\n};\r\n\r\nexport const SessionReducer = createReducer<SessionState, Action>(sessionState)\r\n  // Request\r\n  .handleAction([SessionAction.checkAuthentication.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n    errorMessage: undefined,\r\n  }))\r\n  // Failure\r\n  .handleAction([SessionAction.checkAuthentication.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  .handleAction(\r\n    [\r\n      SessionAction.checkAuthentication.success,\r\n      SessionAction.register.success,\r\n      SessionAction.login.success,\r\n      SessionAction.updateSession,\r\n    ],\r\n    (state, { payload: { user } }) => ({\r\n      user,\r\n      isAuthenticated: !!user,\r\n      isAdmin: user ? user.role === UserRole.Admin : false,\r\n      isLoading: false,\r\n    })\r\n  );\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { Stage1State, Stage1Row } from 'redux/models';\r\nimport { Stage1Action } from 'redux/actions';\r\nimport { getEmptyRowModel } from 'components/Pair/helper';\r\n\r\nexport const stage1State: Stage1State = {\r\n  needRefresh: false,\r\n  selectedPairs: [getEmptyRowModel('-')],\r\n  isLoading: false,\r\n  stages: [],\r\n};\r\n\r\nexport const Stage1Reducer = createReducer<Stage1State, Action>(stage1State)\r\n  // Gestione Watcher\r\n  // All'avvio del watcher reimposto needRefresh\r\n  .handleAction([Stage1Action.stage1Watcher.request], (state) => ({ ...state, needRefresh: false }))\r\n  .handleAction([Stage1Action.stage1Watcher.failure], (state) => ({ ...state }))\r\n  .handleAction([Stage1Action.stage1Watcher.success], (state) => ({ ...state, needRefresh: true }))\r\n  //\r\n  .handleAction([Stage1Action.fetchStage1.request, Stage1Action.updateSelectedPairs.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n  }))\r\n  .handleAction([Stage1Action.fetchStage1.failure, Stage1Action.updateSelectedPairs.failure], (state) => ({\r\n    ...state,\r\n    isLoading: false,\r\n  }))\r\n  // Aggiornamento valore cella/posizionamento\r\n  .handleAction([Stage1Action.updateCellStage1.success, Stage1Action.updatePlacement.success], (state) => ({\r\n    ...state,\r\n    isLoading: false,\r\n  }))\r\n  // Reperimento dati\r\n  .handleAction([Stage1Action.fetchStage1.success], (state, { payload: { stageName, rows, pairsList } }) => {\r\n    const currentStage = state.stages.filter((s) => s.stageName === stageName);\r\n    const newStage =\r\n      currentStage && currentStage.length > 0\r\n        ? { ...currentStage[0], rows }\r\n        : { pairsList, stageName, rows, autoOrder: false, isLoading: false };\r\n    const res1 = [...state.stages, newStage];\r\n    const res2 = state.stages.filter((s) => s.stageName !== stageName).push(newStage);\r\n    const res3 = [...state.stages.filter((s) => s.stageName !== stageName), newStage];\r\n    console.log('Stage1Action.fetchStage1.success : ', res1, res2, res3);\r\n    return {\r\n      ...state,\r\n      stages: res3,\r\n      isLoading: false,\r\n    };\r\n  })\r\n  // Aggiornamento coppie selezionate dati vari gironi\r\n  .handleAction([Stage1Action.updateSelectedPairs.success], (state, { payload: { stageName, rows } }) => {\r\n    const selected = state.selectedRows ? state.selectedRows : new Map<string, Stage1Row[]>();\r\n    selected.set(stageName, rows);\r\n\r\n    const selectedPairs = state.selectedPairs\r\n      ? [\r\n          // Filtro selectedPairs\r\n          //  e.id === null : mantengo il placeholder\r\n          //  e.stage1Name !== stageName : matengo tutte le coppie che non appartengo al girone attuale\r\n          ...state.selectedPairs.filter((e) => e.id === null || e.stage1Name !== stageName),\r\n          ...rows.map((e) => e.pair),\r\n        ]\r\n      : [...rows.map((e) => e.pair)];\r\n\r\n    return {\r\n      ...state,\r\n      selectedRows: selected,\r\n      selectedPairs,\r\n      isLoading: false,\r\n    };\r\n  });\r\n","import { createReducer, Action } from 'typesafe-actions';\r\nimport { Stage2State } from 'redux/models';\r\nimport { Stage2Action } from 'redux/actions';\r\n\r\nexport const stage2State: Stage2State = {\r\n  isLoading: false,\r\n};\r\n\r\nexport const Stage2Reducer = createReducer<Stage2State, Action>(stage2State)\r\n  // Request\r\n  .handleAction([Stage2Action.fetchStage2.request, Stage2Action.delete.request], (state) => ({\r\n    ...state,\r\n    isLoading: true,\r\n  }))\r\n  // Failure\r\n  .handleAction([Stage2Action.fetchStage2.failure], (state, { payload: { message } }) => ({\r\n    ...state,\r\n    errorMessage: message,\r\n    isLoading: false,\r\n  }))\r\n  // Success\r\n  .handleAction([Stage2Action.fetchStage2.success], (state, { payload: { cells, rowsNumber } }) => ({\r\n    cells,\r\n    rowsNumber,\r\n    isLoading: false,\r\n  }))\r\n  .handleAction([Stage2Action.delete.success], () => ({\r\n    cells: undefined,\r\n    rowsNumber: 0,\r\n    isLoading: false,\r\n  }))\r\n  .handleAction([Stage2Action.setCells], (state, { payload }) => ({\r\n    ...state,\r\n    cells: payload,\r\n  }))\r\n  .handleAction([Stage2Action.setLoading], (state, { payload }) => ({\r\n    ...state,\r\n    isLoading: payload,\r\n  }));\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { fetchTournaments, postTournament, updateTournament } from 'redux/services/tournament.service';\r\nimport { PostTournamentResponse, FetchTournamentsResponse } from 'redux/models/tournament.model';\r\nimport { TournamentAction } from 'redux/actions/tournament.action';\r\n\r\n// https://medium.com/swlh/asynchronous-with-redux-sagas-b43c9630f218\r\nfunction* getTournamentsSaga(\r\n  action: ReturnType<typeof TournamentAction.fetchTournaments.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchTournamentsResponse = yield call(fetchTournaments, action.payload);\r\n    yield put(TournamentAction.fetchTournaments.success(response));\r\n  } catch (err) {\r\n    yield put(TournamentAction.fetchTournaments.failure(err));\r\n  }\r\n}\r\n\r\nfunction* saveTournamentSaga(\r\n  action: ReturnType<typeof TournamentAction.saveTournament.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: PostTournamentResponse = yield call(postTournament, action.payload);\r\n    yield put(TournamentAction.saveTournament.success(response));\r\n    action.payload.history.push('/tournament');\r\n  } catch (err) {\r\n    yield put(TournamentAction.saveTournament.failure(err));\r\n  }\r\n}\r\n\r\nfunction* updateTournamentSaga(\r\n  action: ReturnType<typeof TournamentAction.saveTournament.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: PostTournamentResponse = yield call(updateTournament, action.payload);\r\n    yield put(TournamentAction.saveTournament.success(response));\r\n  } catch (err) {\r\n    yield put(TournamentAction.saveTournament.failure(err));\r\n  }\r\n}\r\n\r\nexport const TournamentsSagas = [\r\n  takeEvery(TournamentAction.fetchTournaments.request, getTournamentsSaga),\r\n  takeEvery(TournamentAction.saveTournament.request, saveTournamentSaga),\r\n  takeEvery(TournamentAction.updateTournament.request, updateTournamentSaga),\r\n];\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { PlayerAction } from 'redux/actions/player.action';\r\nimport { FetchPlayersResponse, DeletePlayersResponse, UpdatePlayerResponse } from 'redux/models/player.model';\r\nimport { fetchPlayers, deletePlayers, savePlayer } from 'redux/services/player.service';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction* getPlayersSaga(\r\n  action: ReturnType<typeof PlayerAction.fetchPlayers.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    console.log('getPlayersSaga');\r\n\r\n    const { results }: FetchPlayersResponse = yield call(fetchPlayers, action.payload);\r\n    console.log('getPlayersSaga: ', results);\r\n    yield put(PlayerAction.fetchPlayers.success({ results }));\r\n  } catch (err) {\r\n    yield put(PlayerAction.fetchPlayers.failure(err));\r\n  }\r\n}\r\n\r\nfunction* deletePlayersSaga(\r\n  action: ReturnType<typeof PlayerAction.deletePlayers.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: DeletePlayersResponse = yield call(deletePlayers, action.payload);\r\n    yield put(PlayerAction.deletePlayers.success(response));\r\n    toast.success('Giocatore eliminato...');\r\n  } catch (err) {\r\n    yield put(PlayerAction.deletePlayers.failure(err));\r\n    toast.error('Errore...');\r\n  }\r\n}\r\n\r\nfunction* savePlayerSaga(\r\n  action: ReturnType<typeof PlayerAction.savePlayer.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: UpdatePlayerResponse = yield call(savePlayer, action.payload);\r\n    yield put(PlayerAction.savePlayer.success(response));\r\n    toast.success(action.payload.player.id === null ? 'Giocatore creato...' : 'Giocatore aggiornato...');\r\n  } catch (err) {\r\n    yield put(PlayerAction.savePlayer.failure(err));\r\n  }\r\n}\r\n\r\nexport const PlayersSagas = [\r\n  takeEvery(PlayerAction.fetchPlayers.request, getPlayersSaga),\r\n  takeEvery(PlayerAction.deletePlayers.request, deletePlayersSaga),\r\n  takeEvery(PlayerAction.savePlayer.request, savePlayerSaga),\r\n];\r\n","import { FetchPairsRequest, FetchPairsResponse, PostPairsResponse, PostPairsRequest } from 'redux/models';\r\nimport { handleError } from './common';\r\n\r\nexport const fetchPairs = async ({ tId }: FetchPairsRequest): Promise<FetchPairsResponse> => {\r\n  try {\r\n    console.log('fetchPairs : ', tId);\r\n    const response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const results = await response.json();\r\n    console.log('fetchPairs : ', tId, results);\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e, 'Error pairs fetch');\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nexport const postPair = async ({ models }: PostPairsRequest): Promise<PostPairsResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/pair', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(models),\r\n    });\r\n    const results = await response.json();\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e, 'Error pairs update');\r\n    return { results: [] };\r\n  }\r\n};\r\n","import { put, call, StrictEffect, takeEvery } from 'redux-saga/effects';\r\nimport { PairAction } from 'redux/actions';\r\nimport { fetchPairs } from 'redux/services/pair.service';\r\nimport { FetchPairsResponse } from 'redux/models';\r\n\r\nfunction* getPairsSaga(action: ReturnType<typeof PairAction.fetchPairs.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchPairsResponse = yield call(fetchPairs, action.payload);\r\n    yield put(PairAction.fetchPairs.success(response));\r\n  } catch (err) {\r\n    yield put(PairAction.fetchPairs.failure(err));\r\n  }\r\n}\r\n\r\nexport const PairsSagas = [takeEvery(PairAction.fetchPairs.request, getPairsSaga)];\r\n","import { CheckAuthenticationRequest, AuthenticationResponse } from 'redux/models';\r\nimport { UserDTO } from 'redux/models/user.model';\r\nimport { eventChannel, buffers, END } from 'redux-saga';\r\n\r\nexport enum SessionStatus {\r\n  // Sessione scaduta, reindirizza l'utente alla login\r\n  SESSION_EXPIRED = 'session_expired',\r\n  // Necessario aggiornamento dati su Stage1\r\n  NEED_REFRESH = 'need_refresh',\r\n}\r\n\r\nexport interface Message {\r\n  status: SessionStatus;\r\n  message?: string;\r\n}\r\n\r\n// eslint-disable-next-line no-empty-pattern\r\nexport const CheckAuthentication = async ({}: CheckAuthenticationRequest): Promise<AuthenticationResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/auth/');\r\n    const user: UserDTO | null = await response.json();\r\n    return { user: user && response.ok ? user : undefined };\r\n  } catch (error) {\r\n    return { user: undefined };\r\n  }\r\n};\r\n\r\n// Session Control\r\nexport const createSessionChannel = (channel: EventSource) =>\r\n  eventChannel<Message>((emitter) => {\r\n    // Listen for open channel\r\n    const openListener = (event: Event) => console.log('Connected...');\r\n\r\n    // Listen for new message\r\n    const messageListener = (messageEvent: MessageEvent) => {\r\n      if (messageEvent) {\r\n        const message = JSON.parse(messageEvent.data) as Message;\r\n        if (message.status === SessionStatus.SESSION_EXPIRED) {\r\n          emitter(message);\r\n          closeConnection();\r\n        }\r\n      }\r\n    };\r\n    // Listen for error\r\n    const errorListener = (event: Event) => {\r\n      console.error('An Error Occur: ', event);\r\n      emitter(END);\r\n      closeConnection();\r\n    };\r\n    channel.addEventListener('open', openListener);\r\n    channel.addEventListener('message', messageListener);\r\n    channel.addEventListener('error', errorListener);\r\n    // Cleanup function\r\n    const closeConnection = () => {\r\n      channel.removeEventListener('open', openListener);\r\n      channel.removeEventListener('message', messageListener);\r\n      channel.removeEventListener('error', errorListener);\r\n      channel.close();\r\n    };\r\n    return closeConnection;\r\n  }, buffers.expanding());\r\n","import { eventChannel, END, buffers } from 'redux-saga';\r\nimport { SessionStatus, Message } from './session.service';\r\nimport {\r\n  FetchStage1Request,\r\n  FetchStage1Response,\r\n  UpdateCellRequest,\r\n  UpdateCellResponse,\r\n  UpdatePlacementRequest,\r\n  UpdateSelectedPairsRequest,\r\n} from 'redux/models';\r\nimport { handleError } from './common';\r\nimport { rowsGenerator } from 'components/Stage1/helper';\r\n\r\nexport const fetchStage1 = async ({ pairsList, stageName }: FetchStage1Request): Promise<FetchStage1Response> => {\r\n  try {\r\n    const template = rowsGenerator(pairsList);\r\n    const response = await fetch('/api/v1/stage1', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ rows: template, stageName }),\r\n    });\r\n    const rows = await response.json();\r\n    return { pairsList, stageName, rows };\r\n  } catch (e) {\r\n    handleError(e, 'Error stage1 fetch');\r\n    return { pairsList, stageName, rows: [] };\r\n  }\r\n};\r\n\r\nexport const updatePlacement = async ({ rows }: UpdatePlacementRequest): Promise<void> => {\r\n  try {\r\n    const response = await fetch('/api/v1/stage1/placement', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ rows }),\r\n    });\r\n    await response.json();\r\n  } catch (e) {\r\n    handleError(e, 'Error stage1 fetch');\r\n  }\r\n};\r\n\r\nexport const updateSelectedPairs = async ({ rows, stageName }: UpdateSelectedPairsRequest): Promise<void> => {\r\n  try {\r\n    const response = await fetch('/api/v1/pair/selected', {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ pairs: rows.map((e) => e.pair), stage1Name: stageName }),\r\n    });\r\n    await response.json();\r\n  } catch (e) {\r\n    handleError(e, 'Error stage1 fetch');\r\n  }\r\n};\r\n\r\nexport const updateCellStage1 = async (model: UpdateCellRequest): Promise<UpdateCellResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/stage1/cell', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    await response.json();\r\n    return {};\r\n  } catch (e) {\r\n    handleError(e, 'Error stage1 fetch');\r\n    return {};\r\n  }\r\n};\r\nexport const createStage1Channel = (channel: EventSource) =>\r\n  eventChannel<Message>((emitter) => {\r\n    // Listen for open channel\r\n    const openListener = (event: Event) => console.log('Stage1 Channel is now open.');\r\n\r\n    // Listen for new message\r\n    const messageListener = (messageEvent: MessageEvent) => {\r\n      if (messageEvent) {\r\n        const message = JSON.parse(messageEvent.data) as Message;\r\n        if (message.status === SessionStatus.NEED_REFRESH) {\r\n          emitter(message);\r\n          closeConnection();\r\n        }\r\n      }\r\n    };\r\n    // Listen for error\r\n    const errorListener = (event: Event) => {\r\n      console.error('An Error Occur: ', event);\r\n      emitter(END);\r\n      closeConnection();\r\n    };\r\n    channel.addEventListener('open', openListener);\r\n    channel.addEventListener('message', messageListener);\r\n    channel.addEventListener('error', errorListener);\r\n    // Cleanup function\r\n    const closeConnection = () => {\r\n      channel.removeEventListener('open', openListener);\r\n      channel.removeEventListener('message', messageListener);\r\n      channel.removeEventListener('error', errorListener);\r\n      channel.close();\r\n    };\r\n    return closeConnection;\r\n  }, buffers.expanding());\r\n","import { Stage1Action } from 'redux/actions';\r\nimport { takeLatest, StrictEffect, call, take, put, takeEvery, fork } from 'redux-saga/effects';\r\nimport {\r\n  createStage1Channel,\r\n  fetchStage1,\r\n  updateCellStage1,\r\n  updatePlacement,\r\n  updateSelectedPairs,\r\n} from 'redux/services/stage1.service';\r\nimport { FetchStage1Response } from 'redux/models';\r\nimport { toast } from 'react-toastify';\r\n\r\n// TODO:\r\nfunction* watchStage1Saga(\r\n  action: ReturnType<typeof Stage1Action.stage1Watcher.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    console.log('watchStage1Saga : start');\r\n    const eventChannel = new EventSource('/sse/v1/session');\r\n    const channel = yield call(createStage1Channel, eventChannel);\r\n    while (true) {\r\n      const message = yield take(channel);\r\n      console.log('watchStage1Saga.message : ', message);\r\n    }\r\n  } catch (err) {\r\n    console.log('watchStage1Saga.err : ', err);\r\n  }\r\n}\r\n\r\nfunction* fetchSaga(action: ReturnType<typeof Stage1Action.fetchStage1.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchStage1Response = yield call(fetchStage1, action.payload);\r\n    yield put(Stage1Action.fetchStage1.success(response));\r\n  } catch (err) {\r\n    yield put(Stage1Action.fetchStage1.failure(err));\r\n    toast.error('Error while fetching Stage2');\r\n  }\r\n}\r\n\r\nfunction* updateCellSaga(\r\n  action: ReturnType<typeof Stage1Action.updateCellStage1.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    yield fork(updateCellStage1, action.payload);\r\n    yield put(Stage1Action.updateCellStage1.success({}));\r\n  } catch (err) {\r\n    yield put(Stage1Action.updateCellStage1.failure(err));\r\n    toast.error('Error while fetching Stage2');\r\n  }\r\n}\r\n\r\nfunction* updatePlacementSaga(\r\n  action: ReturnType<typeof Stage1Action.updatePlacement.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    yield fork(updatePlacement, action.payload);\r\n    yield put(Stage1Action.updatePlacement.success({}));\r\n  } catch (err) {\r\n    yield put(Stage1Action.updatePlacement.failure(err));\r\n    toast.error('Error while fetching Stage2');\r\n  }\r\n}\r\n\r\nfunction* updateSelectedPairsSaga(\r\n  action: ReturnType<typeof Stage1Action.updateSelectedPairs.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    yield fork(updateSelectedPairs, action.payload);\r\n    yield put(Stage1Action.updateSelectedPairs.success(action.payload));\r\n  } catch (err) {\r\n    console.error('Error updating selected pairs : ', err);\r\n    yield put(Stage1Action.updateSelectedPairs.success(action.payload));\r\n    toast.error('Error updating selected pairs');\r\n  }\r\n}\r\n\r\nexport const Stage1Sagas = [\r\n  takeLatest(Stage1Action.stage1Watcher.request, watchStage1Saga),\r\n  takeEvery(Stage1Action.fetchStage1.request, fetchSaga),\r\n  takeEvery(Stage1Action.updateCellStage1.request, updateCellSaga),\r\n  takeEvery(Stage1Action.updatePlacement.request, updatePlacementSaga),\r\n  takeEvery(Stage1Action.updateSelectedPairs.request, updateSelectedPairsSaga),\r\n];\r\n","import { put, call, StrictEffect, takeEvery, select, fork } from 'redux-saga/effects';\r\nimport { Stage2Action, TournamentAction } from 'redux/actions';\r\nimport { fetchStage2, updateCells, deleteStage2 } from 'redux/services/stage2.service';\r\nimport { FetchStage2Response, TournamentProgress, DeleteStage2Response } from 'redux/models';\r\nimport { TournamentSelector } from 'redux/selectors';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction* deleteStage2Saga(action: ReturnType<typeof Stage2Action.delete.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: DeleteStage2Response = yield call(deleteStage2, action.payload.tId);\r\n    yield put(Stage2Action.delete.success(response));\r\n    const tournament = yield select(TournamentSelector.getTournament);\r\n    tournament!.progress = TournamentProgress.Stage1;\r\n    toast.success('Fase 2 eiminata...');\r\n    yield put(TournamentAction.updateTournament.request({ model: tournament }));\r\n  } catch (err) {\r\n    yield put(Stage2Action.delete.failure(err));\r\n    toast.error('Error while deleting Stage2');\r\n  }\r\n}\r\n\r\nfunction* fetchStage2Saga(\r\n  action: ReturnType<typeof Stage2Action.fetchStage2.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: FetchStage2Response = yield call(fetchStage2, action.payload);\r\n    yield put(Stage2Action.fetchStage2.success(response));\r\n  } catch (err) {\r\n    yield put(Stage2Action.fetchStage2.failure(err));\r\n    toast.error('Error while fetching Stage2');\r\n  }\r\n}\r\n\r\nfunction* updateCellsSaga({\r\n  payload: { cell1, cell2 },\r\n}: ReturnType<typeof Stage2Action.updateCell.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    yield fork(updateCells, cell1, cell2);\r\n    yield put(Stage2Action.updateCell.success({}));\r\n  } catch (err) {\r\n    yield put(Stage2Action.updateCell.failure(err));\r\n    toast.error('Error while updating Stage2');\r\n  }\r\n}\r\n\r\nexport const Stage2Sagas = [\r\n  takeEvery(Stage2Action.fetchStage2.request, fetchStage2Saga),\r\n  takeEvery(Stage2Action.updateCell.request, updateCellsSaga),\r\n  takeEvery(Stage2Action.delete.request, deleteStage2Saga),\r\n];\r\n","import { put, call, StrictEffect, takeEvery, take, takeLatest, fork } from 'redux-saga/effects';\r\nimport { SessionAction } from 'redux/actions/session.action';\r\nimport { AuthenticationResponse } from 'redux/models';\r\nimport { CheckAuthentication, createSessionChannel, Message } from 'redux/services/session.service';\r\nimport { toast } from 'react-toastify';\r\nimport { Action } from 'typesafe-actions';\r\n\r\nfunction* checkAuthenticationSaga({\r\n  payload,\r\n}: ReturnType<typeof SessionAction.checkAuthentication.request>): Generator<StrictEffect, void, any> {\r\n  try {\r\n    const response: AuthenticationResponse = yield call(CheckAuthentication, payload);\r\n    yield put(SessionAction.checkAuthentication.success(response));\r\n    yield fork(SessionAction.sessionControl.request, { history: payload.history });\r\n  } catch (err) {\r\n    yield put(SessionAction.checkAuthentication.failure(err));\r\n  }\r\n}\r\n\r\n/*\r\nFIXME:\r\nhttps://github.com/redux-saga/redux-saga/issues/868\r\nhttps://github.com/redux-saga/redux-saga/blob/master/docs/advanced/Channels.md#using-the-eventchannel-factory-to-connect-to-external-events\r\nhttps://github.com/redux-saga/redux-saga/issues/940#issuecomment-298170212\r\n*/\r\n\r\nfunction* watchSessionSaga(\r\n  action: ReturnType<typeof SessionAction.sessionControl.request>\r\n): Generator<StrictEffect, void, any> {\r\n  try {\r\n    console.log('watchSessionSaga : start');\r\n    const eventChannel = new EventSource('/sse/v1/session');\r\n    const channel = yield call(createSessionChannel, eventChannel);\r\n    while (true) {\r\n      const message: Message = yield take(channel);\r\n      if (message) {\r\n        console.log('Message from queue : ', message);\r\n        toast.error('La tua sessione è scaduta');\r\n        yield put(SessionAction.updateSession({ user: undefined }));\r\n        action.payload.history.push('/login');\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log('watchSessionSaga.err : ', err);\r\n  }\r\n}\r\n/*\r\nfunction* logger(action: Action<any>) {\r\n  const state = yield select();\r\n  console.log('action', action);\r\n  console.log('state after', state);\r\n}\r\n*/\r\n\r\nfunction logger(action: Action<any>) {\r\n  console.log('Action : ', action);\r\n}\r\n\r\nexport const SessionSagas = [\r\n  takeEvery(SessionAction.checkAuthentication.request, checkAuthenticationSaga),\r\n  takeLatest(SessionAction.sessionControl.request, watchSessionSaga),\r\n  takeEvery('*', logger),\r\n];\r\n","import createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware, compose, combineReducers, ReducersMapObject } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport localForage from 'localforage';\r\nimport { RootState } from 'redux/models';\r\nimport {\r\n  TournamentReducer,\r\n  PlayerReducer,\r\n  PairReducer,\r\n  SessionReducer,\r\n  Stage1Reducer,\r\n  Stage2Reducer,\r\n} from 'redux/reducers';\r\nimport { TournamentsSagas, PlayersSagas, PairsSagas, SessionSagas, Stage2Sagas, Stage1Sagas } from 'redux/sagas';\r\n\r\n// TODO: https://manukyan.dev/posts/2019-04-15-code-splitting-for-redux-and-optional-redux-saga/#:~:text=Redux%20Saga%20Code%20Splitting,whenever%20those%20actions%20are%20dispatched.\r\n\r\n// https://github.com/rt2zz/redux-persist\r\n// https://redux-saga.js.org/docs/introduction/BeginnerTutorial.html\r\n// custom compose for the redux devtool extension\r\nconst composeEnhancers =\r\n  (process.env.NODE_ENV !== 'production' &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      trace: true,\r\n      traceLimit: 25,\r\n    })) ||\r\n  compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst commonReducers: ReducersMapObject<RootState> = {\r\n  tournamentState: TournamentReducer,\r\n  playerState: PlayerReducer,\r\n  pairState: PairReducer,\r\n  sessionState: SessionReducer,\r\n  stage1State: Stage1Reducer,\r\n  stage2State: Stage2Reducer,\r\n};\r\n\r\n// Meet the Store\r\nexport const store = createStore(\r\n  persistReducer(\r\n    {\r\n      key: 'app',\r\n      storage: localForage,\r\n    },\r\n    combineReducers(commonReducers)\r\n  ),\r\n  composeEnhancers(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// Exec all sagas\r\nfunction* rootSagas() {\r\n  yield all([...TournamentsSagas, ...PlayersSagas, ...PairsSagas, ...SessionSagas, ...Stage2Sagas, ...Stage1Sagas]);\r\n}\r\n\r\nsagaMiddleware.run(rootSagas);\r\n","import React, { lazy } from 'react';\r\n\r\nconst lazyPlayer = lazy(() => import('../../Player/table'));\r\nconst lazyTournament = lazy(() => import('../../Tournament/select'));\r\nconst lazyPairs = lazy(() => import('../../Pair/table'));\r\nconst lazyStage1 = lazy(() => import('../../Stage1/wrapper'));\r\nconst lazyStage2 = lazy(() => import('../../Stage2/handler'));\r\nconst lazyLogin = lazy(() => import('../../Auth/Wrapper'));\r\nconst lazyUser = lazy(() => import('../../Auth/Edit'));\r\nconst lazyRedirectionControl = lazy(() =>\r\n  import('../generic/Commons').then((module) => ({ default: module.RedirectionControl }))\r\n);\r\n\r\nexport interface routeType {\r\n  path: string;\r\n  label: string;\r\n  exact: boolean;\r\n  componentToRender: React.ComponentType;\r\n  visible: boolean;\r\n  index: number;\r\n  private: boolean;\r\n}\r\n\r\n// Mappatura route\r\nexport const routes: routeType[] = [\r\n  {\r\n    path: '/login',\r\n    label: 'Login',\r\n    exact: true,\r\n    componentToRender: lazyLogin,\r\n    visible: false,\r\n    private: false,\r\n    index: 0,\r\n  },\r\n  {\r\n    path: '/',\r\n    label: 'Home',\r\n    exact: true,\r\n    componentToRender: lazyTournament,\r\n    visible: false,\r\n    private: true,\r\n    index: 10,\r\n  },\r\n  {\r\n    path: '/tournament',\r\n    label: 'Selezione Coppie',\r\n    exact: true,\r\n    componentToRender: lazyPairs,\r\n    visible: false,\r\n    private: true,\r\n    index: 20,\r\n  },\r\n  {\r\n    path: '/stage1',\r\n    label: 'Torneo fase 1',\r\n    exact: true,\r\n    componentToRender: lazyStage1,\r\n    visible: false,\r\n    private: true,\r\n    index: 30,\r\n  },\r\n  {\r\n    path: '/player',\r\n    label: 'Gestione Giocatori',\r\n    exact: true,\r\n    componentToRender: lazyPlayer,\r\n    visible: true,\r\n    private: true,\r\n    index: 40,\r\n  },\r\n  {\r\n    path: '/user',\r\n    label: 'Gestione Utente',\r\n    exact: true,\r\n    componentToRender: lazyUser,\r\n    visible: false,\r\n    private: true,\r\n    index: 50,\r\n  },\r\n  {\r\n    path: '/stage2',\r\n    label: 'Torneo fase 2',\r\n    exact: true,\r\n    componentToRender: lazyStage2 as any,\r\n    visible: false,\r\n    private: true,\r\n    index: 100,\r\n  },\r\n  // TODO: creare pagina per route not found\r\n  {\r\n    path: '*',\r\n    label: 'Not Found',\r\n    exact: false,\r\n    componentToRender: lazyRedirectionControl,\r\n    visible: false,\r\n    private: true,\r\n    index: 1000,\r\n  },\r\n];\r\nexport default routes;\r\n\r\nexport function getLabelByPathname(pathName: string): string {\r\n  const element = routes.find((e) => e.path === pathName);\r\n  return element ? element.label : `route ${pathName} not found!`;\r\n}\r\n\r\nexport function getRouteByPathname(pathName: string): routeType | undefined {\r\n  return routes.find((e) => e.path === pathName);\r\n}\r\n","import React, { CSSProperties } from 'react';\r\nimport backgroundImage from '../../assets/header.jpg';\r\nimport { Jumbotron, Navbar, Nav, Button, Dropdown, ButtonGroup } from 'react-bootstrap';\r\nimport routes from '../core/routing/Routes';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SessionSelector } from 'redux/selectors/session.selector';\r\nimport { HomeIcon } from 'components/core/icons';\r\nimport { toast } from 'react-toastify';\r\nimport { RootAction, SessionAction } from 'redux/actions';\r\n\r\nconst applicationName = 'Calcetto C.S.M';\r\n\r\n// Header applicazione, include navbar\r\nexport const Header: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  const logout = async () => {\r\n    const response = await fetch('/api/v1/auth/logout');\r\n    if (response.ok) {\r\n      toast.success('Alla prossima....');\r\n      dispatch(SessionAction.updateSession({ user: undefined }));\r\n      dispatch(RootAction.logout());\r\n    } else {\r\n      toast.error('Qualcosa non ha funzionato...');\r\n    }\r\n  };\r\n\r\n  // const yellow = '#ffc107';\r\n  const jumboStyle: CSSProperties = {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundSize: 'cover',\r\n    padding: '60px 0px 10px 0px',\r\n    minHeight: '28vh',\r\n  };\r\n\r\n  const titleStyle: CSSProperties = {\r\n    color: 'white',\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <Jumbotron style={jumboStyle}>\r\n        <h1 style={{ margin: '5vh' }}>\r\n          <strong style={titleStyle}>{applicationName}</strong>\r\n        </h1>\r\n        {session.isAuthenticated ? (\r\n          <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n              <HomeIcon />\r\n              <span> Home</span>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                {routes.map((route) =>\r\n                  route.visible ? (\r\n                    route.private && !session.isAuthenticated ? null : (\r\n                      <Nav.Link as={Link} key={route.index} to={route.path} className=\"text-white\">\r\n                        {route.label}\r\n                      </Nav.Link>\r\n                    )\r\n                  ) : null\r\n                )}\r\n              </Nav>\r\n              {session.user ? (\r\n                <>\r\n                  <Dropdown alignRight as={ButtonGroup}>\r\n                    <Button style={{ opacity: 1 }} variant=\"outline-warning\" size=\"lg\" disabled>\r\n                      <strong style={{ color: '#64bd9c', fontSize: 'larger' }}>{session.user.username}</strong>\r\n                    </Button>\r\n                    <Dropdown.Toggle split variant=\"outline-warning\" id=\"dropdown-custom-2\" />\r\n                    <Dropdown.Menu className=\"default-background default-border-yellow\">\r\n                      <Dropdown.Item\r\n                        className=\"default-color-white default-hover-green\"\r\n                        as=\"button\"\r\n                        // FIXME: variant=\"warning\"\r\n                        onClick={logout}\r\n                        eventKey=\"1\"\r\n                      >\r\n                        Log out\r\n                      </Dropdown.Item>\r\n                      <Dropdown.Divider style={{ borderTopColor: '#ffc107' }} />\r\n                      <Dropdown.Item\r\n                        className=\"default-color-white default-hover-green\"\r\n                        as={Link}\r\n                        to={'/user'}\r\n                        eventKey=\"2\"\r\n                      >\r\n                        Gestione Utente\r\n                      </Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                </>\r\n              ) : null}\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        ) : null}\r\n      </Jumbotron>\r\n    </header>\r\n  );\r\n};\r\n","// https://github.com/openscript/react-example-authentication-redirection\r\n\r\nimport * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport { routeType, getLabelByPathname } from './Routes';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useSelector, connect } from 'react-redux';\r\nimport { SessionSelector } from 'redux/selectors/session.selector';\r\nimport { TournamentSelector } from 'redux/selectors';\r\n\r\n// HOC gestisce la visibilità dei componenti ed eventualmente reindirizza alla login\r\nexport const ProtectedRoute: React.FC<routeType> = (props) => {\r\n  const isAuthenticated = useSelector(SessionSelector.isAuthenticated);\r\n  const session = useSelector(SessionSelector.getSession);\r\n  const tournament = useSelector(TournamentSelector.getTournament);\r\n  return (\r\n    <Route\r\n      {...props}\r\n      render={(innerProps) => {\r\n        const { location } = innerProps;\r\n        console.log('ProtectedRoute : ', session, tournament, location);\r\n        // Se sono gia autenticato e sto chiedendo la login, reindirizzo alla home\r\n        if (isAuthenticated && location.pathname === '/login') {\r\n          console.log('ProtectedRoute => redirect to Home');\r\n          return <Redirect {...props} to={{ pathname: '/', state: { from: location } }} />;\r\n        }\r\n\r\n        // Se non è una rotta protetta\r\n        if (!props.private) {\r\n          console.log('ProtectedRoute => public route : ', { ...props });\r\n          return <props.componentToRender {...props} />;\r\n        }\r\n\r\n        // Se è una rotta privata e non sono autenticato devo andare alla login\r\n        if (!isAuthenticated) {\r\n          console.log('ProtectedRoute => redirect to Login : ', { ...session });\r\n          return <Redirect {...props} to={{ pathname: '/login', state: { from: location } }} />;\r\n        }\r\n        /**\r\n         * Se sono arrivato qui vuol dire che è una rotta protetta, che sono autenticato\r\n         * e che non sto chiedendo di andare alla login. Quindi direi che posso andare dove voglio...\r\n         */\r\n        console.log('ProtectedRoute => render component : ', getLabelByPathname(location.pathname));\r\n        return <props.componentToRender {...props} />;\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default connect(ProtectedRoute);\r\n","import React from 'react';\r\n\r\ninterface IErrorBoundaryProps {\r\n  readonly children: JSX.Element | JSX.Element[];\r\n}\r\n\r\ninterface IErrorBoundaryState {\r\n  readonly error: any;\r\n  readonly errorInfo: any;\r\n}\r\n\r\nclass ErrorBoundary extends React.Component<IErrorBoundaryProps, IErrorBoundaryState> {\r\n  readonly state: IErrorBoundaryState = { error: undefined, errorInfo: undefined };\r\n\r\n  componentDidCatch(error: any, errorInfo: any) {\r\n    this.setState({\r\n      error,\r\n      errorInfo,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { error, errorInfo } = this.state;\r\n    const { children } = this.props;\r\n    if (errorInfo) {\r\n      const errorDetails =\r\n        process.env.NODE_ENV === 'development' ? (\r\n          <details className=\"preserve-space\">\r\n            {error && error.toString()}\r\n            <br />\r\n            {errorInfo.componentStack}\r\n          </details>\r\n        ) : undefined;\r\n      return (\r\n        <div>\r\n          <h2 className=\"error\">An unexpected error has occurred.</h2>\r\n          {errorDetails}\r\n        </div>\r\n      );\r\n    }\r\n    return children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { CSSProperties } from 'react';\r\nimport { Badge } from 'react-bootstrap';\r\n\r\ninterface AppBadgeProps {}\r\nconst AppBadge: React.FC<AppBadgeProps> = () => {\r\n  const appVersion = process.env.REACT_APP_CLIENT_VERSION;\r\n  const commitHash = process.env.REACT_APP_CLIENT_COMMIT_HASH;\r\n\r\n  const style: CSSProperties = {\r\n    position: 'absolute',\r\n    top: '0.1em',\r\n    right: '0.1em',\r\n  };\r\n  return (\r\n    <h4 style={style}>\r\n      <Badge variant=\"info\">\r\n        <span>v.</span>\r\n        <strong>{appVersion}</strong>\r\n        <span>\r\n          <i>\r\n            <small> @ {commitHash}</small>\r\n          </i>\r\n        </span>\r\n      </Badge>\r\n    </h4>\r\n  );\r\n};\r\n\r\nexport default AppBadge;\r\n","import React, { Suspense, useEffect } from 'react';\r\n// Components\r\nimport { Header } from '../Header/Header';\r\nimport { LoadingModal } from '../core/generic/Commons';\r\n// Routing\r\nimport { Switch, useHistory } from 'react-router';\r\nimport routes from '../core/routing/Routes';\r\nimport { ProtectedRoute } from '../core/routing/ProtectedRoute';\r\nimport ErrorBoundary from '../core/errorBoundary';\r\n// Style\r\nimport './App.css';\r\nimport { Container } from 'react-bootstrap';\r\n// FontAwesome 5\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { far } from '@fortawesome/free-regular-svg-icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SessionAction } from 'redux/actions';\r\n// Toasts\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './toast.css';\r\nimport AppBadge from './badge';\r\nimport { SessionSelector } from 'redux/selectors';\r\n\r\nlibrary.add(fas, far);\r\n\r\nconst App: React.FC = (_) => {\r\n  const dispatch = useDispatch();\r\n  const currentHistory = useHistory();\r\n  const isLoading = useSelector(SessionSelector.isLoading);\r\n\r\n  // Check if user is already logged\r\n  useEffect(() => {\r\n    dispatch(SessionAction.checkAuthentication.request({ history: currentHistory }));\r\n  }, [currentHistory, dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary>\r\n        <Header />\r\n        <Container fluid style={{ marginBottom: '20vh' }}>\r\n          {/*<LogSessionContext /> */}\r\n          {/*<RedirectionControl />*/}\r\n          <ToastContainer autoClose={2000} />\r\n\r\n          {isLoading ? (\r\n            <LoadingModal show={true} message={'....Caricamento'} />\r\n          ) : (\r\n            <Suspense fallback={<LoadingModal show={true} message={'....Caricamento'} />}>\r\n              <Switch>\r\n                {routes.map((route) => (\r\n                  <ProtectedRoute {...route} key={route.index} />\r\n                ))}\r\n              </Switch>\r\n            </Suspense>\r\n          )}\r\n          <AppBadge />\r\n        </Container>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React, { StrictMode } from 'react';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from '../../redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport { LoadingModal } from 'components/core/generic/Commons';\r\n\r\nconst Entry: React.FC = () => (\r\n  <StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={<LoadingModal show={true} message={'....Caricamento'} />} persistor={persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  </StrictMode>\r\n);\r\n\r\nexport default Entry;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport 'typeface-roboto';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport it from 'date-fns/locale/it';\r\nimport { setDefaultLocale, registerLocale } from 'react-datepicker';\r\n\r\nimport Entry from './components/App/Entry';\r\n\r\nsetDefaultLocale('it');\r\nregisterLocale('it', it);\r\n\r\nReactDOM.render(<Entry />, document.getElementById('root'));\r\n\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nprocess.env.NODE_ENV !== 'production' ? serviceWorker.unregister() : serviceWorker.register();\r\n\r\n// Redefine console so it does not in production env\r\nif (process.env.NODE_ENV === 'production') {\r\n  if (!window.console) (window as any).console = {};\r\n  ['log', 'debug', 'warn', 'info'].forEach((e) => ((window as any).console[e] = () => {}));\r\n}\r\n","import { toast } from 'react-toastify';\r\n\r\nexport const handleError = (error: any, message: string): void => {\r\n  console.error(`${message}`, error);\r\n  toast.error(message);\r\n  throw new Error(`Something went wrong : ${message}`);\r\n};\r\n","import { createAsyncAction } from 'typesafe-actions';\r\nimport { defaultAsyncParams } from './constants';\r\nimport {\r\n  FetchPlayersResponse,\r\n  FetchPlayersRequest,\r\n  UpdatePlayerRequest,\r\n  UpdatePlayerResponse,\r\n  DeletePlayersResponse,\r\n  DeletePlayersRequest,\r\n} from 'redux/models/player.model';\r\n\r\nconst actionName = '[Player]';\r\nexport const PlayerAction = {\r\n  // fetch tournaments\r\n  fetchPlayers: createAsyncAction(...defaultAsyncParams(actionName, 'Fetch Palyers'))<\r\n    FetchPlayersRequest,\r\n    FetchPlayersResponse,\r\n    Error\r\n  >(),\r\n  savePlayer: createAsyncAction(...defaultAsyncParams(actionName, 'Save Player'))<\r\n    UpdatePlayerRequest,\r\n    UpdatePlayerResponse,\r\n    Error\r\n  >(),\r\n  deletePlayers: createAsyncAction(...defaultAsyncParams(actionName, 'Delete Player'))<\r\n    DeletePlayersRequest,\r\n    DeletePlayersResponse,\r\n    Error\r\n  >(),\r\n};\r\n","import { createAsyncAction, createAction } from 'typesafe-actions';\r\nimport { defaultParam, defaultAsyncParams } from './constants';\r\nimport {\r\n  CheckAuthenticationRequest,\r\n  WatchSessionRequest,\r\n  AuthenticationError,\r\n  AuthenticationResponse,\r\n  LoginRequest,\r\n  RegisterRequest,\r\n} from 'redux/models/session.model';\r\n\r\nconst actionName = '[Session]';\r\n\r\nexport const SessionAction = {\r\n  // Register new user\r\n  register: createAsyncAction(...defaultAsyncParams(actionName, 'Register User'))<\r\n    RegisterRequest,\r\n    AuthenticationResponse,\r\n    AuthenticationError\r\n  >(),\r\n  // Login\r\n  login: createAsyncAction(...defaultAsyncParams(actionName, 'Login User'))<\r\n    LoginRequest,\r\n    AuthenticationResponse,\r\n    AuthenticationError\r\n  >(),\r\n  // Check if user is already authenticate\r\n  checkAuthentication: createAsyncAction(...defaultAsyncParams(actionName, 'Check User Authentication'))<\r\n    CheckAuthenticationRequest,\r\n    AuthenticationResponse,\r\n    AuthenticationError\r\n  >(),\r\n  // Session watcher\r\n  sessionControl: createAsyncAction(...defaultAsyncParams(actionName, 'Session Watcher'))<\r\n    WatchSessionRequest,\r\n    AuthenticationResponse,\r\n    AuthenticationError\r\n  >(),\r\n  // set selected tournament\r\n  updateSession: createAction(...defaultParam(actionName, 'Set Session'))<AuthenticationResponse>(),\r\n};\r\n","import { RootState } from 'redux/models';\r\n\r\n// Get state from store\r\nexport const SessionSelector = {\r\n  isLoading: ({ sessionState: { isLoading } }: RootState) => isLoading,\r\n  isAdmin: ({ sessionState: { isAdmin } }: RootState) => isAdmin,\r\n  isAuthenticated: ({ sessionState: { isAuthenticated } }: RootState) => isAuthenticated,\r\n  getUser: ({ sessionState: { user } }: RootState) => user,\r\n  getSession: ({ sessionState }: RootState) => sessionState,\r\n};\r\n","import {\r\n  FetchPlayersRequest,\r\n  FetchPlayersResponse,\r\n  PlayerRole,\r\n  PlayerDTO,\r\n  DeletePlayersRequest,\r\n  DeletePlayersResponse,\r\n  UpdatePlayerResponse,\r\n  UpdatePlayerRequest,\r\n} from 'redux/models';\r\nimport { handleError } from './common';\r\n\r\nexport const fetchPlayers = async ({ tId, addEmpty }: FetchPlayersRequest): Promise<FetchPlayersResponse> => {\r\n  try {\r\n    const response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const result = await response.json();\r\n    return { results: addEmpty ? [...result, getEmptyPlayer('Nessun Giocatore')] : result };\r\n  } catch (e) {\r\n    handleError(e, 'Error players fetch');\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nexport const deletePlayers = async ({ players }: DeletePlayersRequest): Promise<DeletePlayersResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/player', {\r\n      method: 'DELETE',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(players),\r\n    });\r\n    await response.json();\r\n    return { players: response.ok ? players : [] };\r\n  } catch (e) {\r\n    handleError(e, 'Error players fetch');\r\n    return { players: [] };\r\n  }\r\n};\r\n\r\nexport const savePlayer = async ({ player }: UpdatePlayerRequest): Promise<UpdatePlayerResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/player', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(player),\r\n    });\r\n    const result = await response.json();\r\n    return { player: result };\r\n  } catch (e) {\r\n    handleError(e, 'Error players fetch');\r\n    return { player };\r\n  }\r\n};\r\n\r\nexport const getEmptyPlayer = (label?: string): PlayerDTO => ({\r\n  id: null,\r\n  name: '',\r\n  surname: '',\r\n  alias: '',\r\n  label: label || '',\r\n  role: PlayerRole.GoalKeeper,\r\n  email: '',\r\n  phone: '',\r\n  match_played: 0,\r\n  match_won: 0,\r\n  total_score: 0,\r\n  editable: false,\r\n  rowNumber: 0,\r\n});\r\n","import { RootState } from 'redux/models';\r\n\r\n// Get state from store\r\nexport const PairSelector = {\r\n  isLoading: ({ pairState: { isLoading } }: RootState) => isLoading,\r\n  getPairsList: ({ pairState: { pairList } }: RootState) => pairList,\r\n};\r\n","import { RootState } from 'redux/models';\r\n\r\n// Get state from store\r\nexport const PlayerSelector = {\r\n  isLoading: ({ pairState: { isLoading } }: RootState) => isLoading,\r\n  getPlayersList: ({ playerState: { playersList } }: RootState) => playersList,\r\n};\r\n","import { RootState } from 'redux/models';\r\n\r\n// Get state from store\r\nexport const Stage1Selector = {\r\n  isLoading: ({ stage1State: { isLoading } }: RootState) => isLoading,\r\n  getSelectedRows: ({ stage1State: { selectedRows } }: RootState) => selectedRows || null,\r\n  getSelectedPairs: ({ stage1State: { selectedPairs } }: RootState) => selectedPairs,\r\n  getNeedRefresh: ({ stage1State: { needRefresh } }: RootState) => needRefresh,\r\n  // Utilizzare una closure nel compoanente per accedere allo specifico stage\r\n  getStages: ({ stage1State: { stages } }: RootState) => stages,\r\n};\r\n","import { RootState } from 'redux/models';\r\n\r\n// Get state from store\r\nexport const Stage2Selector = {\r\n  isLoading: ({ stage2State: { isLoading } }: RootState) => isLoading,\r\n  getCells: ({ stage2State: { cells } }: RootState) => cells,\r\n  getRowsNumber: ({ stage2State: { rowsNumber } }: RootState) => rowsNumber,\r\n};\r\n","import React, { CSSProperties } from 'react';\r\nimport { Modal, Spinner, Toast, Alert, Row, Button, Container, Col } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { SessionSelector } from 'redux/selectors/session.selector';\r\nimport './style.css';\r\n\r\nconst modalStyle: CSSProperties = { color: 'whitesmoke', backgroundColor: '#343a40', borderColor: '#ffc107' };\r\nconst fancyModalFooter = (\r\n  <>\r\n    <Spinner animation=\"border\" variant=\"light\" />\r\n    <Spinner animation=\"border\" variant=\"primary\" />\r\n    <Spinner animation=\"border\" variant=\"secondary\" />\r\n    <Spinner animation=\"border\" variant=\"success\" />\r\n    <Spinner animation=\"border\" variant=\"danger\" />\r\n    <Spinner animation=\"border\" variant=\"warning\" />\r\n    <Spinner animation=\"border\" variant=\"info\" />\r\n    <Spinner animation=\"border\" variant=\"dark\" />\r\n  </>\r\n);\r\n// Loading Modal\r\ninterface LoadingModalPropsType {\r\n  show: boolean;\r\n  title?: string;\r\n  message?: string;\r\n  onHide?: () => void;\r\n}\r\n\r\nexport const LoadingModal: React.FC<LoadingModalPropsType> = ({\r\n  title = 'Caricamento....',\r\n  message = 'Caricamento....',\r\n  show,\r\n  onHide = () => (show = false),\r\n}) => (\r\n  <Modal show={show} onHide={onHide} size=\"lg\" centered style={{ borderColor: '#ffc107', borderWidth: '3px' }}>\r\n    <Modal.Header closeButton style={modalStyle}>\r\n      <Modal.Title>{title}</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body className=\"text-center font-weight-bold\" style={modalStyle}>\r\n      {message}\r\n    </Modal.Body>\r\n    <Modal.Footer style={modalStyle}>{fancyModalFooter}</Modal.Footer>\r\n  </Modal>\r\n);\r\n\r\nexport interface YesNoModalProps {\r\n  title: string;\r\n  show: boolean;\r\n  message: string;\r\n  onHide?: () => void;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const YesNoModal: React.FC<YesNoModalProps> = ({\r\n  title,\r\n  message,\r\n  show,\r\n  onHide = () => (show = false),\r\n  onClick,\r\n}) => (\r\n  <Modal\r\n    className=\"YesNoModal\"\r\n    show={show}\r\n    onHide={onHide}\r\n    centered\r\n    style={{ borderColor: '#ffc107', borderWidth: '3px' }}\r\n  >\r\n    <Modal.Header closeButton style={modalStyle}>\r\n      <Modal.Title>{title}</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body style={modalStyle}>\r\n      <Container fluid>\r\n        <Row style={{ fontSize: 'larger' }}>{message}</Row>\r\n        <Row style={{ padding: '2rem 0rem 0rem 0rem' }}>\r\n          <Col>\r\n            <Button variant=\"outline-secondary\" className=\"float-left\" onClick={() => onHide()}>\r\n              Annulla\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button variant=\"outline-success\" className=\"float-right\" onClick={() => onClick()}>\r\n              Conferma\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Modal.Body>\r\n    <Modal.Footer style={modalStyle}>{fancyModalFooter}</Modal.Footer>\r\n  </Modal>\r\n);\r\n\r\n// Toasts\r\nexport interface IToastProps {\r\n  message: string;\r\n  type?: toastType;\r\n}\r\n\r\nexport type toastType = 'success' | 'warning' | 'danger';\r\n\r\nexport const GenericToast: React.FC<IToastProps> = ({ message, type }) =>\r\n  message && message !== '' ? (\r\n    <Toast className=\"rounded mr-2 mx-auto\" key={`${type}-message`} show={message !== ''}>\r\n      <Toast.Header closeButton={false}>\r\n        <strong>Operazione completata !</strong>\r\n      </Toast.Header>\r\n      <Toast.Body>\r\n        <Alert variant={type}>{message}</Alert>\r\n      </Toast.Body>\r\n    </Toast>\r\n  ) : null;\r\n\r\n// Util per loggare i dati utente in sessione\r\nexport const LogSessionContext: React.FC<{}> = () => {\r\n  const session = useSelector(SessionSelector.getSession);\r\n\r\n  return (\r\n    <>\r\n      {Object.entries(session).map(([key, value]) => (\r\n        <p>\r\n          {key} : {value}\r\n        </p>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\n// TODO: Componente fallback se route non trovata\r\nexport function RedirectionControl(props: any): JSX.Element {\r\n  const location = useLocation();\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Current Ruote : <code>{location.pathname}</code>\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n","export * from './common.model';\r\nexport * from './pair.model';\r\nexport * from './player.model';\r\nexport * from './tournament.model';\r\nexport * from './session.model';\r\nexport * from './stage1.model';\r\nexport * from './stage2.model';\r\n","import { getEmptyPlayer } from 'redux/services/player.service';\r\nimport { Styles } from 'react-select';\r\nimport { PairDTO } from '../../redux/models';\r\n\r\nexport const getEmptyRowModel = (label?: string): PairDTO => ({\r\n  id: null,\r\n  tId: 0,\r\n  rowNumber: 0,\r\n  player1: getEmptyPlayer(),\r\n  player2: getEmptyPlayer(),\r\n  alias: label || '',\r\n  stage1Name: '',\r\n  placement: 0,\r\n  paid1: false,\r\n  paid2: false,\r\n});\r\n\r\nexport const fetchPairs = (setterFunction: React.Dispatch<React.SetStateAction<PairDTO[]>>, tId: number) => {\r\n  (async () => {\r\n    const response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n      method: 'GET',\r\n    });\r\n    const result = await response.json();\r\n    setterFunction(result);\r\n  })();\r\n};\r\n\r\nexport const valueFormatter = (selectedOption: PairDTO) =>\r\n  selectedOption.alias ? `${selectedOption.alias}` : createAlias(selectedOption);\r\n\r\nexport function createAlias(selectedOption: PairDTO) {\r\n  let value = `${selectedOption.rowNumber} : `;\r\n  const { player1, player2 } = selectedOption;\r\n  value += player1!.alias ? player1!.alias : player1!.name;\r\n  value += ' - ' + player2!.alias ? player2!.alias : player2!.name;\r\n  // value += ` ( ${id} )`;\r\n  return value;\r\n}\r\n\r\nexport const customStyles: Partial<Styles> | undefined = {\r\n  // menuList: (provided, state) => ({ ...provided, border: '1px solid #ffc107' }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: 'white',\r\n    color: 'black',\r\n    '&:hover': {\r\n      backgroundColor: '#64bd9c',\r\n      color: 'white',\r\n    },\r\n  }),\r\n  input: (provided) => ({ ...provided, backgroundColor: '#64bd9c' }),\r\n  control: (provided) => ({ ...provided, height: '3vmin', marginBottom: 'auto' }),\r\n  singleValue: (provided) => ({ ...provided }),\r\n  valueContainer: (provided) => ({ ...provided, height: '100%', fontSize: 'larger' }),\r\n};\r\n\r\nexport const fetchData = async (tId: number) => {\r\n  // Fetch Pairs\r\n  let response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  const rows = await response.json();\r\n\r\n  response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  const result = await response.json();\r\n  const players = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n\r\n  console.log('rows : ', rows);\r\n  return { rows, players };\r\n};\r\n","import {\r\n  FetchTournamentsRequest,\r\n  FetchTournamentsResponse,\r\n  TournamentDTO,\r\n  PostTournamentRequest,\r\n  PostTournamentResponse,\r\n  UpdateTournamentRequest,\r\n  UpdateTournamentResponse,\r\n  IsValidTournamentRequest,\r\n  IsValidTournamentResponse,\r\n} from '../models/tournament.model';\r\nimport { handleError } from './common';\r\n\r\nexport const fetchTournaments = async (request: FetchTournamentsRequest): Promise<FetchTournamentsResponse> => {\r\n  try {\r\n    const response = await fetch(request?.tId ? `/api/v1/tournament/${request.tId}` : '/api/v1/tournament/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const results: TournamentDTO[] = await response.json();\r\n    return { results };\r\n  } catch (e) {\r\n    handleError(e, 'Error fetching Tournaments');\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\nexport const postTournament = async ({ model }: PostTournamentRequest): Promise<PostTournamentResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/tournament', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    const result: TournamentDTO = await response.json();\r\n    console.log('postTournament : ', result);\r\n\r\n    return { result };\r\n  } catch (e) {\r\n    handleError(e, 'Error updating Tournament');\r\n    return { result: null };\r\n  }\r\n};\r\n\r\nexport const updateTournament = async ({ model }: UpdateTournamentRequest): Promise<UpdateTournamentResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/tournament', {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    const result: TournamentDTO = await response.json();\r\n    return { result };\r\n  } catch (e) {\r\n    handleError(e, 'Error updating Tournament');\r\n    return { result: model };\r\n  }\r\n};\r\n\r\nexport const isValidTournament = async ({ model }: IsValidTournamentRequest): Promise<IsValidTournamentResponse> => {\r\n  try {\r\n    const response = await fetch('/api/v1/tournament/isValid', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(model),\r\n    });\r\n    const { isValid, errorMessage }: IsValidTournamentResponse = await response.json();\r\n    return { isValid, errorMessage };\r\n  } catch (e) {\r\n    handleError(e, 'Error validating Tournament');\r\n    return { isValid: false, errorMessage: '' };\r\n  }\r\n};\r\n","import { FetchStage2Response, FetchStage2Request, ICell } from 'redux/models';\r\nimport { handleError } from './common';\r\nimport { getEmptyRowModel } from 'components/Pair/helper';\r\n\r\nexport const deleteStage2 = async (tId: number) => {\r\n  const response = await fetch('/api/v1/stage2', {\r\n    method: 'DELETE',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ tId }),\r\n  });\r\n  await response.json();\r\n};\r\n\r\nexport const updateCells = async (cell1: ICell, cell2: ICell | null) => {\r\n  try {\r\n    const response = await fetch('/api/v1/stage2/cells', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ cell1, cell2 }),\r\n    });\r\n    await response.json();\r\n  } catch (e) {\r\n    handleError(e, 'Error stage2 update');\r\n  }\r\n};\r\n\r\nexport const fetchPairsStage2 = async (tId: number) => {\r\n  try {\r\n    const response = await fetch(`/api/v1/stage2/pairs/${tId}`);\r\n    const result = await response.json();\r\n    return { pairs: [getEmptyRowModel('-'), ...result.pairs] };\r\n  } catch (e) {\r\n    handleError(e, 'Error stage2 fetching pairs');\r\n  }\r\n  return { pairs: [] };\r\n};\r\n\r\nexport const fetchStage2 = async ({\r\n  count: rowsNumber,\r\n  tournamentId,\r\n}: FetchStage2Request): Promise<FetchStage2Response> => {\r\n  try {\r\n    const response = await fetch('/api/v1/stage2', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ tournamentId, rowsNumber }),\r\n    });\r\n    const cells = await response.json();\r\n    return { cells, rowsNumber };\r\n  } catch (e) {\r\n    handleError(e, 'Error stage2 fetch');\r\n    return { cells: [], rowsNumber };\r\n  }\r\n};\r\n"],"sourceRoot":""}