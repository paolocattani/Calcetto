{"version":3,"sources":["common.module.css","components/Player/helper.js","components/Player/header.tsx","components/Player/table.tsx"],"names":["module","exports","nameFilter","surnameFilter","aliasFilter","roleFilter","emailFilter","phoneFilter","filterFactory","filterTableFactory","cellEditProps","isAdmin","dispatch","cellEditFactory","mode","blurToSave","autoSelectText","afterSaveCell","oldValue","newValue","player","column","playerColumns","dataField","text","editable","headerStyle","colIndex","width","headerClasses","filter","textFilter","placeholder","getFilter","selectFilter","options","PlayerRole","GoalKeeper","Striker","Master","editor","type","Type","SELECT","getOptions","_","value","label","hidden","tableHeader","withRouter","useDispatch","currentHistory","useHistory","isLoading","useSelector","PlayerSelector","SessionSelector","playersList","getPlayersList","useState","selectedRows","setSelectedRows","useEffect","PlayerAction","fetchPlayers","request","handleOnSelect","row","isSelected","prevValue","find","e","id","selectRow","nonSelectable","map","onSelect","onSelectAll","rows","forEach","style","backgroundColor","hideSelectAll","hideSelectColumn","selectColumnStyle","checked","disabled","rowIndex","rowKey","addRow","savePlayer","getEmptyPlayer","deleteRow","deletePlayers","players","goBack","push","show","message","Col","Row","className","commonStyle","toolsBarContainer","toolsBar","Button","variant","onClick","clearAllFilter","length","bootstrap4","keyField","data","columns","cellEdit","caption","noDataIndication","striped","hover"],"mappings":"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","file":"static/js/11.9f9f9048.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"functionsList\":\"common_functionsList__3B3UB\",\"toolsBarContainer\":\"common_toolsBarContainer__1nanA\",\"toolsBarRow\":\"common_toolsBarRow__r8q12\"};","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport filterTableFactory, { textFilter, selectFilter } from 'react-bootstrap-table2-filter';\r\nimport { Type } from 'react-bootstrap-table2-editor';\r\nimport { getEmptyPlayer } from 'redux/services/player.service';\r\nimport { PlayerRole } from '../../redux/models/player.model';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\n\r\n// Filter\r\nlet nameFilter;\r\nlet surnameFilter;\r\nlet aliasFilter;\r\nlet roleFilter;\r\nlet emailFilter;\r\nlet phoneFilter;\r\n\r\nexport function clearAllFilter(isAdmin) {\r\n  nameFilter('');\r\n  surnameFilter('');\r\n  aliasFilter('');\r\n  roleFilter('');\r\n  if (isAdmin) {\r\n    emailFilter('');\r\n    phoneFilter('');\r\n  }\r\n}\r\n\r\nexport const filterFactory = filterTableFactory();\r\nexport const cellEditProps = (isAdmin, dispatch) =>\r\n  cellEditFactory({\r\n    mode: isAdmin ? 'click' : 'none',\r\n    blurToSave: true,\r\n    autoSelectText: true,\r\n    afterSaveCell: (oldValue, newValue, player, column) => dispatch(player),\r\n  });\r\n\r\n// Columns default\r\nconst playerColumns = (isAdmin) => [\r\n  { dataField: 'rowNumber', text: 'ID', editable: false, headerStyle: (column, colIndex) => ({ width: '3%' }) },\r\n  {\r\n    dataField: 'name',\r\n    text: 'Nome',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    headerStyle: (column, colIndex) => ({ width: isAdmin ? '16%' : '25%' }),\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (nameFilter = filter),\r\n    }),\r\n  },\r\n  {\r\n    dataField: 'surname',\r\n    text: 'Cognome',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    headerStyle: (column, colIndex) => ({ width: isAdmin ? '16%' : '25%' }),\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (surnameFilter = filter),\r\n    }),\r\n  },\r\n  {\r\n    dataField: 'alias',\r\n    text: 'Alias',\r\n    headerClasses: 'player-table-header-element',\r\n    headerStyle: (column, colIndex) => ({ width: isAdmin ? '17%' : '25%' }),\r\n    autoSelectText: true,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (aliasFilter = filter),\r\n    }),\r\n  },\r\n  {\r\n    dataField: 'role',\r\n    text: 'Roulo',\r\n    headerClasses: 'player-table-header-element',\r\n    headerStyle: (column, colIndex) => ({ width: `${isAdmin ? '11' : '15'}%` }),\r\n    filter: selectFilter({\r\n      placeholder: 'Filtra...',\r\n      options: {\r\n        [PlayerRole.GoalKeeper]: PlayerRole.GoalKeeper,\r\n        [PlayerRole.Striker]: PlayerRole.Striker,\r\n        [PlayerRole.Master]: PlayerRole.Master,\r\n      },\r\n      getFilter: (filter) => (roleFilter = filter),\r\n    }),\r\n    editor: {\r\n      type: Type.SELECT,\r\n      getOptions: (_) => {\r\n        return [\r\n          { value: PlayerRole.GoalKeeper, label: PlayerRole.GoalKeeper },\r\n          { value: PlayerRole.Striker, label: PlayerRole.Striker },\r\n          { value: PlayerRole.Master, label: PlayerRole.Master },\r\n        ];\r\n      },\r\n    },\r\n  },\r\n  {\r\n    dataField: 'email',\r\n    text: 'Email',\r\n    headerStyle: (column, colIndex) => ({ width: '20%' }),\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    hidden: !isAdmin,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (emailFilter = filter),\r\n    }),\r\n  },\r\n  {\r\n    dataField: 'phone',\r\n    headerStyle: (column, colIndex) => ({ width: '10%' }),\r\n    text: 'Telefono',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    hidden: !isAdmin,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (phoneFilter = filter),\r\n    }),\r\n  },\r\n  { dataField: 'match_played', text: 'Partite Giocate', hidden: true },\r\n  { dataField: 'match_won', text: 'Vittorie', hidden: true },\r\n  { dataField: 'total_score', text: 'Punteggio', hidden: true },\r\n];\r\n\r\nexport default playerColumns;\r\n\r\n// Custom export button\r\nexport const ExportCSVButton = (props) => (\r\n  <Button disabled className=\"btn btn-success\" onClick={() => props.onExport()}>\r\n    Esporta in CSV\r\n  </Button>\r\n);\r\n\r\nexport const fetchPlayers = (setterFunction, tId) => {\r\n  (async () => {\r\n    const response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const result = await response.json();\r\n    const model = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n    console.log('fetchPlayers.result : ', model);\r\n    setterFunction(model);\r\n  })();\r\n};\r\n\r\nexport function valueFormatter(selectedOption) {\r\n  let value = '';\r\n  if (!selectedOption) return '';\r\n  if (selectedOption.alias) {\r\n    value = selectedOption.alias;\r\n  } else {\r\n    value = selectedOption.surname ? `${selectedOption.name} - ${selectedOption.surname}` : selectedOption.name;\r\n  }\r\n  return value;\r\n}\r\n","import React from 'react';\r\n\r\n// FIXME: change to tounament name\r\n//const tableHeader: React.FC<{ saved: string }> = saved => {\r\nconst tableHeader: React.FC = _ => {\r\n  return (\r\n    <h3>\r\n      <b>Gestione giocatori</b>\r\n    </h3>\r\n  );\r\n};\r\n\r\nexport default tableHeader;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { withRouter, useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport BootstrapTable, { ColumnDescription, SelectRowProps } from 'react-bootstrap-table-next';\r\n// style\r\nimport { Button, Row, Col } from 'react-bootstrap';\r\nimport './style.css';\r\nimport commonStyle from '../../common.module.css';\r\n//\r\nimport columns, { clearAllFilter, cellEditProps, filterFactory } from './helper';\r\nimport TableHeader from './header';\r\nimport { LoadingModal } from '../core/generic/Commons';\r\n\r\nimport { PlayerDTO } from 'redux/models';\r\nimport { PlayerAction } from 'redux/actions';\r\nimport { getEmptyPlayer } from 'redux/services/player.service';\r\nimport { PlayerSelector, SessionSelector } from 'redux/selectors';\r\nimport { TrashIcon, PlusIcon, BroomIcon, HomeIcon } from '../core/icons';\r\n\r\ninterface PlayerProps {}\r\nconst PlayerTable: React.FC<PlayerProps> = () => {\r\n  const dispatch = useDispatch();\r\n  const currentHistory = useHistory();\r\n  // From Store\r\n  const isLoading = useSelector(PlayerSelector.isLoading);\r\n  const isAdmin = useSelector(SessionSelector.isAdmin);\r\n  const playersList = useSelector(PlayerSelector.getPlayersList);\r\n  // Component State\r\n  const [selectedRows, setSelectedRows] = useState<PlayerDTO[]>([]);\r\n\r\n  // Effetcs\r\n  useEffect(() => {\r\n    dispatch(PlayerAction.fetchPlayers.request({}));\r\n  }, [dispatch]);\r\n\r\n  const toolsBar = () => (\r\n    <Col className={commonStyle.toolsBarContainer}>\r\n      <div className={commonStyle.toolsBar}>\r\n        <Button variant=\"secondary\" className=\"float-left align-middle\" onClick={goBack}>\r\n          <HomeIcon />\r\n          <span> Home</span>\r\n        </Button>\r\n        {isAdmin ? (\r\n          <Button variant=\"success\" onClick={addRow}>\r\n            <PlusIcon />\r\n            <span> Aggiungi giocatore</span>\r\n          </Button>\r\n        ) : null}\r\n        <Button variant=\"dark\" onClick={() => clearAllFilter(isAdmin)}>\r\n          <BroomIcon />\r\n          <span> Pulisci Filtri</span>\r\n        </Button>\r\n        {isAdmin ? (\r\n          <Button variant=\"danger\" className=\"float-right\" onClick={deleteRow} disabled={selectedRows.length === 0}>\r\n            <TrashIcon /> {selectedRows.length > 1 ? 'Elimina giocatori' : 'Elimina giocatore'}\r\n          </Button>\r\n        ) : null}\r\n      </div>\r\n    </Col>\r\n  );\r\n\r\n  const handleOnSelect = (row: PlayerDTO, isSelected: boolean) => {\r\n    setSelectedRows((prevValue) =>\r\n      !!prevValue.find((e) => e.id === row.id)\r\n        ? isSelected\r\n          ? selectedRows\r\n          : selectedRows.filter((e) => e.id !== row.id)\r\n        : isSelected\r\n        ? [row, ...selectedRows]\r\n        : selectedRows\r\n    );\r\n    return true;\r\n  };\r\n\r\n  const selectRow: SelectRowProps<PlayerDTO> = {\r\n    mode: 'checkbox',\r\n    nonSelectable: playersList.filter((e) => e.id && !e.editable).map((e) => e.id!),\r\n    onSelect: handleOnSelect,\r\n    onSelectAll: (isSelected, rows) => rows.forEach((row) => handleOnSelect(row, isSelected)),\r\n    style: { backgroundColor: '#c8e6c9' },\r\n    hideSelectAll: !playersList.find((e) => e.editable),\r\n    hideSelectColumn: !playersList.find((e) => e.editable) || !isAdmin,\r\n    selectColumnStyle: ({ checked, disabled, rowIndex, rowKey }) =>\r\n      playersList[rowIndex].editable ? {} : { backgroundColor: '#dc3545' },\r\n  };\r\n\r\n  const addRow = () => dispatch(PlayerAction.savePlayer.request({ player: getEmptyPlayer() }));\r\n  const deleteRow = () => {\r\n    if (!selectedRows) return;\r\n    dispatch(PlayerAction.deletePlayers.request({ players: selectedRows }));\r\n    setSelectedRows([]);\r\n  };\r\n\r\n  function goBack() {\r\n    currentHistory.push('/');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <LoadingModal show={isLoading} message={'Caricamento'} />\r\n      <Col>\r\n        <Row>{toolsBar()}</Row>\r\n        <Row>\r\n          <Col>\r\n            <BootstrapTable\r\n              bootstrap4\r\n              keyField=\"id\"\r\n              data={playersList}\r\n              columns={columns(isAdmin) as ColumnDescription<PlayerDTO, PlayerDTO>[]}\r\n              cellEdit={cellEditProps(isAdmin, (player: PlayerDTO) =>\r\n                dispatch(PlayerAction.savePlayer.request({ player }))\r\n              )}\r\n              selectRow={selectRow}\r\n              caption={<TableHeader />}\r\n              filter={filterFactory}\r\n              headerClasses=\"default-background default-color-yellow\"\r\n              noDataIndication={() => <p>Nessun dato reperito</p>}\r\n              striped\r\n              hover\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PlayerTable);\r\n"],"sourceRoot":""}