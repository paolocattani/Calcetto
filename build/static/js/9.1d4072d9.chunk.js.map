{"version":3,"sources":["components/core/icons.tsx","selectors/tournament.selector.ts","components/Player/helper.js","components/Pair/header.tsx","components/Pair/noData.tsx","components/Player/select.tsx","components/Pair/editor.js","components/Pair/table.tsx"],"names":["Icon","size","prefix","iconName","color","icon","findIconDefinition","TrashIcon","SaveIcon","RightArrowIcon","ToggleOn","ToggleOff","TrophyIcon","DoubleRightIcon","BanIcon","TournamentSelector","isLoading","tournamentState","getTournament","tournament","getTournamentsList","tournamentsList","nameFilter","surnameFilter","aliasFilter","roleFilter","emailFilter","phoneFilter","selectOptions","Portiere","Attaccante","Master","clearAllFilter","playerColumns","isEditable","dataField","text","editable","headerStyle","column","colIndex","width","headerClasses","autoSelectText","filter","textFilter","placeholder","getFilter","selectFilter","options","editor","type","Type","SELECT","getOptions","_","value","label","hidden","valueFormatter","selectedOption","alias","surname","name","TableHeader","useSelector","toUpperCase","translateTournamentProgress","progress","noData","addRow","optionsLength","players","diff","Button","variant","onClick","disabled","to","PlayerSelection","React","forwardRef","ref","styles","row","columnIndex","onUpdate","onSelect","useState","setSelectedOption","onChange","actionMeta","id","isSearchable","isClearable","columns","align","editorRenderer","editorProps","rowIndex","customStyles","split","map","e","CHECKBOX","style","content","backgroundColor","withRouter","session","SessionSelector","getSession","currentHistory","useHistory","state","message","setIsLoading","messageInitialState","setMessage","rows","data","setData","selectedRows","setSelectedRows","stage1Number","setStage1Number","newRowsNumber","setNewRowsNumber","showErrorMessage","setTimeout","showSuccessMessage","index","a","emptyRow","getEmptyRowModel","tId","fetch","method","headers","body","JSON","stringify","response","json","result","rowNumber","length","current","addMultipleRows","ii","deleteRow","forEach","player1","push","player2","sort","e1","e2","localeCompare","find","selectedRow","updateOptions","player","selected","useEffect","fetchData","selectedElement","newRowsElement","rowElement","getEmptyPlayer","confirmPairs","missingStage1Name","stage1Name","missingPairs","stageName","invalidStage","pairsInStage","reduce","allNames","MIN_PAIR_PER_STAGE","TournamentProgress","Stage1","console","log","selectRow","mode","isSelected","found","onSelectAll","deleteStage1","PairsSelection","setStage1Name","names","newRows","error","availableRows","Math","floor","accumulator","deleteDisabled","deleteTooltipMessage","rightOuter","className","fontSize","fontWeight","padding","Row","show","Col","md","sm","margin","InputGroup","Prepend","Text","FormControl","aria-label","step","min","max","event","Number","currentTarget","Stage2","Append","ListGroup","Item","action","OverlayTrigger","placement","key","overlay","Tooltip","pointerEvents","bootstrap4","keyField","cellEdit","cellEditFactory","blurToSave","afterSaveCell","oldValue","newValue","noDataIndication","caption","striped","hover","leftOuter","isAdmin"],"mappings":"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","file":"static/js/9.1d4072d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { findIconDefinition, SizeProp, IconPrefix, IconName } from '@fortawesome/fontawesome-svg-core';\r\n\r\ninterface IconProps {\r\n  color?: string;\r\n  size?: SizeProp;\r\n}\r\n\r\ninterface AbstractIconProps extends IconProps {\r\n  prefix: IconPrefix;\r\n  iconName: IconName;\r\n}\r\n\r\nconst Icon: React.FC<AbstractIconProps> = ({ size, prefix, iconName, color }) => (\r\n  <FontAwesomeIcon color={color} size={size} icon={findIconDefinition({ prefix, iconName })} />\r\n);\r\n\r\n// Regular\r\nexport const TrashIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"far\" iconName=\"trash-alt\" />\r\n);\r\nexport const SaveIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"far\" iconName=\"save\" />\r\n);\r\nexport const RightArrowIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} prefix=\"fas\" iconName=\"arrow-alt-circle-right\" />\r\n);\r\n\r\n// Solid\r\nexport const ToggleOn: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"toggle-on\" />\r\n);\r\nexport const ToggleOff: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"toggle-off\" />\r\n);\r\nexport const PlusIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"plus\" />\r\n);\r\nexport const TrophyIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"trophy\" />\r\n);\r\nexport const DoubleRightIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"angle-double-right\" />\r\n);\r\nexport const BanIcon: React.FC<IconProps> = ({ size, color }) => (\r\n  <Icon size={size} color={color} prefix=\"fas\" iconName=\"ban\" />\r\n);\r\n","import { RootState } from 'models/common.model';\r\nimport { TournamentDTO } from 'models/tournament.model';\r\n\r\n// Get state from store\r\nexport const TournamentSelector = {\r\n  isLoading({ tournamentState: { isLoading } }: RootState): boolean {\r\n    return isLoading;\r\n  },\r\n  // Get selected Tournament\r\n  getTournament({ tournamentState: { tournament } }: RootState): TournamentDTO | null {\r\n    return tournament;\r\n  },\r\n  // Get tournament List\r\n  getTournamentsList({ tournamentState: { tournamentsList } }: RootState): TournamentDTO[] {\r\n    return tournamentsList;\r\n  },\r\n};\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { textFilter, selectFilter } from 'react-bootstrap-table2-filter';\r\nimport { Type } from 'react-bootstrap-table2-editor';\r\nimport { getEmptyPlayer } from 'services/player.service';\r\n\r\n// options for role column\r\nconst selectOptions = {\r\n  Portiere: 'Portiere',\r\n  Attaccante: 'Attaccante',\r\n  Master: 'Master',\r\n};\r\n\r\n// Filter\r\nlet nameFilter;\r\nlet surnameFilter;\r\nlet aliasFilter;\r\nlet roleFilter;\r\nlet emailFilter;\r\nlet phoneFilter;\r\n\r\nexport function clearAllFilter() {\r\n  nameFilter('');\r\n  surnameFilter('');\r\n  aliasFilter('');\r\n  roleFilter('');\r\n  emailFilter('');\r\n  phoneFilter('');\r\n}\r\n\r\n// Columns default\r\nconst playerColumns = (isEditable) => [\r\n  { dataField: 'id', text: 'ID', editable: false, headerStyle: (column, colIndex) => ({ width: '3%' }) },\r\n  {\r\n    dataField: 'name',\r\n    text: 'Nome',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '16%' : '25%' }),\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (nameFilter = filter),\r\n    }),\r\n  },\r\n  {\r\n    dataField: 'surname',\r\n    text: 'Cognome',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '16%' : '25%' }),\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (surnameFilter = filter),\r\n    }),\r\n  },\r\n  {\r\n    dataField: 'alias',\r\n    text: 'Alias',\r\n    headerClasses: 'player-table-header-element',\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '17%' : '25%' }),\r\n    autoSelectText: true,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (aliasFilter = filter),\r\n    }),\r\n  },\r\n  {\r\n    dataField: 'role',\r\n    text: 'Roulo',\r\n    headerClasses: 'player-table-header-element',\r\n    headerStyle: (column, colIndex) => ({ width: `${isEditable ? '11' : '15'}%` }),\r\n    filter: selectFilter({\r\n      placeholder: 'Filtra...',\r\n      options: selectOptions,\r\n      getFilter: (filter) => (roleFilter = filter),\r\n    }),\r\n    editor: {\r\n      type: Type.SELECT,\r\n      getOptions: (_) => {\r\n        return [\r\n          { value: 'Portiere', label: 'Portiere' },\r\n          { value: 'Attaccante', label: 'Attaccante' },\r\n          { value: 'Master', label: 'Master' },\r\n        ];\r\n      },\r\n    },\r\n  },\r\n  {\r\n    dataField: 'email',\r\n    text: 'Email',\r\n    headerStyle: (column, colIndex) => ({ width: '20%' }),\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    hidden: !isEditable,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (emailFilter = filter),\r\n    }),\r\n  },\r\n  {\r\n    dataField: 'phone',\r\n    headerStyle: (column, colIndex) => ({ width: '10%' }),\r\n    text: 'Telefono',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    hidden: !isEditable,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: (filter) => (phoneFilter = filter),\r\n    }),\r\n  },\r\n  { dataField: 'match_played', text: 'Partite Giocate', hidden: true },\r\n  { dataField: 'match_won', text: 'Vittorie', hidden: true },\r\n  { dataField: 'total_score', text: 'Punteggio', hidden: true },\r\n];\r\n\r\nexport default playerColumns;\r\n\r\n// Custom export button\r\nexport const ExportCSVButton = (props) => {\r\n  return (\r\n    <Button disabled className=\"btn btn-success\" onClick={() => props.onExport()}>\r\n      Esporta in CSV\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const fetchPlayers = (setterFunction, tId) => {\r\n  (async () => {\r\n    const response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n    const result = await response.json();\r\n    const model = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n    console.log('fetchPlayers.result : ', model);\r\n    setterFunction(model);\r\n  })();\r\n};\r\n\r\nexport function valueFormatter(selectedOption) {\r\n  let value = '';\r\n  if (!selectedOption) return '';\r\n  if (selectedOption.alias) {\r\n    value = selectedOption.alias;\r\n  } else {\r\n    value = selectedOption.surname ? `${selectedOption.name} - ${selectedOption.surname}` : selectedOption.name;\r\n  }\r\n  return value;\r\n}\r\n","import React from 'react';\r\nimport { translateTournamentProgress } from '../core/utils';\r\nimport { useSelector } from 'react-redux';\r\nimport { TournamentSelector } from 'selectors/tournament.selector';\r\n\r\nconst TableHeader: React.FC<{}> = () => {\r\n  const tournament = useSelector(TournamentSelector.getTournament);\r\n  return tournament ? (\r\n    <h3>\r\n      <p>\r\n        <b>\r\n          \"<strong>{tournament?.name.toUpperCase()}</strong>\"\r\n          <small> @ {translateTournamentProgress(tournament!.progress)}</small>\r\n        </b>\r\n      </p>\r\n    </h3>\r\n  ) : null;\r\n};\r\n\r\nexport default TableHeader;\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface NoDataProps {\r\n  optionsLength: number;\r\n  isEditable: boolean;\r\n  addRow: () => void;\r\n}\r\n\r\nconst noData: React.FC<NoDataProps> = ({ addRow, optionsLength, isEditable }) => {\r\n  const MIN_PLAYERS = 8;\r\n  const players = optionsLength - 1;\r\n  const diff = players < MIN_PLAYERS ? MIN_PLAYERS - players : 0;\r\n  if (!optionsLength) return null;\r\n  return players >= MIN_PLAYERS ? (\r\n    <>\r\n      <p> Aggiungi le coppie per questo torneo...</p>\r\n      <Button variant=\"success\" onClick={addRow} disabled={!isEditable}>\r\n        Aggiungi Coppia\r\n      </Button>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <p>Ci sono solo {players} giocatori definiti ma devono essercene almeno 8 per poter formare un torneo.</p>\r\n      <p>{diff === 1 ? 'Devi creare un altro giocatore...' : `Devi creare almeno altri ${diff}`}</p>\r\n      <Link to={'/player'}>\r\n        <Button variant=\"success\">Gestione Giocatori</Button>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default noData;\r\n","import React, { useState } from 'react';\r\nimport Select, { Styles, ValueType, ActionMeta } from 'react-select';\r\nimport { valueFormatter } from './helper';\r\n// FIXME: import makeAnimated from 'react-select/animated';\r\nimport { PlayerDTO } from 'models';\r\n\r\nexport interface PlayerSelectProps {\r\n  styles?: Partial<Styles>;\r\n  options: PlayerDTO[];\r\n  columnIndex: number;\r\n  id: number;\r\n  onUpdate: any;\r\n  onSelect: any;\r\n  row: any;\r\n}\r\n\r\nconst PlayerSelection: React.FC<PlayerSelectProps> = React.forwardRef(\r\n  ({ styles, row, columnIndex, /*id,*/ onUpdate, onSelect, options }, ref) => {\r\n    const [selectedOption, setSelectedOption] = useState<PlayerDTO>();\r\n\r\n    const handleChange = (selectedOption: ValueType<PlayerDTO>, actionMeta: ActionMeta) => {\r\n      // selectedOption.pairId = id;\r\n      setSelectedOption(selectedOption as PlayerDTO);\r\n      const value = valueFormatter(selectedOption);\r\n      onUpdate(value);\r\n      onSelect(selectedOption, row.id, columnIndex);\r\n    };\r\n\r\n    return (\r\n      <Select\r\n        styles={styles}\r\n        options={options}\r\n        onChange={handleChange}\r\n        value={selectedOption}\r\n        placeholder=\"Cerca...\"\r\n        isSearchable\r\n        isClearable\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nexport default PlayerSelection;\r\n","import React from 'react';\r\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\nimport PlayerSelect from '../Player/select';\r\nimport { customStyles } from './helper';\r\n\r\nexport const columns = (onSelect, options) => [\r\n  { dataField: 'id', text: 'ID', editable: false, hidden: true, align: () => 'center' },\r\n  { dataField: 'rowNumber', text: 'ID', editable: false, align: () => 'center' },\r\n  {\r\n    dataField: 'player1.alias',\r\n    text: 'Giocatore 1',\r\n    align: () => 'center',\r\n    editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\r\n      <PlayerSelect\r\n        {...editorProps}\r\n        id={columnIndex}\r\n        row={row}\r\n        rowIndex={rowIndex}\r\n        columnIndex={columnIndex}\r\n        value={value}\r\n        onSelect={onSelect}\r\n        options={options}\r\n        styles={customStyles}\r\n      />\r\n    ),\r\n    headerStyle: (column, colIndex) => ({ width: '20%' }),\r\n  },\r\n  {\r\n    dataField: 'player2.alias',\r\n    text: 'Giocatore 2',\r\n    align: () => 'center',\r\n    editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\r\n      <PlayerSelect\r\n        {...editorProps}\r\n        id={columnIndex}\r\n        row={row}\r\n        rowIndex={rowIndex}\r\n        columnIndex={columnIndex}\r\n        value={value}\r\n        onSelect={onSelect}\r\n        options={options}\r\n        styles={customStyles}\r\n      />\r\n    ),\r\n    headerStyle: (column, colIndex) => ({ width: '20%' }),\r\n  },\r\n  { dataField: 'alias', text: 'Alias Coppia', headerStyle: (column, colIndex) => ({ width: '25%' }) },\r\n  {\r\n    dataField: 'stage1Name',\r\n    text: 'Nome girone',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '10%' }),\r\n    editor: {\r\n      type: Type.SELECT,\r\n      options: 'abcdefghijklmnopqrstuvwxyz'\r\n        .toUpperCase()\r\n        .split('')\r\n        .map((e) => {\r\n          return { value: e, label: e };\r\n        }),\r\n    },\r\n  },\r\n  {\r\n    dataField: 'paid1',\r\n    text: 'Pagato 1',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '7,5%' }),\r\n    editor: {\r\n      type: Type.CHECKBOX,\r\n      value: 'Si:No',\r\n    },\r\n\r\n    style: (content, row, rowIndex, columnIndex) => {\r\n      if (content !== 'Si') return { backgroundColor: '#ffbf47' };\r\n    },\r\n  },\r\n  {\r\n    dataField: 'paid2',\r\n    text: 'Pagato 2',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '7,5%' }),\r\n    editor: {\r\n      type: Type.CHECKBOX,\r\n      value: 'Si:No',\r\n    },\r\n    style: (content, row, rowIndex, columnIndex) => {\r\n      if (content !== 'Si') return { backgroundColor: '#ffbf47' };\r\n    },\r\n  },\r\n];\r\n\r\nexport const cellEditProps = (editable) =>\r\n  cellEditFactory({\r\n    mode: editable ? 'click' : 'none',\r\n    blurToSave: true,\r\n    afterSaveCell: (oldValue, newValue, row, column) => {\r\n      // Aggiornamento per queste due colonne viene eseguito dalla funzione onSelect\r\n      if (column.dataField === 'player1.alias' || column.dataField === 'player2.alias') return;\r\n      (async () => {\r\n        const response = await fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row),\r\n        });\r\n        await response.json();\r\n      })();\r\n    },\r\n  });\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, ListGroup, InputGroup, FormControl, Row, Col, Tooltip, OverlayTrigger } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { fetchData, getEmptyRowModel } from './helper';\r\nimport { useHistory } from 'react-router';\r\nimport TableHeader from './header';\r\nimport NoData from './noData';\r\nimport { LoadingModal, GenericToast, IToastProps } from '../core/generic/Commons';\r\nimport './style.css';\r\nimport { RightArrowIcon } from '../core/icons';\r\nimport { TournamentProgress } from 'models/tournament.model';\r\nimport { useSelector } from 'react-redux';\r\nimport { TournamentSelector } from 'selectors/tournament.selector';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getEmptyPlayer } from 'services/player.service';\r\nimport { cellEditProps, columns } from './editor';\r\nimport { SessionSelector } from 'selectors/session.selector';\r\nimport { PairDTO, PlayerDTO } from 'models';\r\n\r\nconst PairsTable = () => {\r\n  const session = useSelector(SessionSelector.getSession);\r\n  const tournament = useSelector(TournamentSelector.getTournament)!;\r\n\r\n  // Navigation\r\n  let currentHistory = useHistory();\r\n\r\n  // States\r\n  // User messages\r\n  const [isLoading, setIsLoading] = useState({ state: false, message: 'Caricamento' });\r\n  const messageInitialState: IToastProps = { message: '', type: 'success' };\r\n  const [message, setMessage] = useState<IToastProps>(messageInitialState);\r\n  // Data\r\n  const [data, setData] = useState({ rows: [] as PairDTO[], players: [] as PlayerDTO[] });\r\n  const [selectedRows, setSelectedRows] = useState<PairDTO[]>([]);\r\n  // Function params\r\n  const [stage1Number, setStage1Number] = useState<number>(0);\r\n  const [newRowsNumber, setNewRowsNumber] = useState<number>(0);\r\n\r\n  // Initial Fetch\r\n  useEffect(() => {\r\n    if (!tournament) return;\r\n    (async () => setData(await fetchData(tournament.id!)))();\r\n  }, [tournament]);\r\n\r\n  // User messages\r\n  function showErrorMessage(message: string) {\r\n    setIsLoading({ state: false, message });\r\n    setMessage({ message, type: 'danger' });\r\n    setTimeout(() => setMessage(messageInitialState), 5000);\r\n  }\r\n  function showSuccessMessage(message: string) {\r\n    setIsLoading({ state: false, message });\r\n    setMessage({ message, type: 'success' });\r\n    setTimeout(() => setMessage(messageInitialState), 5000);\r\n  }\r\n\r\n  async function addRow(index?: number) {\r\n    try {\r\n      setIsLoading({ state: true, message: 'Aggiunta riga in corso' });\r\n      const emptyRow = getEmptyRowModel();\r\n      emptyRow.tId = tournament.id || 0;\r\n      const response = await fetch('/api/v1/pair', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(emptyRow),\r\n      });\r\n      const result = await response.json();\r\n      emptyRow.id = result.id;\r\n      emptyRow.rowNumber = index || data.rows.length + 1;\r\n      setData((current) => ({\r\n        rows: [emptyRow, ...current.rows],\r\n        players: current.players,\r\n      }));\r\n      showSuccessMessage('Riga aggiunta');\r\n    } catch (error) {\r\n      showErrorMessage('Errore aggiunta riga');\r\n    }\r\n  }\r\n\r\n  async function addMultipleRows() {\r\n    let index = data.rows.length + 1;\r\n    for (let ii = 0; ii < newRowsNumber; ii++) {\r\n      await addRow(index);\r\n      index++;\r\n    }\r\n    setNewRowsNumber(0);\r\n  }\r\n\r\n  async function deleteRow() {\r\n    try {\r\n      setIsLoading({\r\n        state: true,\r\n        message: selectedRows.length > 1 ? 'Cancellazione righe in corso' : 'Cancellazione riga in corso',\r\n      });\r\n      // Devo ripristinare i giocatori eliminati\r\n      let players: PlayerDTO[] = [];\r\n      selectedRows.forEach((e) => {\r\n        if (e.player1 && e.player1.id) players.push(e.player1);\r\n        if (e.player2 && e.player2.id) players.push(e.player2);\r\n      });\r\n      if (players)\r\n        setData((current) => ({\r\n          rows: current.rows,\r\n          players: [...players, ...current.players].sort((e1, e2) => e1.alias.localeCompare(e2.alias)),\r\n        }));\r\n\r\n      const response = await fetch('/api/v1/pair', {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(selectedRows),\r\n      });\r\n      await response.json();\r\n\r\n      setData((current) => ({\r\n        rows: current.rows.filter((row) => !selectedRows.find((selectedRow) => selectedRow.id === row.id)),\r\n        players: current.players,\r\n      }));\r\n\r\n      showSuccessMessage(selectedRows.length > 1 ? 'Righe cancellate' : 'Riga cancellata');\r\n    } catch (error) {\r\n      showErrorMessage('Errore cancellazione riga');\r\n    }\r\n\r\n    setSelectedRows([]);\r\n  }\r\n\r\n  // update players list when a player is selected\r\n  function updateOptions(player: PlayerDTO, selected: PlayerDTO) {\r\n    if (player && player.id)\r\n      if (selected.id)\r\n        setData((current) => ({\r\n          rows: current.rows,\r\n          players: [...current.players.filter((e) => e.id !== selected.id), player].sort((e1, e2) =>\r\n            e1.alias.localeCompare(e2.alias)\r\n          ),\r\n        }));\r\n      else\r\n        setData((current) => ({\r\n          rows: current.rows,\r\n          players: [...current.players, player].sort((e1, e2) => e1.alias.localeCompare(e2.alias)),\r\n        }));\r\n    else if (selected.id)\r\n      setData((current) => ({\r\n        rows: current.rows,\r\n        players: current.players.filter((e: { id: any }) => e.id !== selected.id),\r\n      }));\r\n  }\r\n  // Aggiorno la colonna con il giocatore selezionato\r\n  const onSelect = (selectedElement: PlayerDTO, rowIndex: number, columnIndex: number) => {\r\n    const newRowsElement = data.rows.map((rowElement: { id: any }) => {\r\n      if (rowElement.id === rowIndex) {\r\n        let row: any = rowElement;\r\n        if (columnIndex === 1) {\r\n          if (selectedElement.id && row.player2 && row.player2.id === selectedElement.id) {\r\n            // Devo salvare l'elemnto che sto per sostituire\r\n            row.player1 = getEmptyPlayer();\r\n            showErrorMessage('Attenzione : Non puoi selezionare lo stesso giocare ! ');\r\n          } else {\r\n            // Aggiorno la lista dei giocatori disponibili prima di aggiornare i dati\r\n            updateOptions(row.player1, selectedElement);\r\n            row.player1 = selectedElement;\r\n          }\r\n        } else {\r\n          if (selectedElement.id && row.player1 && row.player1.id === selectedElement.id) {\r\n            row.player2 = getEmptyPlayer();\r\n            showErrorMessage('Attenzione : Non puoi selezionare lo stesso giocare ! ');\r\n          } else {\r\n            updateOptions(row.player2, selectedElement);\r\n            row.player2 = selectedElement;\r\n          }\r\n        }\r\n        // update Db. Non aspetto la risposta...\r\n        fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row),\r\n        });\r\n        return row;\r\n      } else return rowElement;\r\n    });\r\n    setData((current) => ({\r\n      rows: newRowsElement,\r\n      players: current.players,\r\n    }));\r\n  };\r\n\r\n  const handleSelect = (row: PairDTO, isSelected: boolean) => {\r\n    setSelectedRows((selectedRows) => {\r\n      const found = selectedRows.find((e) => e.id === row.id) ? true : false;\r\n      if (isSelected) {\r\n        return found ? selectedRows : [row, ...selectedRows];\r\n      } else {\r\n        return found ? selectedRows.filter((e) => e.id !== row.id) : selectedRows;\r\n      }\r\n    });\r\n  };\r\n\r\n  const confirmPairs = async () => {\r\n    if (!tournament.id) {\r\n      showErrorMessage('Id torneo mancante. Verrai inviato alla Home tra 5 secondi....');\r\n      setTimeout(() => currentHistory.push('/'), 5000);\r\n    }\r\n\r\n    // Controllo che sia presente almeno una coppia\r\n    if (data.rows.length < 4) {\r\n      showErrorMessage('Numero di coppie insufficente. Devi formare almeno 4 coppie');\r\n      return;\r\n    }\r\n    // Controllo gironi non assegnati\r\n    const missingStage1Name = data.rows\r\n      .filter((e: { stage1Name: string }) => !e.stage1Name || e.stage1Name === '')\r\n      .map((e) => e.rowNumber);\r\n    if (missingStage1Name.length !== 0) {\r\n      showErrorMessage(\r\n        `Assegna  ${\r\n          missingStage1Name.length === 1 ? 'la riga ' : 'le righe '\r\n        } ${missingStage1Name} ad un girone per procedere `\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Controllo coppie non assegnate\r\n    const missingPairs = data.rows\r\n      .filter((e) => !e.player1 || !e.player1.id || !e.player2 || !e.player2.id)\r\n      .map((e) => e.rowNumber);\r\n    if (missingPairs.length !== 0) {\r\n      showErrorMessage(\r\n        `Assegna  i giocatori ${\r\n          missingPairs.length === 1 ? 'alla riga ' : 'alle righe '\r\n        } ${missingPairs} per procedere `\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Controllo che non ci siano gironi con meno di 1 coppia ( meglio spostare 3 )\r\n    const MIN_PAIR_PER_STAGE = 3;\r\n    let invalidStage = [];\r\n    const pairsInStage = data.rows.reduce((allNames: { [x: string]: number }, row: { stage1Name: string }) => {\r\n      if (row.stage1Name in allNames) allNames[row.stage1Name]++;\r\n      else allNames[row.stage1Name] = 1;\r\n      return allNames;\r\n    }, {});\r\n    for (let stageName in pairsInStage) {\r\n      if (pairsInStage[stageName] <= MIN_PAIR_PER_STAGE) invalidStage.push(stageName);\r\n    }\r\n    if (invalidStage.length > 0) {\r\n      showErrorMessage(\r\n        invalidStage.length === 1\r\n          ? `Il torneo ${invalidStage} deve contenere almeno ${MIN_PAIR_PER_STAGE + 1} coppie`\r\n          : `I torneI ${invalidStage} devono contenere almeno ${MIN_PAIR_PER_STAGE + 1} coppie`\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Update tournament progress\r\n    tournament.progress = TournamentProgress.Stage1;\r\n    try {\r\n      await fetch('/api/v1/tournament/', {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(tournament),\r\n      });\r\n    } catch (error) {\r\n      console.log('errororroror :', error);\r\n    }\r\n    // Go to Stage1\r\n    currentHistory.push('/stage1');\r\n  };\r\n  /*\r\n  function goBack() {\r\n    currentHistory.push('/');\r\n  }\r\n*/\r\n  const selectRow = {\r\n    mode: 'checkbox',\r\n    onSelect: handleSelect,\r\n    onSelectAll: (isSelected: boolean, rows: PairDTO[]) => setSelectedRows(isSelected ? rows : []),\r\n    style: { backgroundColor: '#c8e6c9' },\r\n  };\r\n\r\n  async function deleteStage1() {\r\n    try {\r\n      setIsLoading({ state: true, message: 'Cancellazione in corso' });\r\n      const response = await fetch('/api/v1/stage1', {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ tId: tournament.id }),\r\n      });\r\n      await response.json();\r\n      // Update tournament progress\r\n      //FIXME:\r\n      tournament.progress = TournamentProgress.PairsSelection;\r\n      fetch('/api/v1/tournament', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(tournament),\r\n      });\r\n      showSuccessMessage('Cancellazione completata');\r\n    } catch (error) {\r\n      showErrorMessage('Errore cancellazione Fase 1');\r\n    }\r\n  }\r\n\r\n  async function setStage1Name() {\r\n    if (!stage1Number) {\r\n      showErrorMessage('Specificare il numero di gironi da assegnare');\r\n      return;\r\n    }\r\n\r\n    if (tournament.progress === 'Stage1' || tournament.progress === 'Stage2') {\r\n      showErrorMessage('Non riassegnare i gironi in quanto le coppie sono gia state confermate per la fase successiva');\r\n      return;\r\n    }\r\n\r\n    setIsLoading({ state: true, message: 'Aggiornamento in corso ' });\r\n    let current = 0;\r\n    const names = 'abcdefghijklmnopqrstuvwxyz'.toUpperCase().split('');\r\n    let newRows: any[] = [];\r\n    for (let index in data.rows) {\r\n      let row = data.rows[index];\r\n      // FIXME: if (current === stage1Number) QUESTO NON FUNZIONA ===\r\n      // eslint-disable-next-line eqeqeq\r\n      if (current == stage1Number) current = 0;\r\n      row['stage1Name'] = names[current];\r\n      current++;\r\n      try {\r\n        fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row),\r\n        });\r\n        newRows.push(row);\r\n      } catch (error) {\r\n        showErrorMessage('Errore');\r\n        newRows.push(row);\r\n      }\r\n    }\r\n    showSuccessMessage('Gironi assegnati correttamente');\r\n    setData((current) => ({ rows: newRows, players: current.players }));\r\n  }\r\n\r\n  const availableRows = Math.floor(\r\n    Math.floor((data.players.length - 1) / 2) -\r\n      (data.rows.length === 0\r\n        ? 0\r\n        : data.rows.reduce((accumulator: number, e) => {\r\n            if ((!e.player1 && !e.player2) || (!e.player1?.id && !e.player2?.id)) return accumulator + 1;\r\n            if (!e.player1 || !e.player1.id || !e.player2 || !e.player2.id) return accumulator + 0.5;\r\n            return accumulator;\r\n          }, 0))\r\n  );\r\n\r\n  const deleteDisabled =\r\n    !(selectedRows.length > 0) || tournament.progress === 'Stage1' || tournament.progress === 'Stage2';\r\n\r\n  let deleteTooltipMessage = '';\r\n  if (!(selectedRows.length > 0)) deleteTooltipMessage = 'Seleziona almeno una riga';\r\n  else if (tournament.progress === 'Stage1' || tournament.progress === 'Stage2')\r\n    deleteTooltipMessage = 'Devi prima resettare i gironi per poter cancellare delle coppie';\r\n  else deleteTooltipMessage = 'Cancella le coppie selezionate';\r\n\r\n  //console.log('render table : ', players, pairs);\r\n\r\n  const rightOuter = (\r\n    <>\r\n      <Button type=\"button\" onClick={confirmPairs} size=\"lg\" variant=\"outline-warning\" className=\"default-color-white\">\r\n        <span style={{ fontSize: 'larger', fontWeight: 'bolder', padding: '1vw' }}>Prosegui</span>\r\n        <RightArrowIcon size=\"lg\" />\r\n      </Button>\r\n\r\n      <GenericToast message={message.message} type={message.type} />\r\n    </>\r\n  );\r\n\r\n  const leftOuter = (isEditable: boolean | undefined) => (\r\n    <>\r\n      {isEditable ? (\r\n        <Row style={{ margin: '0px' }}>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Assegna gironi automaticamente</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                placeholder={\r\n                  data.rows.length < 4\r\n                    ? 'Inserisci almeno 4 coppie'\r\n                    : `Numero di gironi ( max ${Math.floor(data.rows.length / 4)} )`\r\n                }\r\n                aria-label=\"Numero di gironi\"\r\n                type=\"number\"\r\n                step={1}\r\n                min={0}\r\n                max={Math.floor(data.rows.length / 4)}\r\n                value={stage1Number}\r\n                onChange={(event: React.FormEvent<FormControl & HTMLInputElement>) =>\r\n                  setStage1Number(Number(event.currentTarget.value))\r\n                }\r\n                disabled={\r\n                  data.rows.length < 4 ||\r\n                  tournament.progress === TournamentProgress.Stage1 ||\r\n                  tournament.progress === TournamentProgress.Stage2\r\n                }\r\n              />\r\n              <InputGroup.Append>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  onClick={setStage1Name}\r\n                  disabled={!stage1Number || stage1Number > Math.floor(data.rows.length / 4) || data.rows.length < 4}\r\n                >\r\n                  Esegui\r\n                </Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Aggiungi coppie</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                disabled={availableRows <= 0}\r\n                type=\"number\"\r\n                step={1}\r\n                min={1}\r\n                max={availableRows}\r\n                placeholder={\r\n                  availableRows <= 0\r\n                    ? 'Numero massimo di coppie gia creato'\r\n                    : `Numero di coppie da aggiungere ( max ${availableRows} )`\r\n                }\r\n                aria-label=\"Numero di coppie\"\r\n                onChange={(event: React.FormEvent<FormControl & HTMLInputElement>) =>\r\n                  setNewRowsNumber(Number(event.currentTarget.value))\r\n                }\r\n                value={newRowsNumber || ''}\r\n              />\r\n              <InputGroup.Append>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  onClick={(e: any) => setNewRowsNumber(availableRows)}\r\n                  disabled={newRowsNumber > availableRows}\r\n                >\r\n                  Max\r\n                </Button>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  onClick={addMultipleRows}\r\n                  disabled={!newRowsNumber || newRowsNumber > availableRows}\r\n                >\r\n                  Esegui\r\n                </Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n      ) : null}\r\n      <Row style={{ margin: '5vh 0vh' }}>\r\n        <Col md=\"2\" sm=\"12\">\r\n          <ListGroup>\r\n            {/*\r\n            <ListGroup.Item action variant=\"secondary\" onClick={goBack}>\r\n              Home\r\n            </ListGroup.Item>\r\n            */}\r\n            <ListGroup.Item\r\n              action\r\n              variant=\"success\"\r\n              onClick={() => addRow()}\r\n              disabled={availableRows <= 0 || !isEditable}\r\n            >\r\n              Aggiungi Coppia\r\n            </ListGroup.Item>\r\n\r\n            <OverlayTrigger\r\n              placement=\"right\"\r\n              key=\"right\"\r\n              overlay={<Tooltip id=\"tooltip-pair\">{deleteTooltipMessage}</Tooltip>}\r\n            >\r\n              <span className=\"d-inline-block\" onClick={deleteRow}>\r\n                <ListGroup.Item\r\n                  action\r\n                  variant=\"danger\"\r\n                  style={{ pointerEvents: 'none' }}\r\n                  disabled={deleteDisabled || !isEditable}\r\n                >\r\n                  Elimina Coppia {deleteDisabled}\r\n                </ListGroup.Item>\r\n              </span>\r\n            </OverlayTrigger>\r\n\r\n            <ListGroup.Item action variant=\"danger\" onClick={deleteStage1} disabled={!isEditable}>\r\n              Reset gironi\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md=\"10\" sm=\"12\">\r\n          {data.rows && data.players ? (\r\n            <BootstrapTable\r\n              bootstrap4\r\n              keyField=\"id\"\r\n              data={data.rows}\r\n              columns={columns(onSelect, data.players) as any}\r\n              cellEdit={cellEditProps(isEditable) as any}\r\n              selectRow={selectRow as any}\r\n              noDataIndication={() => (\r\n                <NoData isEditable={isEditable || false} addRow={() => addRow()} optionsLength={data.players.length} />\r\n              )}\r\n              caption={<TableHeader />}\r\n              headerClasses=\"default-background default-color-yellow\"\r\n              striped\r\n              hover\r\n            />\r\n          ) : null}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <Row>\r\n      <LoadingModal show={isLoading.state} message={isLoading.message} />\r\n      <Col md=\"10\" sm=\"12\">\r\n        {leftOuter(session.isAdmin)}\r\n      </Col>\r\n      <Col md=\"2\" sm=\"12\">\r\n        {rightOuter}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default withRouter(PairsTable);\r\n"],"sourceRoot":""}