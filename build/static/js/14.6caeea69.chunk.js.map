{"version":3,"sources":["components/Stage2/nodeElement.jsx","components/Stage2/table.jsx"],"names":["MyNode","nodeData","onClick","alert","name","title","className","EditNode","orgchart","useRef","useState","id","children","ds","setDS","dsDigger","JSONDigger","Set","selectedNodes","setSelectedNodes","newNodeName","setNewNodeName","newNodeTitle","setNewNodeTitle","isEditMode","setIsEditMode","isMultipleSelect","setIsMultipleSelect","updateNodes","a","map","node","uuidv4","style","display","marginLeft","type","checked","onChange","e","target","htmlFor","Array","from","key","placeholder","value","disabled","current","expandAllNodes","ref","NodeTemplate","datasource","collapsible","multipleSelect","onClickNode","prev","add","onClickChart"],"mappings":"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","file":"static/js/14.6caeea69.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './my-node.css';\r\n\r\nconst propTypes = {\r\n  nodeData: PropTypes.object.isRequired\r\n};\r\n\r\nconst MyNode = ({ nodeData }) => {\r\n  const selectNode = () => {\r\n    alert(\"Hi All. I'm \" + nodeData.name + \". I'm a \" + nodeData.title + '.');\r\n  };\r\n\r\n  return (\r\n    <div onClick={selectNode}>\r\n      <div className=\"position\">{nodeData.title}</div>\r\n      <div className=\"fullname\">{nodeData.name}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMyNode.propTypes = propTypes;\r\n\r\nexport default MyNode;\r\n","import React, { useRef, useState } from 'react';\r\nimport JSONDigger from 'json-digger';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport OrganizationChart from '@dabeng/react-orgchart';\r\nimport './edit-node.css';\r\nimport MyNode from './nodeElement';\r\n\r\n// https://github.com/dabeng/react-orgchart/blob/master/src/export-chart/export-chart.js\r\n\r\nconst EditNode = () => {\r\n  const orgchart = useRef();\r\n  const datasource = {\r\n    id: 'n1',\r\n    name: 'Lao Lao',\r\n    title: 'general manager',\r\n    children: [\r\n      { id: 'n2', name: 'Bo Miao', title: 'department manager' },\r\n      {\r\n        id: 'n3',\r\n        name: 'Su Miao',\r\n        title: 'department manager',\r\n        children: [\r\n          { id: 'n4', name: 'Tie Hua', title: 'senior engineer' },\r\n          {\r\n            id: 'n5',\r\n            name: 'Hei Hei',\r\n            title: 'senior engineer',\r\n            children: [\r\n              { id: 'n6', name: 'Dan Dan', title: 'engineer' },\r\n              { id: 'n7', name: 'Xiang Xiang', title: 'engineer' }\r\n            ]\r\n          },\r\n          { id: 'n8', name: 'Pang Pang', title: 'senior engineer' }\r\n        ]\r\n      },\r\n      { id: 'n9', name: 'Hong Miao', title: 'department manager' },\r\n      {\r\n        id: 'n10',\r\n        name: 'Chun Miao',\r\n        title: 'department manager',\r\n        children: [{ id: 'n11', name: 'Yue Yue', title: 'senior engineer' }]\r\n      }\r\n    ]\r\n  };\r\n  const [ds, setDS] = useState(datasource);\r\n  const dsDigger = new JSONDigger(ds, 'id', 'children');\r\n\r\n  const [selectedNodes, setSelectedNodes] = useState(new Set());\r\n  const [newNodeName, setNewNodeName] = useState('');\r\n  const [newNodeTitle, setNewNodeTitle] = useState('');\r\n  const [isEditMode, setIsEditMode] = useState(true);\r\n  const [isMultipleSelect, setIsMultipleSelect] = useState(false);\r\n\r\n  const readSelectedNode = nodeData => {\r\n    if (isMultipleSelect) {\r\n      setSelectedNodes(prev => new Set(prev.add(nodeData)));\r\n    } else {\r\n      setSelectedNodes(new Set([nodeData]));\r\n    }\r\n  };\r\n\r\n  const clearSelectedNode = () => {\r\n    setSelectedNodes(new Set());\r\n  };\r\n\r\n  const onNameChange = e => {\r\n    setNewNodeName(e.target.value);\r\n  };\r\n\r\n  const onTitleChange = e => {\r\n    setNewNodeTitle(e.target.value);\r\n  };\r\n\r\n  const updateNodes = async () => {\r\n    await dsDigger.updateNodes(\r\n      [...selectedNodes].map(node => node.id),\r\n      { id: uuidv4(), name: newNodeName, title: newNodeTitle }\r\n    );\r\n    setDS({ ...dsDigger.ds });\r\n  };\r\n\r\n  const onMultipleSelectChange = e => {\r\n    setIsMultipleSelect(e.target.checked);\r\n  };\r\n\r\n  const onModeChange = e => {\r\n    setIsEditMode(e.target.checked);\r\n    if (e.target.checked) {\r\n      orgchart.current.expandAllNodes();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"edit-chart-wrapper\">\r\n      <section className=\"toolbar l2r\">\r\n        <div className=\"selected-nodes l2r\">\r\n          <div>\r\n            <h4 style={{ display: 'inline-block' }}>Selected Node</h4>\r\n            <input\r\n              style={{ marginLeft: '1rem' }}\r\n              id=\"cb-multiple-select\"\r\n              type=\"checkbox\"\r\n              checked={isMultipleSelect}\r\n              onChange={onMultipleSelectChange}\r\n            />\r\n            <label htmlFor=\"cb-multiple-select\">Multiple Select</label>\r\n          </div>\r\n          <ul>\r\n            {Array.from(selectedNodes).map(node => (\r\n              <li key={node.id}>\r\n                {node.name} - {node.title}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div className=\"new-nodes\">\r\n          <h4>New Node</h4>\r\n\r\n          <input type=\"text\" placeholder=\"name\" value={newNodeName} onChange={onNameChange} />\r\n          <input type=\"text\" placeholder=\"title\" value={newNodeTitle} onChange={onTitleChange} />\r\n        </div>\r\n        <div className=\"action-buttons\">\r\n          <button disabled={!isEditMode} onClick={updateNodes}>\r\n            Update Nodes\r\n          </button>\r\n          <input\r\n            style={{ marginLeft: '1rem' }}\r\n            id=\"cb-mode\"\r\n            type=\"checkbox\"\r\n            checked={isEditMode}\r\n            onChange={onModeChange}\r\n          />\r\n          <label htmlFor=\"cb-mode\">Edit Mode</label>\r\n        </div>\r\n      </section>\r\n      <OrganizationChart\r\n        ref={orgchart}\r\n        NodeTemplate={MyNode}\r\n        datasource={ds}\r\n        collapsible={!isEditMode}\r\n        multipleSelect={isMultipleSelect}\r\n        onClickNode={readSelectedNode}\r\n        onClickChart={clearSelectedNode}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditNode;\r\n"],"sourceRoot":""}