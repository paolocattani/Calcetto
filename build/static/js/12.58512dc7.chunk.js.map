{"version":3,"sources":["common.module.css","components/Stage1/header.tsx","components/Stage1/helper.ts","components/Stage1/editor.js","components/Stage1/table.jsx","components/Stage1/wrapper.tsx"],"names":["module","exports","tableHeader","title","saved","divStyle","color","undefined","style","comparator","obj1","obj2","total","rowNumber","headerAlign","align","newColumn","index","id","dataField","text","toString","headerStyle","column","colIndex","width","editable","content","row","rowIndex","columnIndex","backgroundColor","parseInt","editor","type","Type","SELECT","options","value","label","columns","pairsList","baseColumns","ii","length","push","Stage1Table","dispatch","useDispatch","isAdmin","useSelector","SessionSelector","tournament","TournamentSelector","getTournament","useState","selectedRows","setSelectedRows","isLoading","setIsLoading","setIsSaved","autoOrder","map","e","tId","pair","placement","jj","rowsGenerator","rows","setRows","stageName","stage1Name","useEffect","a","fetch","method","headers","body","JSON","stringify","response","json","result","sort","e1","e2","forEach","fetchData","selectRow","mode","onSelect","isSelected","selected","found","find","filter","Stage1Action","setSelectedPairs","onSelectAll","hideSelectColumn","progress","TournamentProgress","Stage2","console","log","key","bootstrap4","keyField","data","cellEdit","cellEditFactory","blurToSave","beforeSaveCell","oldValue","newValue","startsWith","getOpposite","afterSaveCell","newRows","tableName","score","pair1Id","pair2Id","ok","setTimeout","acc","thisRowIndex","thisRow","oppositeRowIndex","oppositeRow","splice","updatePlacement","request","noDataIndication","headerClasses","caption","striped","hover","withRouter","currentHistory","useHistory","session","getSession","prev","curr","needRefresh","Stage1Selector","getNeedRefresh","getSelectedPairs","PairSelector","getPairsList","Col","className","commonStyle","toolsBarContainer","Row","toolsBarRow","Button","variant","onClick","Stage2Action","delete","disabled","TournamentAction","updateTournament","model","count","fetchStage2","tournamentId","stage","stageList","localeCompare","element","renderTables"],"mappings":"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","file":"static/js/12.58512dc7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"functionsList\":\"common_functionsList__3B3UB\",\"toolsBarContainer\":\"common_toolsBarContainer__1nanA\",\"toolsBarRow\":\"common_toolsBarRow__r8q12\"};","import React from 'react';\r\n\r\ninterface Stage1HeaderProps {\r\n  title: string;\r\n  saved: boolean;\r\n}\r\n\r\nconst tableHeader: React.FC<Stage1HeaderProps> = ({ title, saved }) => {\r\n  const divStyle = {\r\n    color: saved ? '#4feb34' : undefined,\r\n  };\r\n  return (\r\n    <h3>\r\n      <b style={divStyle}>\r\n        Girone - <strong>{title}</strong>\r\n      </b>\r\n      {saved ? <small> - Salvataggio in corso...</small> : null}\r\n    </h3>\r\n  );\r\n};\r\n\r\nexport default tableHeader;\r\n","import { PairDTO, Stage1Row } from 'redux/models';\r\n\r\n/**\r\n *\r\n * @param value il valore di partenza\r\n * @returns il valore opposto a quello di partenze\r\n *\r\n *  3->0 , 2->1 , 1->2 , 0->3\r\n */\r\nexport function getOpposite(value: string | null) {\r\n  /*\r\n   * Attenzione :\r\n   *  !0 = true\r\n   *  !''  = true\r\n   *  !null   = true\r\n   *  !undefined  = true\r\n   */\r\n  if (value === null) return null;\r\n  switch (parseInt(value)) {\r\n    case 3:\r\n      return 0;\r\n    case 2:\r\n      return 1;\r\n    case 1:\r\n      return 2;\r\n    case 0:\r\n      return 3;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} obj1\r\n * @param {*} obj2\r\n */\r\nexport function comparator(obj1: Stage1Row, obj2: Stage1Row) {\r\n  // in caso di parità valuto scontro diretto\r\n  if (obj1.total === obj2.total) {\r\n    if (obj1[`col${obj2.rowNumber}`] === 3 || obj1[`col${obj2.rowNumber}`] === 2) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n  return obj2.total - obj1.total;\r\n}\r\n\r\n/**\r\n * Questo metodo riceve una lista di coppie PairdDTO e la trasforma in Stage1Row.\r\n * Viene utilizzato da Stage1.handler per costruire la struttura da passare alla tabella\r\n * Inoltre viene passata al BE per salvare i dati sul DB.\r\n *\r\n * @param pairsList PairDTO[] Lista di coppie\r\n *\r\n */\r\nexport const rowsGenerator = (pairsList: PairDTO[]): Stage1Row[] =>\r\n  pairsList.map((e, ii) => {\r\n    const row: Stage1Row = {\r\n      id: `row-${e.tId}-${ii}`,\r\n      rowNumber: ii + 1,\r\n      pair: e,\r\n      total: 0,\r\n      placement: e.placement || 0,\r\n    };\r\n    for (let jj = 1; jj <= pairsList.length; jj++) {\r\n      row[`col${jj}`] = null;\r\n    }\r\n    return row;\r\n  });\r\n","import { Type } from 'react-bootstrap-table2-editor';\r\n\r\n/*\r\n  non esistono i tipi per react-bootstrap-table2-editor\r\n  quindi lascio tutto quello che riguarda l'edit come .js\r\n*/\r\n\r\nconst headerAlign = { headerAlign: 'center' };\r\nconst align = { align: 'center' };\r\nconst newColumn = (index, rowNumber) => {\r\n  return {\r\n    id: `col${index}`,\r\n    dataField: `col${index}`,\r\n    text: index.toString(),\r\n    //type: 'number',\r\n    headerStyle: (column, colIndex) => ({ width: `${75 / rowNumber}%` }),\r\n    ...headerAlign,\r\n    editable: (content, row, rowIndex, columnIndex) => rowIndex !== columnIndex - 2,\r\n    ...align,\r\n    style: (content, row, rowIndex, columnIndex) => {\r\n      if (rowIndex === columnIndex - 2) return { backgroundColor: '#343a40' };\r\n      if (parseInt(content, 10) === 3 || parseInt(content, 10) === 2) return { backgroundColor: 'rgb(196, 247, 160)' };\r\n      if (parseInt(content, 10) === 1 || parseInt(content, 10) === 0) return { backgroundColor: 'rgb(255, 147, 147)' };\r\n      return null;\r\n    },\r\n    /* TODO:\r\n    editorStyle: (cell, row, rowIndex, colIndex) => {\r\n      console.log('editorStyle : ', cell, row, rowIndex, colIndex);\r\n      return { width: '100%', height: 'auto' };\r\n    }, */\r\n    editor: {\r\n      type: Type.SELECT,\r\n      options: [\r\n        { value: '3', label: '3' },\r\n        { value: '2', label: '2' },\r\n        { value: '1', label: '1' },\r\n        { value: '0', label: '0' },\r\n        { value: null, label: '' },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\nexport const columns = (pairsList) => {\r\n  let baseColumns = [\r\n    {\r\n      // Nome Coppia ( In realta contiene un oggetto di tipo Pair)\r\n      id: 'pairLabel',\r\n      dataField: 'pair.label',\r\n      text: 'Nome Coppia',\r\n      editable: false,\r\n      headerStyle: (column, colIndex) => ({ width: '15%' }),\r\n      ...align,\r\n      ...headerAlign,\r\n    },\r\n    {\r\n      // Numbero riga per riferimento visivo\r\n      id: 'rowNumber',\r\n      dataField: 'rowNumber',\r\n      text: 'ID',\r\n      editable: false,\r\n      type: 'number',\r\n      headerStyle: (column, colIndex) => ({ width: '5%' }),\r\n      ...headerAlign,\r\n      style: (content, row, rowIndex, columnIndex) => {\r\n        return { backgroundColor: '#343a40', color: '#ffc107' };\r\n      },\r\n    },\r\n  ];\r\n\r\n  // generazione dinamica colonne intermedie\r\n  for (let ii = 0; ii < pairsList.length; ii++) baseColumns.push(newColumn(ii + 1, pairsList.length));\r\n\r\n  baseColumns.push(\r\n    {\r\n      // Totale coppia\r\n      id: 'totale',\r\n      dataField: 'total',\r\n      text: 'Totale',\r\n      editable: false,\r\n      type: 'number',\r\n      headerStyle: (column, colIndex) => ({ width: '5%' }),\r\n      ...headerAlign,\r\n    },\r\n    {\r\n      // Posizionamento coppia\r\n      id: 'placement',\r\n      dataField: 'placement',\r\n      text: 'Posizione',\r\n      editable: true,\r\n      type: 'number',\r\n      headerStyle: (column, colIndex) => ({ width: '5%' }),\r\n      ...headerAlign,\r\n    }\r\n  );\r\n  return baseColumns;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\n// table\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\n// helper\r\nimport TableHeader from './header';\r\nimport { getOpposite, comparator, rowsGenerator } from './helper';\r\nimport { columns } from './editor';\r\n//\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { SessionSelector } from 'redux/selectors/session.selector';\r\n// style\r\nimport { Stage1Action } from 'redux/actions';\r\nimport { TournamentSelector } from 'redux/selectors';\r\nimport { TournamentProgress } from 'redux/models';\r\n\r\n// TODO: convert this component to ts\r\nconst Stage1Table = ({ pairsList }) => {\r\n  const dispatch = useDispatch();\r\n  // From store\r\n  const isAdmin = useSelector(SessionSelector.isAdmin);\r\n  const tournament = useSelector(TournamentSelector.getTournament);\r\n  // State\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [saved, setIsSaved] = useState(false);\r\n  const [autoOrder /*, setAutoOrder*/] = useState(true);\r\n  const [rows, setRows] = useState(rowsGenerator(pairsList));\r\n  // Const\r\n  const stageName = pairsList[0].stage1Name;\r\n\r\n  // Effects\r\n  useEffect(\r\n    () => {\r\n      const fetchData = async () => {\r\n        setIsLoading(true);\r\n        const response = await fetch('/api/v1/stage1', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ rows, stageName }),\r\n        });\r\n        const result = await response.json();\r\n        // FIXME: Ordinamento : gestire ordinamento personalizzato\r\n        if (autoOrder)\r\n          [...result]\r\n            .sort((e1, e2) => comparator(e1, e2))\r\n            .forEach((row, index) => (result[row.rowNumber - 1]['placement'] = index + 1));\r\n\r\n        setRows(result);\r\n        setIsLoading(false);\r\n      };\r\n      fetchData();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const cellEditProps = (editable) =>\r\n    cellEditFactory({\r\n      mode: editable ? 'click' : 'none',\r\n      blurToSave: true,\r\n      beforeSaveCell: (oldValue, newValue, row, column) => {\r\n        if (column.id.startsWith('col')) {\r\n          // Aggiorno cella opposta\r\n          rows[parseInt(column.text) - 1][`col${row.rowNumber}`] = getOpposite(newValue);\r\n        }\r\n      },\r\n      afterSaveCell: async (oldValue, newValue, row, column) => {\r\n        const newRows = [...rows];\r\n        if (column.id.startsWith('col')) {\r\n          // Aggiorno dati sul Db\r\n          const response = await fetch('/api/v1/stage1/cell', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n              tId: row.pair.tId,\r\n              tableName: stageName,\r\n              score: newValue,\r\n              pair1Id: row.pair.id,\r\n              pair2Id: rows[parseInt(column.text) - 1].pair.id,\r\n            }),\r\n          });\r\n          await response.json();\r\n          if (response.ok) {\r\n            setIsSaved(true);\r\n            setTimeout(() => setIsSaved(false), 3000);\r\n          }\r\n\r\n          // Ricalcolo totali riga\r\n          let acc = 0;\r\n          for (let key in row) if (key.startsWith('col') && row[key]) acc += parseInt(row[key]);\r\n          const thisRowIndex = row.rowNumber - 1;\r\n          const thisRow = newRows[thisRowIndex];\r\n          thisRow.total = acc ? acc : 0;\r\n\r\n          //... e riga opposta\r\n          acc = 0;\r\n          const oppositeRowIndex = parseInt(column.text) - 1;\r\n          for (let key in newRows[oppositeRowIndex])\r\n            if (key.startsWith('col') && newRows[oppositeRowIndex][key])\r\n              acc += parseInt(newRows[oppositeRowIndex][key]);\r\n          const oppositeRow = newRows[oppositeRowIndex];\r\n          oppositeRow.total = acc ? acc : 0;\r\n\r\n          newRows.splice(thisRowIndex, 1, thisRow);\r\n          newRows.splice(oppositeRowIndex, 1, oppositeRow);\r\n        }\r\n        // Aggiorno posizione relativa\r\n        if (autoOrder)\r\n          [...newRows]\r\n            .sort((e1, e2) => comparator(e1, e2))\r\n            .forEach((row, index) => (newRows[row.rowNumber - 1]['placement'] = index + 1));\r\n\r\n        // Aggiornamento\r\n        setRows(newRows);\r\n        dispatch(\r\n          Stage1Action.updatePlacement.request({ rows: rows.map((e) => ({ id: e.pair.id, placement: e.placement })) })\r\n        );\r\n      },\r\n    });\r\n\r\n  const handleOnSelect = (row, isSelected) => {\r\n    const found = selectedRows.find((e) => e.rowNumber === row.rowNumber) ? true : false;\r\n    let selected;\r\n    if (isSelected) {\r\n      selected = found ? selectedRows : [row, ...selectedRows];\r\n    } else {\r\n      selected = found ? selectedRows.filter((e) => e.rowNumber !== row.rowNumber) : selectedRows;\r\n    }\r\n\r\n    setSelectedRows(selected);\r\n    dispatch(\r\n      Stage1Action.setSelectedPairs({\r\n        stageName,\r\n        rows: selected,\r\n      })\r\n    );\r\n    return true;\r\n  };\r\n\r\n  const handleOnSelectAll = (isSelected, rows) => {\r\n    setSelectedRows(isSelected ? rows : []);\r\n    dispatch(\r\n      Stage1Action.setSelectedPairs({\r\n        stageName,\r\n        rows: isSelected ? rows : [],\r\n      })\r\n    );\r\n  };\r\n\r\n  const selectRow = {\r\n    mode: 'checkbox',\r\n    onSelect: handleOnSelect,\r\n    onSelectAll: handleOnSelectAll,\r\n    style: { backgroundColor: '#c8e6c9' },\r\n    hideSelectColumn: !isAdmin || tournament.progress >= TournamentProgress.Stage2,\r\n  };\r\n\r\n  console.log(' render : ', stageName, rows);\r\n\r\n  return isLoading ? (\r\n    <h3>\r\n      Caricamento girone <b>{stageName}</b> in corso....\r\n    </h3>\r\n  ) : (\r\n    <BootstrapTable\r\n      key={`Stege1-${stageName}`}\r\n      bootstrap4\r\n      keyField=\"id\"\r\n      data={rows}\r\n      columns={columns(pairsList)}\r\n      selectRow={selectRow}\r\n      cellEdit={cellEditProps(isAdmin)}\r\n      noDataIndication=\"Nessun dato reperito\"\r\n      headerClasses=\"default-background default-color-yellow\"\r\n      caption={<TableHeader title={stageName} saved={saved} />}\r\n      striped\r\n      hover\r\n    />\r\n  );\r\n};\r\n\r\nexport default Stage1Table;\r\n","// React, Router, Redux\r\nimport { useHistory } from 'react-router';\r\nimport { withRouter } from 'react-router-dom';\r\nimport React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// Models\r\nimport { PairDTO, TournamentProgress } from 'redux/models';\r\n// Style\r\nimport commonStyle from '../../common.module.css';\r\nimport { RightArrowIcon, TrashIcon, LeftArrowIcon } from '../core/icons';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\n// Actions, Selectors\r\nimport { Stage2Action, TournamentAction } from 'redux/actions';\r\nimport { SessionSelector, TournamentSelector, Stage1Selector, PairSelector } from 'redux/selectors';\r\nimport Stage1Table from './table';\r\n\r\ninterface ModalProps {\r\n  show: boolean;\r\n  message: string;\r\n}\r\n/**\r\n * Wraps multiple table components\r\n */\r\nconst Wrapper: React.FC = (): JSX.Element => {\r\n  const currentHistory = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  // Session\r\n  const session = useSelector(SessionSelector.getSession);\r\n  // Torneo\r\n  const tournament = useSelector(TournamentSelector.getTournament, (prev, curr) => prev?.progress !== curr?.progress)!;\r\n  // Sono presenti aggiornamenti\r\n  const needRefresh = useSelector(Stage1Selector.getNeedRefresh);\r\n  // Squadre selezionate\r\n  const selected = useSelector(Stage1Selector.getSelectedPairs);\r\n  // Lista coppie\r\n  const pairsList = useSelector(PairSelector.getPairsList);\r\n\r\n  // TODO:\r\n  const [autoOrder /*, setAutoOrder*/] = useState<boolean>(true);\r\n\r\n  function goBack() {\r\n    currentHistory.push(session.isAdmin ? '/tournament' : '/');\r\n  }\r\n  function goToStage2() {\r\n    // TODO: eseguire controlli e eventualemente mostrare messaggi utente\r\n\r\n    // Se sono un utente che puo modificare e il torneo è in una fase minore ( vedi ordinamento Enum ) di quella attuale\r\n    // allora aggiorno lo stato del torneo\r\n    if (session.isAdmin && tournament.progress < TournamentProgress.Stage2) {\r\n      tournament.progress = TournamentProgress.Stage2;\r\n      dispatch(TournamentAction.updateTournament.request({ model: tournament }));\r\n    }\r\n\r\n    let count = 0;\r\n    if (pairsList && pairsList.length > 4) {\r\n      count = pairsList.length - 1;\r\n      while (count % 8 !== 0) count++;\r\n    }\r\n    dispatch(Stage2Action.fetchStage2.request({ tournamentId: tournament.id!, count }));\r\n    currentHistory.push('/stage2');\r\n  }\r\n\r\n  console.log('Refreshing : ', needRefresh);\r\n  return (\r\n    <>\r\n      <Col className={commonStyle.toolsBarContainer}>\r\n        <Row className={commonStyle.toolsBarRow}>\r\n          <Col>\r\n            <Button variant=\"secondary\" onClick={goBack} className=\"float-left\">\r\n              <LeftArrowIcon /> Indietro\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={() => dispatch(Stage2Action.delete.request({ tId: tournament.id! }))}\r\n              disabled={!session.isAdmin || (session.isAdmin && tournament.progress < TournamentProgress.Stage2)}\r\n            >\r\n              <TrashIcon /> Reset Fase 2\r\n            </Button>\r\n          </Col>\r\n          {/* FIXME:\r\n          <Form.Check\r\n            custom\r\n            checked={autoOrder}\r\n            type=\"checkbox\"\r\n            id=\"autoOrder\"\r\n            label={`Ordinamento Automatico ${autoOrder}`}\r\n            onChange={() => setAutoOrder(!autoOrder)}\r\n          />\r\n        */}\r\n          <Col>\r\n            <Button\r\n              variant=\"outline-warning\"\r\n              className=\"default-color-white float-right\"\r\n              onClick={goToStage2}\r\n              disabled={selected.length < 4 && tournament.progress < TournamentProgress.Stage2}\r\n            >\r\n              <b>Prosegui </b> <RightArrowIcon />\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n      {pairsList ? renderTables(pairsList, autoOrder) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Wrapper);\r\n\r\nfunction renderTables(pairsList: PairDTO[], autoOrder: boolean): JSX.Element[] {\r\n  let stageName = '';\r\n  let stage: PairDTO[] = [];\r\n  let stageList: Array<JSX.Element> = [];\r\n  // sort pairs by stage1Name\r\n  pairsList\r\n    .sort((obj1, obj2) => obj1.stage1Name.localeCompare(obj2.stage1Name))\r\n    // FIXME: use .reduce  ?\r\n    .forEach((element, index) => {\r\n      // A rottura di stage1Name\r\n      if (stageName === '') stageName = element.stage1Name;\r\n      if (stageName !== element.stage1Name) {\r\n        stageList.push(<Stage1Table key={`Stage1-${stageName}`} pairsList={stage} />);\r\n        stageName = element.stage1Name;\r\n        stage = [];\r\n      }\r\n      stage.push(element);\r\n    });\r\n  if (stage.length > 0) {\r\n    stageList.push(<Stage1Table key={`Stage1-${stageName}`} pairsList={stage} />);\r\n    // console.log(`stages ${stageName} :`, stage);\r\n  }\r\n\r\n  return stageList;\r\n}\r\n"],"sourceRoot":""}