{"version":3,"sources":["components/Player/helper.js","components/Player/select.jsx","components/Pair/helper.js","components/Tournament/type.ts","components/Pair/header.tsx","components/Pair/noData.tsx","components/Pair/table.jsx"],"names":["nameFilter","surnameFilter","aliasFilter","roleFilter","emailFilter","phoneFilter","selectOptions","Portiere","Attaccante","Master","clearAllFilter","playerColumns","isEditable","dataField","text","editable","headerStyle","column","colIndex","width","headerClasses","autoSelectText","filter","textFilter","placeholder","getFilter","selectFilter","options","editor","type","Type","SELECT","getOptions","_","value","label","hidden","valueFormatter","selectedOption","alias","surname","name","getEmptyPlayer","id","role","email","phone","match_played","match_won","total_score","animatedComponents","makeAnimated","PlayerSelection","React","forwardRef","props","ref","useState","setSelectedOption","row","columnIndex","onUpdate","onSelect","components","onChange","pairId","isSearchable","isClearable","columns","align","editorRenderer","editorProps","rowIndex","toUpperCase","split","map","e","CHECKBOX","style","content","backgroundColor","cellEditProps","cellEditFactory","mode","blurToSave","afterSaveCell","oldValue","newValue","a","fetch","method","headers","body","JSON","stringify","response","json","getEmptyRowModel","rowNumber","tId","player1","player2","pairAlias","stage1Name","paid1","paid2","fetchData","rows","result","players","tournament","fetchPairs","setterFunction","console","log","createAlias","TournamentProgress","New","PairsSelection","Stage1","Stage2","TableHeader","progress","noData","addRow","optionsLength","diff","Button","variant","onClick","disabled","to","PairsTable","useParams","currentHistory","useHistory","state","message","isLoading","setIsLoading","messageInitialState","setMessage","data","setData","selectedRows","setSelectedRows","stage1Number","setStage1Number","newRowsNumber","setNewRowsNumber","showErrorMessage","setTimeout","showSuccessMessage","index","emptyRow","length","current","addMultipleRows","ii","deleteRow","forEach","push","sort","e1","e2","localeCompare","find","selectedRow","updateOptions","player","selected","useEffect","selectedElement","newRowsElement","rowElement","handleSelect","isSelected","found","confirmPairs","missingStage1Name","missingPairs","invalidStage","pairsInStage","reduce","allNames","stageName","MIN_PAIR_PER_STAGE","goBack","selectRow","onSelectAll","deleteStage1","setStage1Name","names","newRows","error","availableRows","Math","floor","accumulator","deleteDisabled","deleteTooltipMessage","SessionContext","Consumer","session","Row","show","Col","margin","md","span","ListGroup","Item","action","OverlayTrigger","placement","key","overlay","Tooltip","className","pointerEvents","display","InputGroup","target","Prepend","Text","FormControl","aria-label","Append","bootstrap4","keyField","cellEdit","noDataIndication","caption","striped","hover"],"mappings":"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","file":"static/js/9.6f1843a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { textFilter, selectFilter } from 'react-bootstrap-table2-filter';\r\nimport { Type } from 'react-bootstrap-table2-editor';\r\n\r\n// options for role column\r\nconst selectOptions = {\r\n  Portiere: 'Portiere',\r\n  Attaccante: 'Attaccante',\r\n  Master: 'Master'\r\n};\r\n\r\n// Filter\r\nlet nameFilter;\r\nlet surnameFilter;\r\nlet aliasFilter;\r\nlet roleFilter;\r\nlet emailFilter;\r\nlet phoneFilter;\r\n\r\nexport function clearAllFilter() {\r\n  nameFilter('');\r\n  surnameFilter('');\r\n  aliasFilter('');\r\n  roleFilter('');\r\n  emailFilter('');\r\n  phoneFilter('');\r\n}\r\n\r\n// Columns default\r\nconst playerColumns = isEditable => [\r\n  { dataField: 'id', text: 'ID', editable: false, headerStyle: (column, colIndex) => ({ width: '3%' }) },\r\n  {\r\n    dataField: 'name',\r\n    text: 'Nome',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '16%' : '25%' }),\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (nameFilter = filter)\r\n    })\r\n  },\r\n  {\r\n    dataField: 'surname',\r\n    text: 'Cognome',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '16%' : '25%' }),\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (surnameFilter = filter)\r\n    })\r\n  },\r\n  {\r\n    dataField: 'alias',\r\n    text: 'Alias',\r\n    headerClasses: 'player-table-header-element',\r\n    headerStyle: (column, colIndex) => ({ width: isEditable ? '17%' : '25%' }),\r\n    autoSelectText: true,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (aliasFilter = filter)\r\n    })\r\n  },\r\n  {\r\n    dataField: 'role',\r\n    text: 'Roulo',\r\n    headerClasses: 'player-table-header-element',\r\n    headerStyle: (column, colIndex) => ({ width: `${isEditable ? '11' : '15'}%` }),\r\n    filter: selectFilter({\r\n      placeholder: 'Filtra...',\r\n      options: selectOptions,\r\n      getFilter: filter => (roleFilter = filter)\r\n    }),\r\n    editor: {\r\n      type: Type.SELECT,\r\n      getOptions: _ => {\r\n        return [\r\n          { value: 'Portiere', label: 'Portiere' },\r\n          { value: 'Attaccante', label: 'Attaccante' },\r\n          { value: 'Master', label: 'Master' }\r\n        ];\r\n      }\r\n    }\r\n  },\r\n  {\r\n    dataField: 'email',\r\n    text: 'Email',\r\n    headerStyle: (column, colIndex) => ({ width: '20%' }),\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    hidden: !isEditable,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (emailFilter = filter)\r\n    })\r\n  },\r\n  {\r\n    dataField: 'phone',\r\n    headerStyle: (column, colIndex) => ({ width: '10%' }),\r\n    text: 'Telefono',\r\n    headerClasses: 'player-table-header-element',\r\n    autoSelectText: true,\r\n    hidden: !isEditable,\r\n    filter: textFilter({\r\n      placeholder: 'Filtra...',\r\n      getFilter: filter => (phoneFilter = filter)\r\n    })\r\n  },\r\n  { dataField: 'match_played', text: 'Partite Giocate', hidden: true },\r\n  { dataField: 'match_won', text: 'Vittorie', hidden: true },\r\n  { dataField: 'total_score', text: 'Punteggio', hidden: true }\r\n];\r\n\r\nexport default playerColumns;\r\n\r\n// Custom export button\r\nexport const ExportCSVButton = props => {\r\n  return (\r\n    <Button disabled className=\"btn btn-success\" onClick={() => props.onExport()}>\r\n      Esporta in CSV\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const fetchPlayers = (setterFunction, tId) => {\r\n  (async () => {\r\n    const response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const result = await response.json();\r\n    const model = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n    console.log('fetchPlayers.result : ', model);\r\n    setterFunction(model);\r\n  })();\r\n};\r\n\r\nexport function valueFormatter(selectedOption) {\r\n  let value = '';\r\n  if (!selectedOption) return '';\r\n  if (selectedOption.alias) {\r\n    value = selectedOption.alias;\r\n  } else {\r\n    value = selectedOption.surname ? `${selectedOption.name} - ${selectedOption.surname}` : selectedOption.name;\r\n  }\r\n  return value;\r\n}\r\n\r\nexport function getEmptyPlayer(label) {\r\n  return {\r\n    id: null,\r\n    name: '',\r\n    surname: '',\r\n    alias: '',\r\n    label: label || '',\r\n    role: 'Portiere',\r\n    email: '',\r\n    phone: '',\r\n    match_played: 0,\r\n    match_won: 0,\r\n    total_score: 0,\r\n    editable: false\r\n  };\r\n}\r\n","import React, { useState } from 'react';\r\nimport Select from 'react-select';\r\nimport { valueFormatter } from './helper';\r\nimport makeAnimated from 'react-select/animated';\r\n\r\n// Probabilmente il componente Select usa Ref.... Lascio cosi..\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst PlayerSelection = React.forwardRef((props, ref) => {\r\n  const [selectedOption, setSelectedOption] = useState();\r\n  const { row, columnIndex, id, onUpdate, onSelect, options } = props;\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  function getValue() {\r\n    return valueFormatter(selectedOption);\r\n  }\r\n\r\n  const handleChange = selectedOption => {\r\n    selectedOption.pairId = id;\r\n    setSelectedOption(selectedOption);\r\n    const value = valueFormatter(selectedOption);\r\n    onUpdate(value);\r\n    onSelect(selectedOption, row.id, columnIndex);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      components={animatedComponents}\r\n      options={options}\r\n      onChange={handleChange}\r\n      value={selectedOption}\r\n      placeholder=\"Cerca...\"\r\n      isSearchable\r\n      isClearable\r\n    />\r\n  );\r\n});\r\n\r\nexport default PlayerSelection;\r\n","import React from 'react';\r\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\nimport PlayerSelect from '../Player/select';\r\nimport { getEmptyPlayer } from '../Player/helper';\r\n\r\nexport const columns = (onSelect, options) => [\r\n  { dataField: 'id', text: 'ID', editable: false, hidden: true, align: () => 'center' },\r\n  { dataField: 'rowNumber', text: 'ID', editable: false, align: () => 'center' },\r\n  {\r\n    dataField: 'player1.alias',\r\n    text: 'Giocatore 1',\r\n    align: () => 'center',\r\n    editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\r\n      <PlayerSelect\r\n        {...editorProps}\r\n        id={columnIndex}\r\n        row={row}\r\n        rowIndex={rowIndex}\r\n        columnIndex={columnIndex}\r\n        value={value}\r\n        onSelect={onSelect}\r\n        options={options}\r\n      />\r\n    ),\r\n    headerStyle: (column, colIndex) => ({ width: '20%' })\r\n  },\r\n  {\r\n    dataField: 'player2.alias',\r\n    text: 'Giocatore 2',\r\n    align: () => 'center',\r\n    editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\r\n      <PlayerSelect\r\n        {...editorProps}\r\n        id={columnIndex}\r\n        row={row}\r\n        rowIndex={rowIndex}\r\n        columnIndex={columnIndex}\r\n        value={value}\r\n        onSelect={onSelect}\r\n        options={options}\r\n      />\r\n    ),\r\n    headerStyle: (column, colIndex) => ({ width: '20%' })\r\n  },\r\n  { dataField: 'pairAlias', text: 'Alias Coppia', headerStyle: (column, colIndex) => ({ width: '25%' }) },\r\n  {\r\n    dataField: 'stage1Name',\r\n    text: 'Nome girone',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '10%' }),\r\n    editor: {\r\n      type: Type.SELECT,\r\n      options: 'abcdefghijklmnopqrstuvwxyz'\r\n        .toUpperCase()\r\n        .split('')\r\n        .map(e => {\r\n          return { value: e, label: e };\r\n        })\r\n    }\r\n  },\r\n  {\r\n    dataField: 'paid1',\r\n    text: 'Pagato 1',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '7,5%' }),\r\n    editor: {\r\n      type: Type.CHECKBOX,\r\n      value: 'Si:No'\r\n    },\r\n    /*\r\n    formatter: (cell, row, rowIndex) => {\r\n      console.log(cell);\r\n      return (\r\n        <InputGroup>\r\n          <InputGroup.Checkbox style={{ margin: 'auto' }} onCancechecked={cell}></InputGroup.Checkbox>\r\n        </InputGroup>\r\n      );\r\n    },*/\r\n    style: (content, row, rowIndex, columnIndex) => {\r\n      if (content !== 'Si') return { backgroundColor: '#ffbf47' };\r\n    }\r\n  },\r\n  {\r\n    dataField: 'paid2',\r\n    text: 'Pagato 2',\r\n    align: () => 'center',\r\n    headerStyle: (column, colIndex) => ({ width: '7,5%' }),\r\n    editor: {\r\n      type: Type.CHECKBOX,\r\n      value: 'Si:No'\r\n    },\r\n    /*\r\n    formatter: (cell, row, rowIndex) => {\r\n      console.log(cell);\r\n      return (\r\n        <InputGroup>\r\n          <InputGroup.Checkbox style={{ margin: 'auto' }} onCancechecked={cell}></InputGroup.Checkbox>\r\n        </InputGroup>\r\n      );\r\n    },*/\r\n    style: (content, row, rowIndex, columnIndex) => {\r\n      if (content !== 'Si') return { backgroundColor: '#ffbf47' };\r\n    }\r\n  }\r\n];\r\n\r\nexport const cellEditProps = editable =>\r\n  cellEditFactory({\r\n    mode: editable ? 'click' : 'none',\r\n    blurToSave: true,\r\n    afterSaveCell: (oldValue, newValue, row, column) => {\r\n      // Aggiornamento per queste due colonne viene eseguito dalla funzione onSelect\r\n      if (column.dataField === 'player1.alias' || column.dataField === 'player2.alias') return;\r\n      (async () => {\r\n        const response = await fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row)\r\n        });\r\n        await response.json();\r\n      })();\r\n    }\r\n  });\r\n\r\nexport function getEmptyRowModel() {\r\n  return {\r\n    id: null,\r\n    rowNumber: null,\r\n    tId: null,\r\n    player1: getEmptyPlayer(),\r\n    player2: getEmptyPlayer(),\r\n    pairAlias: '',\r\n    stage1Name: '',\r\n    paid1: 'No',\r\n    paid2: 'No'\r\n  };\r\n}\r\n\r\nexport const fetchData = async tId => {\r\n  // Fetch Pairs\r\n  let response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n  const rows = await response.json();\r\n\r\n  response = await fetch(tId ? `/api/v1/player/list/${tId}` : '/api/v1/player/list', {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n  const result = await response.json();\r\n  const players = [...result, getEmptyPlayer('Nessun Giocatore')];\r\n\r\n  // Fetch Tournament\r\n  response = await fetch(`/api/v1/tournament/${tId}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n  const tournament = await response.json();\r\n\r\n  return { rows, players, tournament };\r\n};\r\n\r\nexport const fetchPairs = (setterFunction, tId) => {\r\n  (async () => {\r\n    const response = await fetch(`/api/v1/pair/list/?tId=${tId}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const result = await response.json();\r\n    setterFunction(result);\r\n  })();\r\n};\r\n\r\nexport function valueFormatter(selectedOption) {\r\n  console.log('valueFormatter : ', selectedOption);\r\n  if (selectedOption.pairAlias && selectedOption.pairAlias !== '')\r\n    return `${selectedOption.pairAlias} ( ${selectedOption.id} )`;\r\n  return createAlias(selectedOption);\r\n}\r\n\r\nexport function createAlias(selectedOption) {\r\n  console.log('createAlias : ', selectedOption);\r\n  let value = `${selectedOption.rowNumber} : `;\r\n  const { player1, player2, id } = selectedOption;\r\n  value += player1.alias ? player1.alias : player1.name;\r\n  value += ' - ' + player2.alias ? player2.alias : player2.name;\r\n  value += ` ( ${id} )`;\r\n  return value;\r\n}\r\n","import { PairModel } from '../Pair/type';\r\n\r\nexport type TournamentProgressType = 'New' | 'PairsSelection' | 'Stage1' | 'Stage2';\r\n\r\nexport type TournamentModel = {\r\n  id: number;\r\n  name: string;\r\n  date: Date;\r\n  progress: TournamentProgressType;\r\n  public: boolean;\r\n  label: string;\r\n  ownerId?: number;\r\n  pairs?: PairModel[];\r\n};\r\n\r\nexport type selectOptions = {\r\n  label: string;\r\n  value: string;\r\n  data: TournamentModel;\r\n};\r\n\r\nexport const TournamentProgress = { New: 'New', PairsSelection: 'PairsSelection', Stage1: 'Stage1', Stage2: 'Stage2' };\r\n","import React from 'react';\r\nimport { headerPropsType } from './type';\r\n\r\nconst TableHeader: React.FC<headerPropsType> = ({ tournament }: headerPropsType) => {\r\n  return tournament ? (\r\n    <h3>\r\n      <p>\r\n        <b>\r\n          Torneo \"<strong>{tournament?.name.toUpperCase()}</strong>\" ( {tournament?.id} )\r\n          <small> - {tournament?.progress}</small>\r\n        </b>\r\n      </p>\r\n    </h3>\r\n  ) : null;\r\n};\r\n\r\nexport default TableHeader;\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { noDataPropsType } from './type';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// FIXME: change to tounament name\r\nconst noData: React.FC<noDataPropsType> = ({ addRow, optionsLength, isEditable }: noDataPropsType) => {\r\n  const MIN_PLAYERS = 8;\r\n  const players = optionsLength - 1;\r\n  const diff = players < MIN_PLAYERS ? MIN_PLAYERS - players : 0;\r\n  if (!optionsLength) return null;\r\n  return players >= MIN_PLAYERS ? (\r\n    <>\r\n      <p> Aggiungi le coppie per questo torneo...</p>\r\n      <Button variant=\"success\" onClick={addRow} disabled={!isEditable}>\r\n        Aggiungi Coppia\r\n      </Button>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <p>Ci sono solo {players} giocatori definiti ma devono essercene almeno 8 per poter formare un torneo.</p>\r\n      <p>{diff === 1 ? 'Devi creare un altro giocatore...' : `Devi creare almeno altri ${diff}`}</p>\r\n      <Link to={'/player'}>\r\n        <Button variant=\"success\">Gestione Giocatori</Button>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default noData;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, ListGroup, InputGroup, FormControl, Row, Col, Tooltip, OverlayTrigger } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { fetchData, columns, cellEditProps, getEmptyRowModel } from './helper';\r\nimport { getEmptyPlayer } from '../Player/helper';\r\nimport { useParams, useHistory } from 'react-router';\r\nimport TableHeader from './header';\r\nimport NoData from './noData';\r\nimport { LoadingModal, GenericToast } from '../core/Commons';\r\nimport './style.css';\r\nimport { TournamentProgress } from '../Tournament/type';\r\nimport { SessionContext, isEditable } from '../core/SessionContext';\r\nconst PairsTable = () => {\r\n  // Navigation\r\n  const { tId } = useParams();\r\n  console.log('render pairs table : ', tId);\r\n\r\n  let currentHistory = useHistory();\r\n\r\n  // States\r\n  // User messages\r\n  const [isLoading, setIsLoading] = useState({ state: false, message: 'Caricamento' });\r\n  const messageInitialState = { message: '', type: 'success' };\r\n  const [message, setMessage] = useState(messageInitialState);\r\n  // Data\r\n  const [data, setData] = useState({ tournament: null, rows: [], players: [] });\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  // Function params\r\n  const [stage1Number, setStage1Number] = useState(0);\r\n  const [newRowsNumber, setNewRowsNumber] = useState(0);\r\n\r\n  // Initial Fetch\r\n  useEffect(() => {\r\n    (async () => setData(await fetchData(tId)))();\r\n  }, [tId]);\r\n\r\n  // User messages\r\n  function showErrorMessage(message) {\r\n    setIsLoading({ state: false, message });\r\n    setMessage({ message, type: 'danger' });\r\n    setTimeout(() => setMessage(messageInitialState), 5000);\r\n  }\r\n  function showSuccessMessage(message) {\r\n    setIsLoading({ state: false, message });\r\n    setMessage({ message, type: 'success' });\r\n    setTimeout(() => setMessage(messageInitialState), 5000);\r\n  }\r\n\r\n  async function addRow(index) {\r\n    try {\r\n      setIsLoading({ state: true, message: 'Aggiunta riga in corso' });\r\n      const emptyRow = getEmptyRowModel();\r\n      emptyRow.tId = tId;\r\n      const response = await fetch('/api/v1/pair', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(emptyRow)\r\n      });\r\n      const result = await response.json();\r\n      emptyRow.id = result.id;\r\n      emptyRow.rowNumber = index || data.rows.length + 1;\r\n      setData(current => ({\r\n        tournament: current.tournament,\r\n        rows: [emptyRow, ...current.rows],\r\n        players: current.players\r\n      }));\r\n      showSuccessMessage('Riga aggiunta');\r\n    } catch (error) {\r\n      showErrorMessage('Errore aggiunta riga');\r\n    }\r\n  }\r\n\r\n  async function addMultipleRows() {\r\n    let index = data.rows.length + 1;\r\n    for (let ii = 0; ii < newRowsNumber; ii++) {\r\n      await addRow(index);\r\n      index++;\r\n    }\r\n    setNewRowsNumber(0);\r\n  }\r\n\r\n  async function deleteRow() {\r\n    try {\r\n      setIsLoading({\r\n        state: true,\r\n        message: selectedRows.length > 1 ? 'Cancellazione righe in corso' : 'Cancellazione riga in corso'\r\n      });\r\n      // Devo ripristinare i giocatori eliminati\r\n      let players = [];\r\n      selectedRows.forEach(e => {\r\n        if (e.player1.id) players.push(e.player1);\r\n        if (e.player2.id) players.push(e.player2);\r\n      });\r\n      if (players)\r\n        setData(current => ({\r\n          tournament: current.tournament,\r\n          rows: current.rows,\r\n          players: [...players, ...current.players].sort((e1, e2) => e1.alias.localeCompare(e2.alias))\r\n        }));\r\n\r\n      const response = await fetch('/api/v1/pair', {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(selectedRows)\r\n      });\r\n      await response.json();\r\n\r\n      setData(current => ({\r\n        tournament: current.tournament,\r\n        rows: current.rows.filter(row => !selectedRows.find(selectedRow => selectedRow.id === row.id)),\r\n        players: current.players\r\n      }));\r\n\r\n      showSuccessMessage(selectedRows.length > 1 ? 'Righe cancellate' : 'Riga cancellata');\r\n    } catch (error) {\r\n      showErrorMessage('Errore cancellazione riga');\r\n    }\r\n\r\n    setSelectedRows([]);\r\n  }\r\n\r\n  // update players list when a player is selected\r\n  function updateOptions(player, selected) {\r\n    if (player && player.id)\r\n      if (selected.id)\r\n        setData(current => ({\r\n          tournament: current.tournament,\r\n          rows: current.rows,\r\n          players: [...current.players.filter(e => e.id !== selected.id), player].sort((e1, e2) =>\r\n            e1.alias.localeCompare(e2.alias)\r\n          )\r\n        }));\r\n      else\r\n        setData(current => ({\r\n          tournament: current.tournament,\r\n          rows: current.rows,\r\n          players: [...current.players, player].sort((e1, e2) => e1.alias.localeCompare(e2.alias))\r\n        }));\r\n    else if (selected.id)\r\n      setData(current => ({\r\n        tournament: current.tournament,\r\n        rows: current.rows,\r\n        players: current.players.filter(e => e.id !== selected.id)\r\n      }));\r\n  }\r\n  // Aggiorno la colonna con il giocatore selezionato\r\n  const onSelect = (selectedElement, rowIndex, columnIndex) => {\r\n    const newRowsElement = data.rows.map(rowElement => {\r\n      if (rowElement.id === rowIndex) {\r\n        let row = rowElement;\r\n        if (columnIndex === 1) {\r\n          if (selectedElement.id && row.player2 && row.player2.id === selectedElement.id) {\r\n            // Devo salvare l'elemnto che sto per sostituire\r\n            row.player1 = getEmptyPlayer();\r\n            showErrorMessage('Attenzione : Non puoi selezionare lo stesso giocare ! ');\r\n          } else {\r\n            // Aggiorno la lista dei giocatori disponibili prima di aggiornare i dati\r\n            updateOptions(row.player1, selectedElement);\r\n            row.player1 = selectedElement;\r\n          }\r\n        } else {\r\n          if (selectedElement.id && row.player1 && row.player1.id === selectedElement.id) {\r\n            row.player2 = getEmptyPlayer();\r\n            showErrorMessage('Attenzione : Non puoi selezionare lo stesso giocare ! ');\r\n          } else {\r\n            updateOptions(row.player2, selectedElement);\r\n            row.player2 = selectedElement;\r\n          }\r\n        }\r\n        // update Db. Non aspetto la risposta...\r\n        fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row)\r\n        });\r\n        return row;\r\n      } else return rowElement;\r\n    });\r\n    setData(current => ({\r\n      tournament: current.tournament,\r\n      rows: newRowsElement,\r\n      players: current.players\r\n    }));\r\n  };\r\n\r\n  const handleSelect = (row, isSelected) => {\r\n    setSelectedRows(selectedRows => {\r\n      const found = selectedRows.find(e => e.id === row.id) ? true : false;\r\n      if (isSelected) {\r\n        return found ? selectedRows : [row, ...selectedRows];\r\n      } else {\r\n        return found ? selectedRows.filter(e => e.id !== row.id) : selectedRows;\r\n      }\r\n    });\r\n  };\r\n\r\n  const confirmPairs = _ => {\r\n    if (!tId) {\r\n      showErrorMessage('Id torneo mancante. Verrai inviato alla Home tra 5 secondi....');\r\n      setTimeout(() => currentHistory.push('/'), 5000);\r\n    }\r\n\r\n    // Controllo che sia presente almeno una coppia\r\n    if (data.rows.length < 4) {\r\n      showErrorMessage('Numero di coppie insufficente. Devi formare almeno 4 coppie');\r\n      return;\r\n    }\r\n    // Controllo gironi non assegnati\r\n    const missingStage1Name = data.rows.filter(e => !e.stage1Name || e.stage1Name === '').map(e => e.rowNumber);\r\n    if (missingStage1Name.length !== 0) {\r\n      showErrorMessage(\r\n        `Assegna  ${\r\n          missingStage1Name.length === 1 ? 'la riga ' : 'le righe '\r\n        } ${missingStage1Name} ad un girone per procedere `\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Controllo coppie non assegnate\r\n    const missingPairs = data.rows.filter(e => e.player1.id === null || e.player2.id === null).map(e => e.rowNumber);\r\n    if (missingPairs.length !== 0) {\r\n      showErrorMessage(\r\n        `Assegna  i giocatori ${\r\n          missingPairs.length === 1 ? 'alla riga ' : 'alle righe '\r\n        } ${missingPairs} per procedere `\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Controllo che non ci siano gironi con meno di 1 coppia ( meglio spostare 3 )\r\n    const MIN_PAIR_PER_STAGE = 3;\r\n    let invalidStage = [];\r\n    const pairsInStage = data.rows.reduce((allNames, row) => {\r\n      if (row.stage1Name in allNames) allNames[row.stage1Name]++;\r\n      else allNames[row.stage1Name] = 1;\r\n      return allNames;\r\n    }, {});\r\n    for (let stageName in pairsInStage) {\r\n      if (pairsInStage[stageName] <= MIN_PAIR_PER_STAGE) invalidStage.push(stageName);\r\n    }\r\n    if (invalidStage.length > 0) {\r\n      showErrorMessage(\r\n        invalidStage.length === 1\r\n          ? `Il torneo ${invalidStage} deve contenere almeno ${MIN_PAIR_PER_STAGE + 1} coppie`\r\n          : `I torneI ${invalidStage} devono contenere almeno ${MIN_PAIR_PER_STAGE + 1} coppie`\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Update tournament progress\r\n    data.tournament.progress = TournamentProgress.Stage1;\r\n    fetch('/api/tournament', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data.tournament)\r\n    });\r\n\r\n    // Go to Stage1\r\n    currentHistory.push(`/stage1/${tId}`);\r\n  };\r\n\r\n  function goBack() {\r\n    currentHistory.push('/');\r\n  }\r\n\r\n  const selectRow = {\r\n    mode: 'checkbox',\r\n    onSelect: handleSelect,\r\n    onSelectAll: (isSelected, rows) => rows.forEach(row => handleSelect(row, isSelected)),\r\n    style: { backgroundColor: '#c8e6c9' }\r\n  };\r\n\r\n  async function deleteStage1() {\r\n    try {\r\n      setIsLoading({ state: true, message: 'Cancellazione in corso' });\r\n      const response = await fetch('/api/stage1', {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ tId })\r\n      });\r\n      await response.json();\r\n      // Update tournament progress\r\n      data.tournament.progress = TournamentProgress.PairsSelection;\r\n      fetch('/api/tournament', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data.tournament)\r\n      });\r\n      showSuccessMessage('Cancellazione completata');\r\n    } catch (error) {\r\n      showErrorMessage('Errore cancellazione Fase 1');\r\n    }\r\n  }\r\n\r\n  async function setStage1Name() {\r\n    if (!stage1Number) {\r\n      showErrorMessage('Specificare il numero di gironi da assegnare');\r\n      return;\r\n    }\r\n    setIsLoading({ state: true, message: 'Aggiornamento in corso ' });\r\n    let current = 0;\r\n    const names = 'abcdefghijklmnopqrstuvwxyz'.toUpperCase().split('');\r\n    let newRows = [];\r\n    for (let index in data.rows) {\r\n      let row = data.rows[index];\r\n      // FIXME: if (current === stage1Number) QUESTO NON FUNZIONA ===\r\n      // eslint-disable-next-line eqeqeq\r\n      if (current == stage1Number) current = 0;\r\n      row['stage1Name'] = names[current];\r\n      current++;\r\n      try {\r\n        fetch('/api/v1/pair', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(row)\r\n        });\r\n        newRows.push(row);\r\n      } catch (error) {\r\n        showErrorMessage('Errore');\r\n        newRows.push(row);\r\n      }\r\n    }\r\n    showSuccessMessage('Gironi assegnati correttamente');\r\n    setData(current => ({ tournament: current.tournament, rows: newRows, players: current.players }));\r\n  }\r\n\r\n  const availableRows =\r\n    Math.floor(\r\n      data.players.length -\r\n        1 -\r\n        data.rows.reduce((accumulator, e) => {\r\n          if (!e.player1 && !e.player2) return accumulator + 2;\r\n          if (!e.player1 || !e.player2) return accumulator + 1;\r\n          if (!e.player1.id && !e.player2.id) return accumulator + 2;\r\n          if (!e.player1.id || !e.player2.id) return accumulator + 1;\r\n          return accumulator;\r\n        }, 0)\r\n    ) / 2;\r\n\r\n  const deleteDisabled =\r\n    !(selectedRows.length > 0) || data.tournament.progress === 'Stage1' || data.tournament.progress === 'Stage2';\r\n\r\n  let deleteTooltipMessage = '';\r\n  if (!(selectedRows.length > 0)) deleteTooltipMessage = 'Seleziona almeno una riga';\r\n  else if (data.tournament.progress === 'Stage1' || data.tournament.progress === 'Stage2')\r\n    deleteTooltipMessage = 'Devi prima resettare i gironi per poter cancellare delle coppie';\r\n  else deleteTooltipMessage = 'Cancella le coppie selezionate';\r\n\r\n  // console.log('render table : ', data);\r\n  return (\r\n    <SessionContext.Consumer>\r\n      {([session]) => (\r\n        <Row>\r\n          <LoadingModal show={isLoading.state} message={isLoading.message} />\r\n          <Col style={{ margin: '10px' }} md={{ span: 1 }}>\r\n            <Row>\r\n              <ListGroup>\r\n                <ListGroup.Item action variant=\"primary\" onClick={confirmPairs}>\r\n                  Prosegui\r\n                </ListGroup.Item>\r\n                <ListGroup.Item action variant=\"secondary\" onClick={goBack}>\r\n                  Home\r\n                </ListGroup.Item>\r\n                <ListGroup.Item\r\n                  action\r\n                  variant=\"success\"\r\n                  onClick={() => addRow()}\r\n                  disabled={availableRows <= 0 || !isEditable(session)}\r\n                >\r\n                  Aggiungi Coppia\r\n                </ListGroup.Item>\r\n\r\n                <OverlayTrigger placement=\"right\" key=\"right\" overlay={<Tooltip>{deleteTooltipMessage}</Tooltip>}>\r\n                  <span className=\"d-inline-block\" onClick={deleteRow}>\r\n                    <ListGroup.Item\r\n                      action\r\n                      variant=\"danger\"\r\n                      style={{ pointerEvents: 'none' }}\r\n                      disabled={deleteDisabled || !isEditable(session)}\r\n                    >\r\n                      Elimina Coppia {deleteDisabled}\r\n                    </ListGroup.Item>\r\n                  </span>\r\n                </OverlayTrigger>\r\n\r\n                <ListGroup.Item action variant=\"danger\" onClick={deleteStage1} disabled={!isEditable(session)}>\r\n                  Reset gironi\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Row>\r\n          </Col>\r\n          <Col style={{ margin: '10px' }}>\r\n            <Row style={{ display: isEditable(session) ? 'flex' : 'none' }}>\r\n              <InputGroup onChange={e => setStage1Number(e.target.value)}>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Assegna gironi automaticamente</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  placeholder={\r\n                    data.rows.length < 4\r\n                      ? 'Inserisci almeno 4 coppie'\r\n                      : `Numero di gironi ( max ${Math.floor(data.rows.length / 4)} )`\r\n                  }\r\n                  aria-label=\"Numero di gironi\"\r\n                  disabled={data.rows.length < 4}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    onClick={setStage1Name}\r\n                    disabled={!stage1Number || stage1Number > Math.floor(data.rows.length / 4) || data.rows.length < 4}\r\n                  >\r\n                    Esegui\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n              <InputGroup onChange={e => setNewRowsNumber(e.target.value)}>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Aggiunti N nuove coppie</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  disabled={availableRows <= 0}\r\n                  placeholder={\r\n                    availableRows <= 0\r\n                      ? 'Numero massimo di coppie gia creato sulla base del numero di giocatori disponibili'\r\n                      : `Numero di coppie da aggiungere ( max ${availableRows} )`\r\n                  }\r\n                  aria-label=\"Numero di coppie\"\r\n                  value={newRowsNumber || ''}\r\n                />\r\n                <InputGroup.Append>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    onClick={e => setNewRowsNumber(availableRows)}\r\n                    disabled={newRowsNumber > availableRows}\r\n                  >\r\n                    Max\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    onClick={addMultipleRows}\r\n                    disabled={!newRowsNumber || newRowsNumber > availableRows}\r\n                  >\r\n                    Esegui\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Row>\r\n            <Row>\r\n              <BootstrapTable\r\n                bootstrap4\r\n                keyField=\"id\"\r\n                data={data.rows}\r\n                columns={columns(onSelect, data.players)}\r\n                cellEdit={cellEditProps(isEditable(session))}\r\n                selectRow={selectRow}\r\n                noDataIndication={\r\n                  <NoData\r\n                    isEditable={isEditable(session)}\r\n                    addRow={() => addRow()}\r\n                    optionsLength={data.players.length}\r\n                  />\r\n                }\r\n                caption={<TableHeader tournament={data.tournament} />}\r\n                headerClasses=\"default-background default-color-white\"\r\n                striped\r\n                hover\r\n              />\r\n            </Row>\r\n          </Col>\r\n          <Col style={{ margin: '10px' }} md={2}>\r\n            <GenericToast message={message.message} type={message.type} />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </SessionContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default PairsTable;\r\n"],"sourceRoot":""}